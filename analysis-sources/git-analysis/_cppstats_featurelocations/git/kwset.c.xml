<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\kwset.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kwset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/obstack.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCHAR</name></cpp:macro> <cpp:value>(UCHAR_MAX + 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>obstack_chunk_alloc</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate a negative amount: %ld"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>obstack_chunk_free</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char) (c))</cpp:value></cpp:define>


<struct>struct <name>tree</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>llink</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>rlink</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>trie</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>label</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>balance</name></decl>;</decl_stmt> 
}</block>;</struct>


<struct>struct <name>trie</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>accepting</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>links</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>fail</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxshift</name></decl>;</decl_stmt> 
}</block>;</struct>


<struct>struct <name>kwset</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>obstack</name></name></type> <name>obstack</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>words</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>trie</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mind</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>delta</name><index>[<expr><name>NCHAR</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name><name>next</name><index>[<expr><name>NCHAR</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mind2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>trans</name></decl>;</decl_stmt> 
}</block>;</struct>



<function><type><name>kwset_t</name></type>
<name>kwsalloc</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kwset</name></name> <modifier>*</modifier></type><name>kwset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>kwset</name> <operator>=</operator> <operator>(</operator>struct <name>kwset</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>kwset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>obstack_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kwset</name><operator>-&gt;</operator><name>obstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>words</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name></name>
<operator>=</operator> <operator>(</operator>struct <name>trie</name> <operator>*</operator><operator>)</operator> <call><name>obstack_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kwset</name><operator>-&gt;</operator><name>obstack</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>trie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kwset</name><operator>-&gt;</operator><name>trie</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>kwsfree</name><argument_list>(<argument><expr><operator>(</operator><name>kwset_t</name><operator>)</operator> <name>kwset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>accepting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>links</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>maxd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>trans</name></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>kwset_t</name><operator>)</operator> <name>kwset</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEPTH_SIZE</name></cpp:macro> <cpp:value>(CHAR_BIT + CHAR_BIT/2)</cpp:value></cpp:define>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>kwsincr</name> <parameter_list>(<parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kwset</name></name> <modifier>*</modifier></type><name>kwset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>trie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name></type> <name>label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name><name>links</name><index>[<expr><name>DEPTH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>L</name></decl>, <decl><name>R</name></decl> }</block> <decl><name><name>dirs</name><index>[<expr><name>DEPTH_SIZE</name></expr>]</index></name></decl>;</enum>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>kwset</name> <operator>=</operator> <operator>(</operator>struct <name>kwset</name> <operator>*</operator><operator>)</operator> <name>kws</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trie</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>



<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>label</name> <operator>=</operator> <ternary><condition><expr><name><name>kwset</name><operator>-&gt;</operator><name>trans</name></name></expr> ?</condition><then> <expr><name><name>kwset</name><operator>-&gt;</operator><name>trans</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>text</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><operator>*</operator><operator>--</operator><name>text</name></expr></else></ternary></expr>;</expr_stmt>




<expr_stmt><expr><name>link</name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>links</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>links</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>tree</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>trie</name><operator>-&gt;</operator><name>links</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>link</name> <operator>&amp;&amp;</operator> <name>label</name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&lt;</operator> <name><name>link</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dirs</name><index>[<expr><name>depth</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>L</name></expr><operator>,</operator> <expr><name>link</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dirs</name><index>[<expr><name>depth</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>R</name></expr><operator>,</operator> <expr><name>link</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>link</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>link</name> <operator>=</operator> <operator>(</operator>struct <name>tree</name> <operator>*</operator><operator>)</operator> <call><name>obstack_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kwset</name><operator>-&gt;</operator><name>obstack</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>tree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"memory exhausted"</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name></name> <operator>=</operator> <operator>(</operator>struct <name>trie</name> <operator>*</operator><operator>)</operator> <call><name>obstack_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kwset</name><operator>-&gt;</operator><name>obstack</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>trie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>trie</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>obstack_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kwset</name><operator>-&gt;</operator><name>obstack</name></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"memory exhausted"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>accepting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>links</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>trie</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dirs</name><index>[<expr><operator>--</operator><name>depth</name></expr>]</index></name> <operator>==</operator> <name>L</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>llink</name> <operator>=</operator> <name>link</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>rlink</name> <operator>=</operator> <name>link</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<while>while <condition>(<expr><name>depth</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>balance</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dirs</name><index>[<expr><name>depth</name></expr>]</index></name> <operator>==</operator> <name>L</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>balance</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>balance</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>dirs</name><index>[<expr><name>depth</name></expr>]</index></name> <operator>==</operator> <name>L</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>balance</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>dirs</name><index>[<expr><name>depth</name></expr>]</index></name> <operator>==</operator> <name>R</name> <operator>&amp;&amp;</operator> <operator>++</operator><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>balance</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name><operator>-&gt;</operator><name>balance</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><operator>(</operator><name>char</name><operator>)</operator> <operator>-</operator><literal type="number">2</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>dirs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>L</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>llink</name></name></expr><operator>,</operator> <expr><name>rl</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>r</name></expr><operator>,</operator> <expr><name><name>r</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>R</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>llink</name></name></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rl</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>rlink</name></name></expr><operator>,</operator> <expr><name>lr</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name><name>l</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>lr</name></expr><operator>,</operator> <expr><name><name>t</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>r</name></expr><operator>,</operator> <expr><name><name>r</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>dirs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>R</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>rlink</name></name></expr><operator>,</operator> <expr><name>lr</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name><name>l</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>lr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>links</name><index>[<expr><name>depth</name></expr>]</index></name></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>rlink</name></name></expr><operator>,</operator> <expr><name>t</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lr</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>llink</name></name></expr><operator>,</operator> <expr><name>rl</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name><name>l</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>lr</name></expr><operator>,</operator> <expr><name><name>t</name><operator>-&gt;</operator><name>rlink</name></name> <operator>=</operator> <name>r</name></expr><operator>,</operator> <expr><name><name>r</name><operator>-&gt;</operator><name>llink</name></name> <operator>=</operator> <name>rl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>balance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>dirs</name><index>[<expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>links</name><index>[<expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>llink</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>links</name><index>[<expr><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>rlink</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>trie</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trie</name><operator>-&gt;</operator><name>accepting</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>trie</name><operator>-&gt;</operator><name>accepting</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>kwset</name><operator>-&gt;</operator><name>words</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>kwset</name><operator>-&gt;</operator><name>words</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>trie</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trie</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>kwset</name><operator>-&gt;</operator><name>maxd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>maxd</name></name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>enqueue</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>enqueue</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>llink</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enqueue</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rlink</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>treefails</name> <parameter_list>(<parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tree</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trie</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>fail</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>recourse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>treefails</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>llink</name></name></expr></argument>, <argument><expr><name>fail</name></expr></argument>, <argument><expr><name>recourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>treefails</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rlink</name></name></expr></argument>, <argument><expr><name>fail</name></expr></argument>, <argument><expr><name>recourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><name>fail</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>link</name> <operator>=</operator> <name><name>fail</name><operator>-&gt;</operator><name>links</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>link</name> <operator>&amp;&amp;</operator> <name><name>tree</name><operator>-&gt;</operator><name>label</name></name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>label</name></name> <operator>&lt;</operator> <name><name>link</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>link</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>link</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>link</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <name><name>fail</name><operator>-&gt;</operator><name>fail</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <name>recourse</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>treedelta</name> <parameter_list>(<parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tree</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>unsigned</name> <name>int</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>delta</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>treedelta</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>llink</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>treedelta</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rlink</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <name><name>delta</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>label</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>delta</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>label</name></name></expr>]</index></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>hasevery</name> <parameter_list>(<parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tree</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tree</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasevery</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>llink</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasevery</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>rlink</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>label</name></name> <operator>!=</operator> <name><name>a</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>label</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
<return>return <expr><operator>!</operator><operator>!</operator><name>a</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>treenext</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name><name>next</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>treenext</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>llink</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>treenext</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rlink</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>label</name></name></expr>]</index></name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>kwsprep</name> <parameter_list>(<parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>kwset</name></name> <modifier>*</modifier></type><name>kwset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>trans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>delta</name><index>[<expr><name>NCHAR</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>kwset</name> <operator>=</operator> <operator>(</operator>struct <name>kwset</name> <operator>*</operator><operator>)</operator> <name>kws</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>&lt;</operator> <name>UCHAR_MAX</name></expr> ?</condition><then> <expr><name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr> </then><else>: <expr><name>UCHAR_MAX</name></expr></else></ternary></expr></argument>, <argument><expr><name>NCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>kwset</name><operator>-&gt;</operator><name>words</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trans</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <call><name>obstack_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kwset</name><operator>-&gt;</operator><name>obstack</name></name></expr></argument>, <argument><expr><name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kwset</name><operator>-&gt;</operator><name>target</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"memory exhausted"</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trie</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>target</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>links</name><operator>-&gt;</operator><name>label</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>links</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>delta</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>kwset</name><operator>-&gt;</operator><name>target</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>target</name><index>[<expr><name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kwset</name><operator>-&gt;</operator><name>target</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>mind2</name></name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>fail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>next</name><index>[<expr><name>NCHAR</name></expr>]</index></name></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name>last</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trie</name></name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>enqueue</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>links</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>maxshift</name></name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>treedelta</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>links</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>treefails</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>links</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fail</name></name></expr></argument>, <argument><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>fail</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>fail</name></name></expr>;</init> <condition><expr><name>fail</name></expr>;</condition> <incr><expr><name>fail</name> <operator>=</operator> <name><name>fail</name><operator>-&gt;</operator><name>fail</name></name></expr></incr>)</control>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasevery</name><argument_list>(<argument><expr><name><name>fail</name><operator>-&gt;</operator><name>links</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>links</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <name><name>fail</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <name><name>fail</name><operator>-&gt;</operator><name>shift</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fail</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <name><name>fail</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>accepting</name></name> <operator>&amp;&amp;</operator> <name><name>fail</name><operator>-&gt;</operator><name>maxshift</name></name> <operator>&gt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <name><name>fail</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fail</name><operator>-&gt;</operator><name>maxshift</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <name><name>fail</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>maxshift</name></name> <operator>&gt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>maxshift</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>maxshift</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>maxshift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>shift</name></name> <operator>&gt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>maxshift</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>maxshift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NCHAR</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>treenext</name><argument_list>(<argument><expr><name><name>kwset</name><operator>-&gt;</operator><name>trie</name><operator>-&gt;</operator><name>links</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>trans</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trans</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NCHAR</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>next</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>trans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name><name>kwset</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>NCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>trans</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trans</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NCHAR</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>kwset</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>delta</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>trans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>kwset</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>NCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>bmexec</name> <parameter_list>(<parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kwset</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>kwset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>gc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>md2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>kwset</name> <operator>=</operator> <operator>(</operator>struct <name>kwset</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>kws</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>memchr</name> <argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>kwset</name><operator>-&gt;</operator><name>target</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>tp</name></expr> ?</condition><then> <expr><name>tp</name> <operator>-</operator> <name>text</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>target</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>U</name><argument_list>(<argument><expr><name><name>sp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>md2</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>text</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">12</literal> <operator>*</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name>text</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">11</literal> <operator>*</operator> <name>len</name></expr>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<while>while <condition>(<expr><name>tp</name> <operator>&lt;=</operator> <name>ep</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr><operator>,</operator> <expr><name>tp</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<label><name>found</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>gc</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>U</name><argument_list>(<argument><expr><name><name>sp</name><index>[<expr><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tp</name> <operator>-</operator> <name>len</name> <operator>-</operator> <name>text</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tp</name> <operator>+=</operator> <name>md2</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>



<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>text</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>d</name> <operator>&lt;=</operator> <name>ep</name> <operator>-</operator> <name>tp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>d1</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><operator>(</operator><name>tp</name> <operator>+=</operator> <name>d</name><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>gc</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>U</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>U</name><argument_list>(<argument><expr><name><name>sp</name><index>[<expr><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tp</name> <operator>-</operator> <name>len</name> <operator>-</operator> <name>text</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>md2</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>cwexec</name> <parameter_list>(<parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kwsmatch</name></name> <modifier>*</modifier></type><name>kwsmatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kwset</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>kwset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>trie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>trie</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>accept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>beg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lim</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lmch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qlim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>tree</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>trans</name></decl>;</decl_stmt>

<expr_stmt><expr><name>accept</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>kwset</name> <operator>=</operator> <operator>(</operator>struct <name>kwset</name> <operator>*</operator><operator>)</operator> <name>kws</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>trans</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trans</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <name>text</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>mch</name> <operator>=</operator> <name>text</name></expr><operator>,</operator> <expr><name>accept</name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
<goto>goto <name>match</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qlim</name> <operator>=</operator> <name>lim</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qlim</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>lim</name> <operator>-</operator> <name>end</name> <operator>&gt;=</operator> <name>d</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qlim</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&lt;=</operator> <name>qlim</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <name><name>delta</name><index>[<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>end</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>end</name> <operator>&lt;</operator> <name>qlim</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name><name>delta</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name><name>delta</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>delta</name><index>[<expr><name>c</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>+=</operator> <name>d</name><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>trie</name> <operator>=</operator> <name><name>next</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trie</name><operator>-&gt;</operator><name>accepting</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mch</name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accept</name> <operator>=</operator> <name>trie</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>beg</name> <operator>&gt;</operator> <name>text</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name>trans</name></expr> ?</condition><then> <expr><name><name>trans</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>beg</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><operator>*</operator><operator>--</operator><name>beg</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>links</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tree</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name><name>tree</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>tree</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>trie</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trie</name><operator>-&gt;</operator><name>accepting</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mch</name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accept</name> <operator>=</operator> <name>trie</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>mch</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>match</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<label><name>match</name>:</label>



<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>-</operator> <name>mch</name> <operator>&gt;</operator> <name><name>kwset</name><operator>-&gt;</operator><name>maxd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <name>mch</name> <operator>+</operator> <name><name>kwset</name><operator>-&gt;</operator><name>maxd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lmch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lim</name> <operator>-</operator> <name>end</name> <operator>&gt;=</operator> <name>d</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <name><name>delta</name><index>[<expr><name>c</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>+=</operator> <name>d</name><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>trie</name> <operator>=</operator> <name><name>next</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trie</name><operator>-&gt;</operator><name>accepting</name></name> <operator>&amp;&amp;</operator> <name>beg</name> <operator>&lt;=</operator> <name>mch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lmch</name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accept</name> <operator>=</operator> <name>trie</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>beg</name> <operator>&gt;</operator> <name>text</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name>trans</name></expr> ?</condition><then> <expr><name><name>trans</name><index>[<expr><call><name>U</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>beg</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><operator>*</operator><operator>--</operator><name>beg</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>links</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tree</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name><name>tree</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>tree</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>llink</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>rlink</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>trie</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>trie</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trie</name><operator>-&gt;</operator><name>accepting</name></name> <operator>&amp;&amp;</operator> <name>beg</name> <operator>&lt;=</operator> <name>mch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lmch</name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accept</name> <operator>=</operator> <name>trie</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>trie</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>lmch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mch</name> <operator>=</operator> <name>lmch</name></expr>;</expr_stmt>
<goto>goto <name>match</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>kwsmatch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>kwsmatch</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>accept</name><operator>-&gt;</operator><name>accepting</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwsmatch</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mch</name> <operator>-</operator> <name>text</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwsmatch</name><operator>-&gt;</operator><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>accept</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>mch</name> <operator>-</operator> <name>text</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>size_t</name></type>
<name>kwsexec</name> <parameter_list>(<parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>kwsmatch</name></name> <modifier>*</modifier></type><name>kwsmatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kwset</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>kwset</name> <init>= <expr><operator>(</operator>struct <name>kwset</name> <operator>*</operator><operator>)</operator> <name>kws</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kwset</name><operator>-&gt;</operator><name>words</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>kwset</name><operator>-&gt;</operator><name>trans</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>bmexec</name> <argument_list>(<argument><expr><name>kws</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kwsmatch</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>kwsmatch</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwsmatch</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kwsmatch</name><operator>-&gt;</operator><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>kwset</name><operator>-&gt;</operator><name>mind</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>cwexec</name><argument_list>(<argument><expr><name>kws</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>kwsmatch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>kwsfree</name> <parameter_list>(<parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kwset</name></name> <modifier>*</modifier></type><name>kwset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>kwset</name> <operator>=</operator> <operator>(</operator>struct <name>kwset</name> <operator>*</operator><operator>)</operator> <name>kws</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>obstack_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kwset</name><operator>-&gt;</operator><name>obstack</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>kws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
