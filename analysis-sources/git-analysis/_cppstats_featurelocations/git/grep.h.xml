<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\grep.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GREP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREP_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPCRE1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcre.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PCRE_NO_UTF8_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCRE_NO_UTF8_CHECK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>pcre</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>pcre_extra</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPCRE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCRE2_CODE_UNIT_WIDTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcre2.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>pcre2_code</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>pcre2_match_data</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>pcre2_compile_context</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>

<struct_decl>struct <name>repository</name>;</struct_decl>

<enum>enum <name>grep_pat_token</name> <block>{
<decl><name>GREP_PATTERN</name></decl>,
<decl><name>GREP_PATTERN_HEAD</name></decl>,
<decl><name>GREP_PATTERN_BODY</name></decl>,
<decl><name>GREP_AND</name></decl>,
<decl><name>GREP_OPEN_PAREN</name></decl>,
<decl><name>GREP_CLOSE_PAREN</name></decl>,
<decl><name>GREP_NOT</name></decl>,
<decl><name>GREP_OR</name></decl>
}</block>;</enum>

<enum>enum <name>grep_context</name> <block>{
<decl><name>GREP_CONTEXT_HEAD</name></decl>,
<decl><name>GREP_CONTEXT_BODY</name></decl>
}</block>;</enum>

<enum>enum <name>grep_header_field</name> <block>{
<decl><name>GREP_HEADER_FIELD_MIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>GREP_HEADER_AUTHOR</name> <init>= <expr><name>GREP_HEADER_FIELD_MIN</name></expr></init></decl>,
<decl><name>GREP_HEADER_COMMITTER</name></decl>,
<decl><name>GREP_HEADER_REFLOG</name></decl>,


<decl><name>GREP_HEADER_FIELD_MAX</name></decl>
}</block>;</enum>

<enum>enum <name>grep_color</name> <block>{
<decl><name>GREP_COLOR_CONTEXT</name></decl>,
<decl><name>GREP_COLOR_FILENAME</name></decl>,
<decl><name>GREP_COLOR_FUNCTION</name></decl>,
<decl><name>GREP_COLOR_LINENO</name></decl>,
<decl><name>GREP_COLOR_COLUMNNO</name></decl>,
<decl><name>GREP_COLOR_MATCH_CONTEXT</name></decl>,
<decl><name>GREP_COLOR_MATCH_SELECTED</name></decl>,
<decl><name>GREP_COLOR_SELECTED</name></decl>,
<decl><name>GREP_COLOR_SEP</name></decl>,
<decl><name>NR_GREP_COLORS</name></decl>
}</block>;</enum>

<struct>struct <name>grep_pat</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grep_pat</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>grep_pat_token</name></name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>patternlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>grep_header_field</name></name></type> <name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre</name> <modifier>*</modifier></type><name>pcre1_regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre_extra</name> <modifier>*</modifier></type><name>pcre1_extra_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pcre1_tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcre1_jit_on</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_code</name> <modifier>*</modifier></type><name>pcre2_pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>pcre2_match_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>pcre2_compile_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pcre2_tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pcre2_jit_on</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>fixed</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>is_fixed</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ignore_case</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>word_regexp</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>grep_expr_node</name> <block>{
<decl><name>GREP_NODE_ATOM</name></decl>,
<decl><name>GREP_NODE_NOT</name></decl>,
<decl><name>GREP_NODE_AND</name></decl>,
<decl><name>GREP_NODE_TRUE</name></decl>,
<decl><name>GREP_NODE_OR</name></decl>
}</block>;</enum>

<enum>enum <name>grep_pattern_type</name> <block>{
<decl><name>GREP_PATTERN_TYPE_UNSPECIFIED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>GREP_PATTERN_TYPE_BRE</name></decl>,
<decl><name>GREP_PATTERN_TYPE_ERE</name></decl>,
<decl><name>GREP_PATTERN_TYPE_FIXED</name></decl>,
<decl><name>GREP_PATTERN_TYPE_PCRE</name></decl>
}</block>;</enum>

<struct>struct <name>grep_expr</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>grep_expr_node</name></name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hit</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grep_pat</name></name> <modifier>*</modifier></type><name>atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grep_expr</name></name> <modifier>*</modifier></type><name>unary</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grep_expr</name></name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grep_expr</name></name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
}</block> <decl><name>binary</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>grep_opt</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>grep_pat</name></name> <modifier>*</modifier></type><name>pattern_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grep_pat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pattern_tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grep_pat</name></name> <modifier>*</modifier></type><name>header_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grep_pat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>header_tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>grep_expr</name></name> <modifier>*</modifier></type><name>pattern_expression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columnnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_case</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unmatch_name_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>word_regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>all_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>debug</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREP_BINARY_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREP_BINARY_NOMATCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREP_BINARY_TEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>binary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allow_textconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extended</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_reflog_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcre1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcre2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>null_following_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>only_matching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>funcname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>funcbody</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extended_regexp_option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pattern_type_option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_locale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>colors</name><index>[<expr><name>NR_GREP_COLORS</name></expr>]</index><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pre_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>post_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>last_shown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_hunk_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>file_break</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>heading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>output</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>output_priv</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>init_grep_defaults</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grep_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grep_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grep_destroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grep_commit_pattern_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>grep_pattern_type</name></name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>append_grep_pat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>patlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>grep_pat_token</name></name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>append_grep_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>grep_pat_token</name></name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>append_header_grep_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>grep_header_field</name></name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>compile_grep_patterns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_grep_patterns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grep_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>grep_source</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<enum>enum <name>grep_source_type</name> <block>{
<decl><name>GREP_SOURCE_OID</name></decl>,
<decl><name>GREP_SOURCE_FILE</name></decl>,
<decl><name>GREP_SOURCE_BUF</name></decl>,
}</block> <decl><name>type</name></decl>;</enum>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>identifier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>grep_source_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_source</name></name> <modifier>*</modifier></type><name>gs</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>grep_source_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>identifier</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grep_source_clear_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_source</name></name> <modifier>*</modifier></type><name>gs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grep_source_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_source</name></name> <modifier>*</modifier></type><name>gs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>grep_source_load_driver</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_source</name></name> <modifier>*</modifier></type><name>gs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>grep_source</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>grep_source</name></name> <modifier>*</modifier></type><name>gs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>grep_opt_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>grep_threads_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>grep_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>grep_use_locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_mutex_t</name></type> <name>grep_attr_mutex</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
