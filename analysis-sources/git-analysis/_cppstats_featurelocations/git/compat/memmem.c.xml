<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\memmem.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../git-compat-util.h"</cpp:file></cpp:include>

<function><type><name>void</name> <modifier>*</modifier></type><name>gitmemmem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>haystack_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>needle_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><name>haystack</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_possible</name> <init>= <expr><name>begin</name> <operator>+</operator> <name>haystack_len</name> <operator>-</operator> <name>needle_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name>needle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>point</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>needle_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>begin</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>haystack_len</name> <operator>&lt;</operator> <name>needle_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>point</name> <operator>=</operator> <operator>*</operator><name>tail</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>begin</name> <operator>&lt;=</operator> <name>last_possible</name></expr>;</condition> <incr><expr><name>begin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>begin</name> <operator>==</operator> <name>point</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>begin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>needle_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>begin</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
