<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\basename.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../strbuf.h"</cpp:file></cpp:include>


<function><type><name>char</name> <modifier>*</modifier></type><name>gitbasename</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_dos_drive_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"."</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>base</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>path</name></expr>;</condition> <incr><expr><name>path</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>is_dir_sep</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>--</operator><name>path</name> <operator>!=</operator> <name>base</name> <operator>&amp;&amp;</operator> <call><name>is_dir_sep</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>base</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>gitdirname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>path</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slash</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dos_drive_prefix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"."</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dos_drive_prefix</name> <operator>=</operator> <call><name>skip_dos_drive_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>dot</name>;</goto></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>is_dir_sep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_dir_sep</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tentative</name> <init>= <expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><call><name>is_dir_sep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <name>tentative</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>dot</name>:</label>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.*s."</literal></expr></argument>, <argument><expr><name>dos_drive_prefix</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
