<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\win32mmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../git-compat-util.h"</cpp:file></cpp:include>

<function><type><name>void</name> <modifier>*</modifier></type><name>git_mmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>osfhandle</name></decl>, <decl><type ref="prev"/><name>hmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>o</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name> <init>= <expr><name>o</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>o</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>osfhandle</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileSizeEx</name><argument_list>(<argument><expr><name>osfhandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"mmap: could not determine filesize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;</operator> <name><name>len</name><operator>.</operator><name>QuadPart</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>xsize_t</name><argument_list>(<argument><expr><name><name>len</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MAP_PRIVATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Invalid usage of mmap when built with USE_WIN32_MMAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hmap</name> <operator>=</operator> <call><name>CreateFileMapping</name><argument_list>(<argument><expr><name>osfhandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>prot</name> <operator>==</operator> <name>PROT_READ</name></expr> ?</condition><then> <expr><name>PAGE_READONLY</name></expr> </then><else>: <expr><name>PAGE_WRITECOPY</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>MAP_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>MapViewOfFileEx</name><argument_list>(<argument><expr><name>hmap</name></expr></argument>, <argument><expr><ternary><condition><expr><name>prot</name> <operator>==</operator> <name>PROT_READ</name></expr> ?</condition><then>
<expr><name>FILE_MAP_READ</name></expr> </then><else>: <expr><name>FILE_MAP_COPY</name></expr></else></ternary></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hmap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"unable to close file mapping handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>temp</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_COMMITMENT_LIMIT</name></expr> ?</condition><then> <expr><name>EFBIG</name></expr> </then><else>: <expr><name>EINVAL</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>MAP_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_munmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
