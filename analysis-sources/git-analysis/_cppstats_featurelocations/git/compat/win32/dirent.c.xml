<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\win32\dirent.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../git-compat-util.h"</cpp:file></cpp:include>

<struct>struct <name>DIR</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name></type> <name>dd_dir</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>dd_handle</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dd_stat</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>finddata2dirent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>WIN32_FIND_DATAW</name> <modifier>*</modifier></type><name>fdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>xwcstoutf</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name><name>fdata</name><operator>-&gt;</operator><name>cFileName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fdata</name><operator>-&gt;</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>d_type</name></name> <operator>=</operator> <name>DT_DIR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>d_type</name></name> <operator>=</operator> <name>DT_REG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>DIR</name> <modifier>*</modifier></type><name>opendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>pattern</name><index>[<expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>fdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>err</name> <operator>==</operator> <name>ERROR_DIRECTORY</name><operator>)</operator></expr> ?</condition><then> <expr><name>ENOTDIR</name></expr> </then><else>: <expr><call><name>err_win_to_posix</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DIR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>dd_handle</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>dd_stat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finddata2dirent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dd_dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>readdir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt> 
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>dd_stat</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>fdata</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FindNextFileW</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dd_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdata</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>finddata2dirent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dd_dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>lasterr</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>lasterr</name> <operator>!=</operator> <name>ERROR_NO_MORE_FILES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><name>lasterr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>dir</name><operator>-&gt;</operator><name>dd_stat</name></name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dd_dir</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>closedir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dd_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
