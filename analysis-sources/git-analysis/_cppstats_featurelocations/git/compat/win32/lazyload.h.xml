<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\win32\lazyload.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LAZYLOAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAZYLOAD_H</name></cpp:macro></cpp:define>















<struct>struct <name>proc_addr</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name></type> <name>pfunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>initialized</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_PROC_ADDR</name><parameter_list>(<parameter><type><name>dll</name></type></parameter>, <parameter><type><name>rettype</name></type></parameter>, <parameter><type><name>function</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static struct proc_addr proc_addr_##function = { #dll, #function, NULL, 0 }; static rettype (WINAPI *function)(__VA_ARGS__)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_PROC_ADDR</name><parameter_list>(<parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(function = get_proc_addr(&amp;proc_addr_##function))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>get_proc_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_addr</name></name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hnd</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hnd</name> <operator>=</operator> <call><name>LoadLibraryExA</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>dll</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pfunction</name></name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>pfunction</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>pfunction</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
