<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\nedmalloc\nedmalloc.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nedmalloc.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPACES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONLY_MSPACES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_LOCKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOOTERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG</name></cpp:undef> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_GRANULARITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GRANULARITY</name></cpp:macro> <cpp:value>(1*1024*1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"malloc.c.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXTHREADSINPOOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXTHREADSINPOOL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THREADCACHEMAXCACHES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADCACHEMAXCACHES</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THREADCACHEMAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADCACHEMAX</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADCACHEMAXBINS</name></cpp:macro> <cpp:value>((13-4)*2)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADCACHEMAXBINS</name></cpp:macro> <cpp:value>(13-4)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THREADCACHEMAXFREESPACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADCACHEMAXFREESPACE</name></cpp:macro> <cpp:value>(512*1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSVAR</name></cpp:macro> <cpp:value>DWORD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSALLOC</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(k)=TlsAlloc(), TLS_OUT_OF_INDEXES==*(k))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSFREE</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!TlsFree(k))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSGET</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TlsGetValue(k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSSET</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!TlsSetValue(k, a))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>LPVOID</name></type> <name>ChkedTlsGetValue</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LPVOID</name></type> <name>ret</name><init>=<expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>S_OK</name><operator>==</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TLSGET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSGET</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ChkedTlsGetValue(k)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSVAR</name></cpp:macro> <cpp:value>pthread_key_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSALLOC</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_key_create(k, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSFREE</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_key_delete(k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSGET</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_getspecific(k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSSET</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_setspecific(k, a)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mspace_malloc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mspace_realloc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(m, s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mspace_calloc</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>calloc(n, s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mspace_free</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(m)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_NED_NAMESPACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>namespace</name></type> <name>nedalloc</name> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>nedblksize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

return THREADCACHEMAX;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>mem</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>mchunkptr</name></type> <name>p</name><init>=<expr><call><name>mem2chunk</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cinuse</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><call><name>cinuse</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>chunksize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>overhead_for</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>nedsetvalue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <expr_stmt><expr><call><name>nedpsetvalue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type> <name>nedmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpmalloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type> <name>nedcalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>no</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpcalloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>no</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type> <name>nedrealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedprealloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>nedfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <expr_stmt><expr><call><name>nedpfree</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type> <name>nedmemalign</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpmemalign</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>NO_MALLINFO</name></expr></cpp:if>
<function><type><name><name>struct</name> <name>mallinfo</name></name></type> <name>nedmallinfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpmallinfo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>nedmallopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>parno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpmallopt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>parno</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>nedmalloc_trim</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pad</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpmalloc_trim</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>nedmalloc_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <expr_stmt><expr><call><name>nedpmalloc_stats</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>size_t</name></type> <name>nedmalloc_footprint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpmalloc_footprint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedindependent_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>elemsno</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elemsize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpindependent_calloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>elemsno</name></expr></argument>, <argument><expr><name>elemsize</name></expr></argument>, <argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedindependent_comalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>elems</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sizes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks</name></decl></parameter>)</parameter_list> THROWSPEC <block>{<block_content> <return>return <expr><call><name>nedpindependent_comalloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<struct_decl>struct <name>threadcacheblk_t</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>threadcacheblk_t</name></name></type> <name>threadcacheblk</name>;</typedef>
<struct>struct <name>threadcacheblk_t</name>
<block>{ 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>magic</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lastUsed</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <name>threadcache_t</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>magic1</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>threadid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mallocs</name></decl>, <name>frees</name>, <name>successes</name>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>freeInCache</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier></type><name><name>bins</name><index>[<expr><operator>(</operator><name>THREADCACHEMAXBINS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>magic2</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>threadcache</name>;</typedef>
<struct>struct <name>nedpool_t</name>
<block>{
<decl_stmt><decl><type><name>MLOCK_T</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>uservalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>threads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name><name>caches</name><index>[<expr><name>THREADCACHEMAXCACHES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TLSVAR</name></type> <name>mycache</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mstate</name></type> <name><name>m</name><index>[<expr><name>MAXTHREADSINPOOL</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>nedpool</name></type> <name>syspool</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>FORCEINLINE</name> <name>unsigned</name> <name>int</name></type> <name>size2binidx</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>_size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>topbit</name></decl>, <decl><type ref="prev"/><name>size</name><init>=<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>_size</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>topbit</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>__CHAR_BIT__</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>__builtin_clz</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name><operator>&gt;=</operator><literal type="number">1300</literal></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bsrTopBit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_BitScanReverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsrTopBit</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>topbit</name> <operator>=</operator> <name>bsrTopBit</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
union {
unsigned asInt[2];
double asDouble;
};
int n;

asDouble = (double)size + 0.5;
topbit = (asInt[!FOX_BIGENDIAN] &gt;&gt; 20) - 1023;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name><init>=<expr><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>~</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>topbit</name><operator>=</operator><literal type="number">31</literal> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>topbit</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tcsanitycheck</name><parameter_list>(<parameter><decl><type><name>threadcacheblk</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>nedblksize</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>nedblksize</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <literal type="string">"NEDN"</literal><operator>==</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <literal type="string">"NEDN"</literal><operator>==</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tcfullsanitycheck</name><parameter_list>(<parameter><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier><modifier>*</modifier></type><name>tcbptr</name><init>=<expr><name><name>tc</name><operator>-&gt;</operator><name>bins</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;=</operator><name>THREADCACHEMAXBINS</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>tcbptr</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ob</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tcsanitycheck</name><argument_list>(<argument><expr><name>tcbptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>b</name><operator>=</operator><name><name>tcbptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>b</name></expr>;</condition> <incr><expr><name>ob</name><operator>=</operator><name>b</name></expr><operator>,</operator> <expr><name>b</name><operator>=</operator><name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <literal type="string">"NEDN"</literal><operator>==</operator><name><name>b</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>ob</name> <operator>||</operator> <name><name>ob</name><operator>-&gt;</operator><name>next</name></name><operator>==</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>ob</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>prev</name></name><operator>==</operator><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>NOINLINE</name> <name>void</name></type> <name>RemoveCacheEntries</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>age</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tcfullsanitycheck</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier><modifier>*</modifier></type><name>tcbptr</name><init>=<expr><name><name>tc</name><operator>-&gt;</operator><name>bins</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;=</operator><name>THREADCACHEMAXBINS</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>tcbptr</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier><modifier>*</modifier></type><name>tcb</name><init>=<expr><name>tcbptr</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>tcb</name> <operator>&amp;&amp;</operator> <name><name>tc</name><operator>-&gt;</operator><name>frees</name></name><operator>-</operator><name><operator>(</operator><operator>*</operator><name>tcb</name><operator>)</operator><operator>-&gt;</operator><name>lastUsed</name></name><operator>&gt;=</operator><name>age</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier></type><name>f</name><init>=<expr><operator>*</operator><name>tcb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blksize</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blksize</name><operator>&lt;=</operator><call><name>nedblksize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <literal type="string">"NEDN"</literal><operator>==</operator><name><operator>(</operator><operator>*</operator><name>tcb</name><operator>)</operator><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>tcb</name><operator>=</operator><name><operator>(</operator><operator>*</operator><name>tcb</name><operator>)</operator><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>tcb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tcb</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tcbptr</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name><operator>-=</operator><name>blksize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mspace_free</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tcfullsanitycheck</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyCaches</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>caches</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>THREADCACHEMAXCACHES</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tc</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>caches</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>frees</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RemoveCacheEntries</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>mymspace</name></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>threadid</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mspace_free</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>caches</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NOINLINE</name> <name>threadcache</name> <modifier>*</modifier></type><name>AllocCache</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACQUIRE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>THREADCACHEMAXCACHES</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>caches</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if<condition>(<expr><name>THREADCACHEMAXCACHES</name><operator>==</operator><name>n</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>RELEASE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tc</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>caches</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>threadcache</name> <operator>*</operator><operator>)</operator> <call><name>mspace_calloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>threadcache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RELEASE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>magic1</name></name><operator>=</operator><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><literal type="string">"NEDMALC1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>magic2</name></name><operator>=</operator><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><literal type="string">"NEDMALC2"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>threadid</name></name><operator>=</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>CURRENT_THREAD</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>end</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>end</name></expr>]</index></name></expr>;</condition> <incr><expr><name>end</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>mymspace</name></name><operator>=</operator><name><name>tc</name><operator>-&gt;</operator><name>threadid</name></name> <operator>%</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RELEASE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>TLSSET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>tc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>threadcache_malloc</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bestsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name><init>=<expr><call><name>size2binidx</name><argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blksize</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier></type><name>blk</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>binsptr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tcfullsanitycheck</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bestsize</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>idx</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

idx&lt;&lt;=1;
if(*size&gt;bestsize)
{
idx++;
bestsize+=bestsize&gt;&gt;1;
}
if(*size&gt;bestsize)
{
idx++;
bestsize=1&lt;&lt;(4+(idx&gt;&gt;1));
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>size</name><operator>&gt;</operator><name>bestsize</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bestsize</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bestsize</name><operator>&gt;=</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>size</name><operator>&lt;</operator><name>bestsize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>size</name><operator>=</operator><name>bestsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>size</name><operator>&lt;=</operator><name>THREADCACHEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name><operator>&lt;=</operator><name>THREADCACHEMAXBINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>binsptr</name><operator>=</operator><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>idx</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>blk</name><operator>=</operator><operator>*</operator><name>binsptr</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>blk</name> <operator>||</operator> <name><name>blk</name><operator>-&gt;</operator><name>size</name></name><operator>&lt;</operator><operator>*</operator><name>size</name></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name>idx</name><operator>&lt;</operator><name>THREADCACHEMAXBINS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>binsptr</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blk</name><operator>=</operator><operator>*</operator><name>binsptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>blk</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>blksize</name><operator>=</operator><name><name>blk</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>nedblksize</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><name>blksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blksize</name><operator>&gt;=</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>binsptr</name><operator>=</operator><name><name>blk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>binsptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>binsptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>magic</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>binsptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name>blk</name> <operator>&amp;&amp;</operator> <name><name>binsptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>nedblksize</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <call><name>nedblksize</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>THREADCACHEMAX</name><operator>+</operator><name>CHUNK_OVERHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>blk</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>tc</name><operator>-&gt;</operator><name>mallocs</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blksize</name><operator>&gt;=</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>tc</name><operator>-&gt;</operator><name>successes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name><operator>-=</operator><name>blksize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>mallocs</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** threadcache=%u, mallocs=%u (%f), free=%u (%f), freeInCache=%u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>tc</name><operator>-&gt;</operator><name>threadid</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>mallocs</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>tc</name><operator>-&gt;</operator><name>successes</name></name><operator>/</operator><name><name>tc</name><operator>-&gt;</operator><name>mallocs</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>frees</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>tc</name><operator>-&gt;</operator><name>successes</name></name><operator>/</operator><name><name>tc</name><operator>-&gt;</operator><name>frees</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tcfullsanitycheck</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>NOINLINE</name> <name>void</name></type> <name>ReleaseFreeInCache</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mymspace</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>age</name><init>=<expr><name>THREADCACHEMAXFREESPACE</name><operator>/</operator><literal type="number">8192</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>age</name> <operator>&amp;&amp;</operator> <name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name><operator>&gt;=</operator><name>THREADCACHEMAXFREESPACE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>RemoveCacheEntries</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>age</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>threadcache_free</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mymspace</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bestsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name><init>=<expr><call><name>size2binidx</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcacheblk</name> <modifier>*</modifier><modifier>*</modifier></type><name>binsptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tck</name><init>=<expr><operator>(</operator><name>threadcacheblk</name> <operator>*</operator><operator>)</operator> <name>mem</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>size</name><operator>&lt;=</operator><name>THREADCACHEMAX</name><operator>+</operator><name>CHUNK_OVERHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> 
<decl_stmt><decl><type><name>mchunkptr</name></type> <name>p</name> <init>= <expr><call><name>mem2chunk</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstate</name></type> <name>fm</name> <init>= <expr><call><name>get_mstate_for</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ok_magic</name><argument_list>(<argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>USAGE_ERROR_ACTION</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tcfullsanitycheck</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bestsize</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>idx</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

idx&lt;&lt;=1;
if(size&gt;bestsize)
{
unsigned int biggerbestsize=bestsize+bestsize&lt;&lt;1;
if(size&gt;=biggerbestsize)
{
idx++;
bestsize=biggerbestsize;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>bestsize</name><operator>!=</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>size</name><operator>=</operator><name>bestsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>binsptr</name><operator>=</operator><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>idx</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name><operator>&lt;=</operator><name>THREADCACHEMAXBINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tck</name><operator>==</operator><operator>*</operator><name>binsptr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Attempt to free already freed memory block %p - aborting!\n"</literal></expr></argument>, <argument><expr><name>tck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tck</name><operator>-&gt;</operator><name>magic</name></name><operator>=</operator><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <literal type="string">"NEDN"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tck</name><operator>-&gt;</operator><name>lastUsed</name></name><operator>=</operator><operator>++</operator><name><name>tc</name><operator>-&gt;</operator><name>frees</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tck</name><operator>-&gt;</operator><name>size</name></name><operator>=</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tck</name><operator>-&gt;</operator><name>next</name></name><operator>=</operator><operator>*</operator><name>binsptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tck</name><operator>-&gt;</operator><name>prev</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tck</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tck</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name><operator>=</operator><name>tck</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>binsptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>tck</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>binsptr</name> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name>binsptr</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name><operator>==</operator><name><name>tck</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>binsptr</name><operator>=</operator><name>tck</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tck</name><operator>==</operator><name><name>tc</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>idx</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>idx</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>tck</name> <operator>||</operator> <name><name>binsptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>prev</name></name><operator>==</operator><name>tck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name><operator>+=</operator><name>size</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>tcfullsanitycheck</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name><operator>&gt;=</operator><name>THREADCACHEMAXFREESPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseFreeInCache</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>NOINLINE</name> <name>int</name></type> <name>InitPool</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threads</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content> 
<expr_stmt><expr><call><name>ensure_initialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACQUIRE_MALLOC_GLOBAL_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>INITIAL_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>TLSALLOC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name>mstate</name><operator>)</operator> <call><name>create_mspace</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>extp</name><operator>=</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>threads</name></name><operator>=</operator><ternary><condition><expr><operator>(</operator><name><name>threads</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal> <operator>||</operator> <name>threads</name></expr></argument>&gt;</argument_list></name><name>MAXTHREADSINPOOL</name><operator>)</operator></expr> ?</condition><then> <expr><name>MAXTHREADSINPOOL</name></expr> </then><else>: <expr><name>threads</name></expr></else></ternary></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>RELEASE_MALLOC_GLOBAL_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<label><name>err</name>:</label>
<if_stmt><if>if<condition>(<expr><name>threads</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>DestroyCaches</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>destroy_mspace</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>TLSFREE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RELEASE_MALLOC_GLOBAL_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>NOINLINE</name> <name>mstate</name></type> <name>FindMSpace</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lastUsed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content> 



<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><name>end</name><operator>=</operator><operator>*</operator><name>lastUsed</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>end</name><operator>=</operator><operator>++</operator><name>n</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>TRY_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><operator>*</operator><name>lastUsed</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>TRY_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>end</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>mstate</name></type> <name>temp</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>temp</name><operator>=</operator><operator>(</operator><name>mstate</name><operator>)</operator> <call><name>create_mspace</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badexit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ACQUIRE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>end</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>end</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if<condition>(<expr><name>end</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>RELEASE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_mspace</name><argument_list>(<argument><expr><operator>(</operator><name>mspace</name><operator>)</operator> <name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>badexit</name>;</goto>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>malloc_state</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>_m</name><init>=<expr><operator>(</operator><specifier>volatile</specifier> struct <name>malloc_state</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>end</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>_m</name><operator>=</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>end</name></expr>]</index></name><operator>=</operator><name>temp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ACQUIRE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>end</name></expr>]</index></name><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RELEASE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>=</operator><name>end</name></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>badexit</name>:</label>
<expr_stmt><expr><call><name>ACQUIRE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><operator>*</operator><name>lastUsed</name></expr>]</index></name><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><operator>*</operator><name>lastUsed</name></expr>]</index></name></expr>;</return>
<label><name>found</name>:</label>
<expr_stmt><expr><operator>*</operator><name>lastUsed</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>mymspace</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>TLSSET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>nedpool</name> <modifier>*</modifier></type><name>nedcreatepool</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threads</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name><operator>=</operator><operator>(</operator><name>nedpool</name> <operator>*</operator><operator>)</operator> <call><name>nedpcalloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nedpool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>InitPool</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>nedpfree</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>neddestroypool</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ACQUIRE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyCaches</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>destroy_mspace</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>RELEASE_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>TLSFREE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>nedpfree</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>nedpsetvalue</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name>syspool</name></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>syspool</name><operator>.</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>InitPool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syspool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>uservalue</name></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>nedgetvalue</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>np</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mchunkptr</name></type> <name>mcp</name><init>=<expr><call><name>mem2chunk</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mstate</name></type> <name>fm</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>is_aligned</name><argument_list>(<argument><expr><call><name>chunk2mem</name><argument_list>(<argument><expr><name>mcp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>mcp</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>FENCEPOST_HEAD</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>cinuse</name><argument_list>(<argument><expr><name>mcp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>next_pinuse</name><argument_list>(<argument><expr><name>mcp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_mmapped</name><argument_list>(<argument><expr><name>mcp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pinuse</name><argument_list>(<argument><expr><name>mcp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>next_chunk</name><argument_list>(<argument><expr><call><name>prev_chunk</name><argument_list>(<argument><expr><name>mcp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>!=</operator><name>mcp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fm</name><operator>=</operator><call><name>get_mstate_for</name><argument_list>(<argument><expr><name>mcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ok_magic</name><argument_list>(<argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ok_address</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>mcp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>fm</name><operator>-&gt;</operator><name>extp</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>np</name><operator>=</operator><operator>(</operator><name>nedpool</name> <operator>*</operator><operator>)</operator> <name><name>fm</name><operator>-&gt;</operator><name>extp</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>=</operator><name>np</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>np</name><operator>-&gt;</operator><name>uservalue</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>neddisablethreadcache</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mycache</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name>syspool</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>syspool</name><operator>.</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>InitPool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syspool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mycache</name><operator>=</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>TLSGET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mycache</name></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if<condition>(<expr><call><name>TLSSET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>mycache</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name><init>=<expr><name><name>p</name><operator>-&gt;</operator><name>caches</name><index>[<expr><name>mycache</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Threadcache utilisation: %lf%% in cache with %lf%% lost to other threads\n"</literal></expr></argument>,
<argument><expr><literal type="number">100.0</literal><operator>*</operator><name><name>tc</name><operator>-&gt;</operator><name>successes</name></name><operator>/</operator><name><name>tc</name><operator>-&gt;</operator><name>mallocs</name></name></expr></argument>, <argument><expr><literal type="number">100.0</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>tc</name><operator>-&gt;</operator><name>mallocs</name></name><operator>-</operator><name><name>tc</name><operator>-&gt;</operator><name>frees</name></name><operator>)</operator><operator>/</operator><name><name>tc</name><operator>-&gt;</operator><name>mallocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><call><name>TLSSET</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mycache</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>-</operator><name><name>tc</name><operator>-&gt;</operator><name>mymspace</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>frees</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RemoveCacheEntries</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>tc</name><operator>-&gt;</operator><name>freeInCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>mymspace</name></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>threadid</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mspace_free</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>caches</name><index>[<expr><name>mycache</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>caches</name><index>[<expr><name>mycache</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETMSPACE</name><parameter_list>(<parameter><type><name>m</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>tc</name></type></parameter>,<parameter><type><name>ms</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>action</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mstate m = GetMSpace((p),(tc),(ms),(s)); action; RELEASE_LOCK(&amp;m-&gt;mutex); } while (0)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>FORCEINLINE</name> <name>mstate</name></type> <name>GetMSpace</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mymspace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content> 
<decl_stmt><decl><type><name>mstate</name></type> <name>m</name><init>=<expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>mymspace</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>TRY_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>mymspace</name></expr>]</index></name><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name><operator>=</operator><call><name>FindMSpace</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>\

<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCEINLINE</name> <name>void</name></type> <name>GetThreadCache</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>threadcache</name> <modifier>*</modifier><modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mymspace</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mycache</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>size</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>size</name><operator>=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>=</operator><operator>&amp;</operator><name>syspool</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>syspool</name><operator>.</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>InitPool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syspool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mycache</name><operator>=</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>TLSGET</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>mycache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>mycache</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tc</name><operator>=</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>caches</name></name><index>[<expr><name>mycache</name><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mymspace</name><operator>=</operator><name><operator>(</operator><operator>*</operator><name>tc</name><operator>)</operator><operator>-&gt;</operator><name>mymspace</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>mycache</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tc</name><operator>=</operator><call><name>AllocCache</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>tc</name></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if<condition>(<expr><call><name>TLSSET</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>mycache</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mymspace</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mymspace</name><operator>=</operator><name><operator>(</operator><operator>*</operator><name>tc</name><operator>)</operator><operator>-&gt;</operator><name>mymspace</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tc</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mymspace</name><operator>=</operator><operator>-</operator><name>mycache</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>mymspace</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>CURRENT_THREAD</name><operator>==</operator><name><operator>(</operator><operator>*</operator><name>tc</name><operator>)</operator><operator>-&gt;</operator><name>threadid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FULLSANITYCHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>tc</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><literal type="string">"NEDMALC1"</literal><operator>!=</operator><name><operator>(</operator><operator>*</operator><name>tc</name><operator>)</operator><operator>-&gt;</operator><name>magic1</name></name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><literal type="string">"NEDMALC2"</literal><operator>!=</operator><name><operator>(</operator><operator>*</operator><name>tc</name><operator>)</operator><operator>-&gt;</operator><name>magic2</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>nedpmalloc</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetThreadCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADCACHEMAX</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>tc</name> <operator>&amp;&amp;</operator> <name>size</name><operator>&lt;=</operator><name>THREADCACHEMAX</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name>ret</name><operator>=</operator><call><name>threadcache_malloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>GETMSPACE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>ret</name><operator>=</operator><call><name>mspace_malloc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type> <name>nedpcalloc</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>no</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rsize</name><init>=<expr><name>size</name><operator>*</operator><name>no</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetThreadCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADCACHEMAX</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>tc</name> <operator>&amp;&amp;</operator> <name>rsize</name><operator>&lt;=</operator><name>THREADCACHEMAX</name></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>threadcache_malloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>GETMSPACE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>,
<argument><expr><name>ret</name><operator>=</operator><call><name>mspace_calloc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type> <name>nedprealloc</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mem</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>nedpmalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GetThreadCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADCACHEMAX</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>tc</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>size</name><operator>&lt;=</operator><name>THREADCACHEMAX</name></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>size_t</name></type> <name>memsize</name><init>=<expr><call><name>nedblksize</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>threadcache_malloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><ternary><condition><expr><name>memsize</name><operator>&lt;</operator><name>size</name></expr> ?</condition><then> <expr><name>memsize</name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>memsize</name><operator>&lt;=</operator><name>THREADCACHEMAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>threadcache_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mspace_free</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
<block>{<block_content> 

<expr_stmt><expr><name>ret</name><operator>=</operator><call><name>mspace_realloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>nedpfree</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content> 

<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>memsize</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetThreadCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADCACHEMAX</name></expr></cpp:if>
<expr_stmt><expr><name>memsize</name><operator>=</operator><call><name>nedblksize</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>mem</name> <operator>&amp;&amp;</operator> <name>tc</name> <operator>&amp;&amp;</operator> <name>memsize</name><operator>&lt;=</operator><operator>(</operator><name>THREADCACHEMAX</name><operator>+</operator><name>CHUNK_OVERHEAD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>threadcache_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>mspace_free</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type> <name>nedpmemalign</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetThreadCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content> 
<expr_stmt><expr><call><name>GETMSPACE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>,
<argument><expr><name>ret</name><operator>=</operator><call><name>mspace_memalign</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>NO_MALLINFO</name></expr></cpp:if>
<function><type><name><name>struct</name> <name>mallinfo</name></name></type> <name>nedpmallinfo</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mallinfo</name></name></type> <name>ret</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name>syspool</name></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>syspool</name><operator>.</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>InitPool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syspool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mallinfo</name></name></type> <name>t</name><init>=<expr><call><name>mspace_mallinfo</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>arena</name></name><operator>+=</operator><name><name>t</name><operator>.</operator><name>arena</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>ordblks</name></name><operator>+=</operator><name><name>t</name><operator>.</operator><name>ordblks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>hblkhd</name></name><operator>+=</operator><name><name>t</name><operator>.</operator><name>hblkhd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>usmblks</name></name><operator>+=</operator><name><name>t</name><operator>.</operator><name>usmblks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>uordblks</name></name><operator>+=</operator><name><name>t</name><operator>.</operator><name>uordblks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>fordblks</name></name><operator>+=</operator><name><name>t</name><operator>.</operator><name>fordblks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>keepcost</name></name><operator>+=</operator><name><name>t</name><operator>.</operator><name>keepcost</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>nedpmallopt</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<return>return <expr><call><name>mspace_mallopt</name><argument_list>(<argument><expr><name>parno</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>nedpmalloc_trim</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pad</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name>syspool</name></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>syspool</name><operator>.</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>InitPool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syspool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>mspace_trim</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>nedpmalloc_stats</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name>syspool</name></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>syspool</name><operator>.</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>InitPool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syspool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>mspace_malloc_stats</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>size_t</name></type> <name>nedpmalloc_footprint</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name>syspool</name></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>syspool</name><operator>.</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>InitPool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syspool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>mspace_footprint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedpindependent_calloc</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elemsno</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elemsize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetThreadCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GETMSPACE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>, <argument><expr><name>elemsno</name><operator>*</operator><name>elemsize</name></expr></argument>,
<argument><expr><name>ret</name><operator>=</operator><call><name>mspace_independent_calloc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>elemsno</name></expr></argument>, <argument><expr><name>elemsize</name></expr></argument>, <argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedpindependent_comalloc</name><parameter_list>(<parameter><decl><type><name>nedpool</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elems</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sizes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks</name></decl></parameter>)</parameter_list> THROWSPEC
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>threadcache</name> <modifier>*</modifier></type><name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mymspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>adjustedsizes</name><init>=<expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>elems</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>adjustedsizes</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>elems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>adjustedsizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><ternary><condition><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>threadcacheblk</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>GetThreadCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mymspace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GETMSPACE</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>mymspace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ret</name><operator>=</operator><call><name>mspace_independent_comalloc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>elems</name></expr></argument>, <argument><expr><name>adjustedsizes</name></expr></argument>, <argument><expr><name>chunks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern></block_content></block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
