<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\win32.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_H</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GIT_WINDOWS_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>file_attr_to_st_mode</name> <parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fMode</name> <init>= <expr><name>S_IREAD</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fMode</name> <operator>|=</operator> <name>S_IFDIR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fMode</name> <operator>|=</operator> <name>S_IFREG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fMode</name> <operator>|=</operator> <name>S_IWRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>fMode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_file_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>WIN32_FILE_ATTRIBUTE_DATA</name> <modifier>*</modifier></type><name>fdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetFileAttributesExA</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>GetFileExInfoStandard</name></expr></argument>, <argument><expr><name>fdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ERROR_ACCESS_DENIED</name></expr>:</case>
<case>case <expr><name>ERROR_SHARING_VIOLATION</name></expr>:</case>
<case>case <expr><name>ERROR_LOCK_VIOLATION</name></expr>:</case>
<case>case <expr><name>ERROR_SHARING_BUFFER_EXCEEDED</name></expr>:</case>
<return>return <expr><name>EACCES</name></expr>;</return>
<case>case <expr><name>ERROR_BUFFER_OVERFLOW</name></expr>:</case>
<return>return <expr><name>ENAMETOOLONG</name></expr>;</return>
<case>case <expr><name>ERROR_NOT_ENOUGH_MEMORY</name></expr>:</case>
<return>return <expr><name>ENOMEM</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>ENOENT</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
