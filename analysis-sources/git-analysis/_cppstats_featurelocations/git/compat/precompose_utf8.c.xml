<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\precompose_utf8.c">




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRECOMPOSE_UNICODE_C</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"precompose_utf8.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>char</name> <modifier>*</modifier></type><name>iconv_ibp</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>repo_encoding</name> <init>= <expr><literal type="string">"UTF-8"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_encoding</name> <init>= <expr><literal type="string">"UTF-8-MAC"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>has_non_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>strlen_c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>strlen_chars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strlen_chars</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>maxlen</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>strlen_c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>strlen_c</name> <operator>=</operator> <name>strlen_chars</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>probe_utf8_pathname_composition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auml_nfc</name> <init>= <expr><literal type="string">"\xc3\xa4"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auml_nfd</name> <init>= <expr><literal type="string">"\x61\xcc\x88"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_fd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>precomposed_unicode</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>git_path_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>auml_nfc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>output_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_path_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>auml_nfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>precomposed_unicode</name> <operator>=</operator> <ternary><condition><expr><call><name>access</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_set</name><argument_list>(<argument><expr><literal type="string">"core.precomposeunicode"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>precomposed_unicode</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_path_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>auml_nfc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to unlink '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>precompose_argv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>ic_precompose</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>precomposed_unicode</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ic_precompose</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>repo_encoding</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ic_precompose</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>oldarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>has_non_ascii</name><argument_list>(<argument><expr><name>oldarg</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newarg</name> <operator>=</operator> <call><name>reencode_string_iconv</name><argument_list>(<argument><expr><name>oldarg</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>ic_precompose</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newarg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>newarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>ic_precompose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>PREC_DIR</name> <modifier>*</modifier></type><name>precompose_utf8_opendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PREC_DIR</name> <modifier>*</modifier></type><name>prec_dir</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PREC_DIR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dirent_prec_psx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>max_name_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirp</name></name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prec_dir</name><operator>-&gt;</operator><name>dirp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prec_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>ic_precompose</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>repo_encoding</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ret_errno</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>prec_dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dirent_prec_psx</name></name> <modifier>*</modifier></type><name>precompose_utf8_readdir</name><parameter_list>(<parameter><decl><type><name>PREC_DIR</name> <modifier>*</modifier></type><name>prec_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelenz</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>new_maxlen</name> <init>= <expr><name>namelenz</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_maxlen</name> <operator>&gt;</operator> <name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>max_name_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>dirent_prec_psx</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>new_maxlen</name> <operator>-</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name></name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>max_name_len</name></name> <operator>=</operator> <name>new_maxlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>d_ino</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>d_ino</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>d_type</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>d_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>precomposed_unicode</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>has_non_ascii</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>prec_dir</name><operator>-&gt;</operator><name>ic_precompose</name></name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"iconv_open(%s,%s) failed, but needed:\n"</literal>
<literal type="string">" precomposed unicode is not supported.\n"</literal>
<literal type="string">" If you want to use decomposed unicode, run\n"</literal>
<literal type="string">" \"git config core.precomposeunicode false\"\n"</literal></expr></argument>,
<argument><expr><name>repo_encoding</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>iconv_ibp</name></type> <name>cp</name> <init>= <expr><operator>(</operator><name>iconv_ibp</name><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>d_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>inleft</name> <init>= <expr><name>namelenz</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outpos</name> <init>= <expr><operator>&amp;</operator><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outsz</name> <init>= <expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>max_name_len</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iconv</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>ic_precompose</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inleft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name>inleft</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>namelenz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>namelenz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>namelenz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>,
<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name><operator>-&gt;</operator><name>max_name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ret_errno</name></expr>;</expr_stmt>
<return>return <expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>precompose_utf8_closedir</name><parameter_list>(<parameter><decl><type><name>PREC_DIR</name> <modifier>*</modifier></type><name>prec_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret_errno</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret_value</name> <operator>=</operator> <call><name>closedir</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prec_dir</name><operator>-&gt;</operator><name>ic_precompose</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>ic_precompose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>prec_dir</name><operator>-&gt;</operator><name>dirent_nfc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prec_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ret_errno</name></expr>;</expr_stmt>
<return>return <expr><name>ret_value</name></expr>;</return>
</block_content>}</block></function>
</unit>
