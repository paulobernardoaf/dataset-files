<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\compat\mingw.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>_sigset_t</name></type> <name>sigset_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREAD_SAFE_FUNCTIONS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>mingw_core_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_core_config</name></cpp:macro> <cpp:value>mingw_core_config</cpp:value></cpp:define>





<typedef>typedef <type><name>int</name></type> <name>uid_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>pid_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hstrerror</name></cpp:macro> <cpp:value>strerror</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFLNK</name></cpp:macro> <cpp:value>0120000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISLNK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; S_IFMT) == S_IFLNK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISSOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IRWXG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IRGRP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IWGRP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IXGRP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IRWXG</name></cpp:macro> <cpp:value>(S_IRGRP | S_IWGRP | S_IXGRP)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IRWXO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IROTH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IWOTH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IXOTH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IRWXO</name></cpp:macro> <cpp:value>(S_IROTH | S_IWOTH | S_IXOTH)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISUID</name></cpp:macro> <cpp:value>0004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISGID</name></cpp:macro> <cpp:value>0002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISVTX</name></cpp:macro> <cpp:value>0001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIFEXITED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIFSIGNALED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEXITSTATUS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0xff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WTERMSIG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SIGTERM</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWOULDBLOCK</name></cpp:macro> <cpp:value>EAGAIN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ELOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELOOP</name></cpp:macro> <cpp:value>EMLINK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUT_WR</name></cpp:macro> <cpp:value>SD_SEND</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGHUP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGQUIT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGKILL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGPIPE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGALRM</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGCHLD</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_GETFD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_SETFD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CLOEXEC</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>O_CLOEXEC</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>O_NOINHERIT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>O_NOINHERIT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAFNOSUPPORT</name></cpp:macro> <cpp:value>WSAEAFNOSUPPORT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ECONNABORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNABORTED</name></cpp:macro> <cpp:value>WSAECONNABORTED</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENOTSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTSOCK</name></cpp:macro> <cpp:value>WSAENOTSOCK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>passwd</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_gecos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pw_dir</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>__cdecl</name> <modifier>*</modifier><name>sig_handler_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>sigaction</name> <block>{
<decl_stmt><decl><type><name>sig_handler_t</name></type> <name>sa_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sa_flags</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_RESTART</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<struct>struct <name>itimerval</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>it_value</name></decl>, <decl><type ref="prev"/><name>it_interval</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITIMER_REAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<struct>struct <name>utsname</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sysname</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nodename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>release</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>version</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>machine</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HELP_COMMAND</name></cpp:undef> 





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>readlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsiz</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>symlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>fchmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fildes</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>pid_t</name></type> <name>fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>alarm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>fsync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>_commit</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content/>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uid_t</name></type> <name>getuid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>getpwnam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>fcntl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>F_GETFD</name> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>F_SETFD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigemptyset</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sigaddset</name><parameter_list>(<parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_BLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_UNBLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sigprocmask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>oldset</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>pid_t</name></type> <name>getppid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>pid_t</name></type> <name>getpgid</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><ternary><condition><expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>pid</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>pid_t</name></type> <name>tcgetpgrp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>





<function_decl><type><name>int</name></type> <name>mingw_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkdir</name></cpp:macro> <cpp:value>mingw_mkdir</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WNOHANG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function_decl><type><name>pid_t</name></type> <name>waitpid</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kill</name></cpp:macro> <cpp:value>mingw_kill</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>mingw_kill</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mingw_SSL_set_fd</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_set_fd</name></cpp:macro> <cpp:value>mingw_SSL_set_fd</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mingw_SSL_set_rfd</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>SSL_set_rfd</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_set_rfd</name></cpp:macro> <cpp:value>mingw_SSL_set_rfd</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mingw_SSL_set_wfd</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>SSL_set_wfd</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_set_wfd</name></cpp:macro> <cpp:value>mingw_SSL_set_wfd</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><name>int</name></type> <name>pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>filedes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>sleep</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mkstemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>gmtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>localtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>int</name></type> <name>getpagesize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>getpwuid</name><parameter_list>(<parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>setitimer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sigaction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>link</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>utsname</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>mingw_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlink</name></cpp:macro> <cpp:value>mingw_unlink</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmdir</name></cpp:macro> <cpp:value>mingw_rmdir</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_open</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name></cpp:macro> <cpp:value>mingw_open</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_fgetc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fgetc</name></cpp:macro> <cpp:value>mingw_fgetc</cpp:value></cpp:define>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>mingw_fopen</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>otype</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fopen</name></cpp:macro> <cpp:value>mingw_fopen</cpp:value></cpp:define>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>mingw_freopen</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>otype</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freopen</name></cpp:macro> <cpp:value>mingw_freopen</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_fflush</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fflush</name></cpp:macro> <cpp:value>mingw_fflush</cpp:value></cpp:define>

<function_decl><type><name>ssize_t</name></type> <name>mingw_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name></cpp:macro> <cpp:value>mingw_write</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_access</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>access</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>access</name></cpp:macro> <cpp:value>mingw_access</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chdir</name></cpp:macro> <cpp:value>mingw_chdir</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_chmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chmod</name></cpp:macro> <cpp:value>mingw_chmod</cpp:value></cpp:define>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>mingw_mktemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mktemp</name></cpp:macro> <cpp:value>mingw_mktemp</cpp:value></cpp:define>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>mingw_getcwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getcwd</name></cpp:macro> <cpp:value>mingw_getcwd</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_UNSETENV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"NO_UNSETENV is incompatible with the Windows-specific startup code!"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getenv</name></cpp:macro> <cpp:value>mingw_getenv</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>putenv</name></cpp:macro> <cpp:value>mingw_putenv</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unsetenv</name></cpp:macro> <cpp:value>mingw_putenv</cpp:value></cpp:define>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>mingw_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mingw_putenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>mingw_gethostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gethostname</name></cpp:macro> <cpp:value>mingw_gethostname</cpp:value></cpp:define>

<function_decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>mingw_gethostbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gethostbyname</name></cpp:macro> <cpp:value>mingw_gethostbyname</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name></cpp:macro> <cpp:value>mingw_getaddrinfo</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socket</name></cpp:macro> <cpp:value>mingw_socket</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>connect</name></cpp:macro> <cpp:value>mingw_connect</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bind</name></cpp:macro> <cpp:value>mingw_bind</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_setsockopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optlen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setsockopt</name></cpp:macro> <cpp:value>mingw_setsockopt</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shutdown</name></cpp:macro> <cpp:value>mingw_shutdown</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>listen</name></cpp:macro> <cpp:value>mingw_listen</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_accept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accept</name></cpp:macro> <cpp:value>mingw_accept</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rename</name></cpp:macro> <cpp:value>mingw_rename</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_MMAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>mingw_getpagesize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpagesize</name></cpp:macro> <cpp:value>mingw_getpagesize</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>rlimit</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rlim_cur</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLIMIT_NOFILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>getrlimit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resource</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rlimit</name></name> <modifier>*</modifier></type><name>rlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>resource</name> <operator>!=</operator> <name>RLIMIT_NOFILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rlp</name><operator>-&gt;</operator><name>rlim_cur</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>off_t</name></cpp:macro> <cpp:value>off64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lseek</name></cpp:macro> <cpp:value>_lseeki64</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>timespec</name> <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>tv_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>tv_nsec</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>mingw_stat</name> <block>{
<decl_stmt><decl><type><name>_dev_t</name></type> <name>st_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_ino_t</name></type> <name>st_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_mode_t</name></type> <name>st_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>st_nlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>st_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>st_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_dev_t</name></type> <name>st_rdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off64_t</name></type> <name>st_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>st_atim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>st_mtim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>st_ctim</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_atime</name></cpp:macro> <cpp:value>st_atim.tv_sec</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_mtime</name></cpp:macro> <cpp:value>st_mtim.tv_sec</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_ctime</name></cpp:macro> <cpp:value>st_ctim.tv_sec</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>stat</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stat</name></cpp:macro> <cpp:value>mingw_stat</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>mingw_lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mingw_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mingw_fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>fstat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fstat</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fstat</name></cpp:macro> <cpp:value>mingw_fstat</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>lstat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lstat</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstat</name></cpp:macro> <cpp:value>mingw_lstat</cpp:value></cpp:define>


<function_decl><type><name>int</name></type> <name>mingw_utime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>utimbuf</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utime</name></cpp:macro> <cpp:value>mingw_utime</cpp:value></cpp:define>
<function_decl><type><name>size_t</name></type> <name>mingw_strftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strftime</name></cpp:macro> <cpp:value>mingw_strftime</cpp:value></cpp:define>

<function_decl><type><name>pid_t</name></type> <name>mingw_spawnvpe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fhin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fhout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fherr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mingw_execvp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>execvp</name></cpp:macro> <cpp:value>mingw_execvp</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>mingw_execv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>execv</name></cpp:macro> <cpp:value>mingw_execv</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>git_ntohl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntohl</name></cpp:macro> <cpp:value>git_ntohl</cpp:value></cpp:define>

<function_decl><type><name>sig_handler_t</name></type> <name>mingw_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>sig_handler_t</name></type> <name>handler</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signal</name></cpp:macro> <cpp:value>mingw_signal</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>mingw_raise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>raise</name></cpp:macro> <cpp:value>mingw_raise</cpp:value></cpp:define>





<function_decl><type><name>int</name></type> <name>winansi_isatty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isatty</name></cpp:macro> <cpp:value>winansi_isatty</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>winansi_dup2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oldfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newfd</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dup2</name></cpp:macro> <cpp:value>winansi_dup2</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>winansi_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HANDLE</name></type> <name>winansi_get_osfhandle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>convert_slashes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>path</name></expr>;</condition> <incr><expr><name>path</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP</name></cpp:macro> <cpp:value>';'</cpp:value></cpp:define>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>mingw_query_user_email</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>query_user_email</name></cpp:macro> <cpp:value>mingw_query_user_email</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1800</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuMAX</name></cpp:macro> <cpp:value>"I64u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRId64</name></cpp:macro> <cpp:value>"I64d"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



















<function_decl><type><name>int</name></type> <name>is_valid_win32_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_literal_nul</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_valid_path</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>is_valid_win32_path(path, 0)</cpp:value></cpp:define>
















































<function_decl><type><name>int</name></type> <name>xutftowcsn</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wcslen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>utflen</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>xutftowcs</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wcslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xutftowcsn</name><argument_list>(<argument><expr><name>wcs</name></expr></argument>, <argument><expr><name>utf</name></expr></argument>, <argument><expr><name>wcslen</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>xutftowcs_path</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>xutftowcsn</name><argument_list>(<argument><expr><name>wcs</name></expr></argument>, <argument><expr><name>utf</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

































<function_decl><type><name>int</name></type> <name>xwcstoutf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>utf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>utflen</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><specifier>extern</specifier> <name>CRITICAL_SECTION</name></type> <name>pinfo_cs</name></decl>;</decl_stmt>












<function_decl><type><name>int</name></type> <name>wmain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>w_argv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>open_in_gdb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>err_win_to_posix</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>winerr</name></decl></parameter>)</parameter_list>;</function_decl>
</unit>
