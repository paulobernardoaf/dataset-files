<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\tempfile.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEMPFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPFILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>








































































<struct>struct <name>tempfile</name> <block>{
<decl_stmt><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>pid_t</name></type> <name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>filename</name></decl>;</decl_stmt>
}</block>;</struct>






<function_decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>create_tempfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>register_tempfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>






































<function_decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile_sm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>suffixlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile_s</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>suffixlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mks_tempfile_sm</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><name>suffixlen</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile_m</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mks_tempfile_sm</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mks_tempfile_sm</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile_tsm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>suffixlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile_ts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>suffixlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mks_tempfile_tsm</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><name>suffixlen</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile_tm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mks_tempfile_tsm</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>mks_tempfile_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mks_tempfile_tsm</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>xmks_tempfile_m</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>xmks_tempfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_template</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>xmks_tempfile_m</name><argument_list>(<argument><expr><name>filename_template</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>fdopen_tempfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_tempfile_active</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>tempfile</name> <operator>&amp;&amp;</operator> <name><name>tempfile</name><operator>-&gt;</operator><name>active</name></name></expr>;</return>
</block_content>}</block></function>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_tempfile_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_tempfile_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>get_tempfile_fp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>close_tempfile_gently</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>int</name></type> <name>reopen_tempfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>delete_tempfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tempfile_p</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>rename_tempfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tempfile_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
