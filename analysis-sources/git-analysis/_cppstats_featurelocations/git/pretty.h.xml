<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\pretty.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRETTY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRETTY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<struct_decl>struct <name>commit</name>;</struct_decl>
<struct_decl>struct <name>strbuf</name>;</struct_decl>


<enum>enum <name>cmit_fmt</name> <block>{
<decl><name>CMIT_FMT_RAW</name></decl>,
<decl><name>CMIT_FMT_MEDIUM</name></decl>,
<decl><name>CMIT_FMT_DEFAULT</name> <init>= <expr><name>CMIT_FMT_MEDIUM</name></expr></init></decl>,
<decl><name>CMIT_FMT_SHORT</name></decl>,
<decl><name>CMIT_FMT_FULL</name></decl>,
<decl><name>CMIT_FMT_FULLER</name></decl>,
<decl><name>CMIT_FMT_ONELINE</name></decl>,
<decl><name>CMIT_FMT_EMAIL</name></decl>,
<decl><name>CMIT_FMT_MBOXRD</name></decl>,
<decl><name>CMIT_FMT_USERFORMAT</name></decl>,

<decl><name>CMIT_FMT_UNSPECIFIED</name></decl>
}</block>;</enum>

<struct>struct <name>pretty_print_context</name> <block>{



<decl_stmt><decl><type><name><name>enum</name> <name>cmit_fmt</name></name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abbrev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>after_subject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>preserve_subject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>date_mode</name></name></type> <name>date_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>date_mode_explicit</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>print_email_subject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expand_tabs_in_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_8bit_cte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>notes_message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>reflog_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>mailmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ident_split</name></name> <modifier>*</modifier></type><name>from_ident</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>in_body_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>graph_width</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>cmit_fmt_is_mail</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>cmit_fmt</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>CMIT_FMT_EMAIL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>CMIT_FMT_MBOXRD</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>userformat_want</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>notes</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>source</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>void</name></type> <name>userformat_find_requirements</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>userformat_want</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>pp_commit_easy</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>cmit_fmt</name></name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>pp_user_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pretty_print_context</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>pp_title_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pretty_print_context</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg_p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>need_8bit_cte</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>pp_remainder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pretty_print_context</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg_p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>repo_format_commit_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pretty_print_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_THE_REPOSITORY_COMPATIBILITY_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>format_commit_message</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>con</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_format_commit_message(the_repository, c, f, s, con)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><name>void</name></type> <name>get_commit_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>pretty_print_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pretty_print_context</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_subject</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_separator</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>commit_format_is_empty</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>cmit_fmt</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
