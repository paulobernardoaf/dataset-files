<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\builtin\rev-list.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bisect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"reflog-walk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oidset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rev_list_usage</name><index>[]</index></name> <init>=
<expr><literal type="string">"git rev-list [OPTION] &lt;commit-id&gt;... [ -- paths... ]\n"</literal>
<literal type="string">" limiting output:\n"</literal>
<literal type="string">" --max-count=&lt;n&gt;\n"</literal>
<literal type="string">" --max-age=&lt;epoch&gt;\n"</literal>
<literal type="string">" --min-age=&lt;epoch&gt;\n"</literal>
<literal type="string">" --sparse\n"</literal>
<literal type="string">" --no-merges\n"</literal>
<literal type="string">" --min-parents=&lt;n&gt;\n"</literal>
<literal type="string">" --no-min-parents\n"</literal>
<literal type="string">" --max-parents=&lt;n&gt;\n"</literal>
<literal type="string">" --no-max-parents\n"</literal>
<literal type="string">" --remove-empty\n"</literal>
<literal type="string">" --all\n"</literal>
<literal type="string">" --branches\n"</literal>
<literal type="string">" --tags\n"</literal>
<literal type="string">" --remotes\n"</literal>
<literal type="string">" --stdin\n"</literal>
<literal type="string">" --quiet\n"</literal>
<literal type="string">" ordering output:\n"</literal>
<literal type="string">" --topo-order\n"</literal>
<literal type="string">" --date-order\n"</literal>
<literal type="string">" --reverse\n"</literal>
<literal type="string">" formatting output:\n"</literal>
<literal type="string">" --parents\n"</literal>
<literal type="string">" --children\n"</literal>
<literal type="string">" --objects | --objects-edge\n"</literal>
<literal type="string">" --unpacked\n"</literal>
<literal type="string">" --header | --pretty\n"</literal>
<literal type="string">" --[no-]object-names\n"</literal>
<literal type="string">" --abbrev=&lt;n&gt; | --no-abbrev\n"</literal>
<literal type="string">" --abbrev-commit\n"</literal>
<literal type="string">" --left-right\n"</literal>
<literal type="string">" --count\n"</literal>
<literal type="string">" special purpose:\n"</literal>
<literal type="string">" --bisect\n"</literal>
<literal type="string">" --bisect-vars\n"</literal>
<literal type="string">" --bisect-all"</literal></expr></init></decl>
;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>progress_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>list_objects_filter_options</name></name></type> <name>filter_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>oidset</name></name></type> <name>omitted_objects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>arg_print_omitted</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>oidset</name></name></type> <name>missing_objects</name></decl>;</decl_stmt>
<enum>enum <name>missing_action</name> <block>{
<decl><name>MA_ERROR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>MA_ALLOW_ANY</name></decl>, 
<decl><name>MA_PRINT</name></decl>, 
<decl><name>MA_ALLOW_PROMISOR</name></decl>, 
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>missing_action</name></name></type> <name>arg_missing_action</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>arg_show_object_names</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_OIDSET_SIZE</name></cpp:macro> <cpp:value>(16*1024)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>finish_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>show_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_list_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>revs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><operator>++</operator><name>progress_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REV_LIST_QUIET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>finish_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>graph_show_commit</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCHSAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>count_same</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>count_left</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>count_right</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>finish_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>show_timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>header_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>header_prefix</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>get_revision_mark</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev_commit</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>print_parents</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name> <init>= <expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>parents</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parents</name> <operator>=</operator> <name><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

<expr_stmt><expr><name>children</name> <operator>=</operator> <call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>children</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>children</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>children</name> <operator>=</operator> <name><name>children</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>show_decorations</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>commit_format</name></name> <operator>==</operator> <name>CMIT_FMT_ONELINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>verbose_header</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pretty_print_context</name></name></type> <name>ctx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>abbrev</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>date_mode</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>date_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>date_mode_explicit</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>date_mode_explicit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>fmt</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commit_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>output_encoding</name></name> <operator>=</operator> <call><name>get_log_output_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>use_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pretty_print_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>commit_format</name></name> <operator>!=</operator> <name>CMIT_FMT_ONELINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>graph_show_oneline</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>graph_show_commit_msg</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
















<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>graph_show_padding</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>hdr_termination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>graph_show_remainder</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>commit_format</name></name> <operator>==</operator> <name>CMIT_FMT_ONELINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>graph_show_remainder</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>maybe_flush_or_die</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free_commit_buffer</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>parsed_objects</name></name></expr></argument>,
<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>finish_object__ma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<switch>switch <condition>(<expr><name>arg_missing_action</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MA_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"missing %s object '%s'"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>MA_ALLOW_ANY</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>MA_PRINT</name></expr>:</case>
<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing_objects</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>MA_ALLOW_PROMISOR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>is_promisor_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unexpected missing %s object '%s'"</literal></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unhandled missing_action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>finish_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_list_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>finish_object__ma</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>verify_objects</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>parsed</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_list_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>revs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finish_object</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><operator>++</operator><name>progress_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REV_LIST_QUIET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>count_right</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_show_object_names</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_object_with_name</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_edge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_var_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s='%s'\n"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_var_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s=%d\n"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_bisect_vars</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_list_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reaches</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>tried</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>revs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name> <operator>=</operator> <call><name>filter_skipped</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tried</name></expr></argument>,
<argument><expr><name>flags</name> <operator>&amp;</operator> <name>BISECT_SHOW_ALL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>all</name> <operator>-</operator> <name>reaches</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>reaches</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>reaches</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_to_hex_r</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>BISECT_SHOW_ALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>traverse_commit_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>show_commit</name></expr></argument>, <argument><expr><name>show_object</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_var_str</name><argument_list>(<argument><expr><literal type="string">"bisect_rev"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_var_int</name><argument_list>(<argument><expr><literal type="string">"bisect_nr"</literal></expr></argument>, <argument><expr><name>cnt</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_var_int</name><argument_list>(<argument><expr><literal type="string">"bisect_good"</literal></expr></argument>, <argument><expr><name>all</name> <operator>-</operator> <name>reaches</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_var_int</name><argument_list>(<argument><expr><literal type="string">"bisect_bad"</literal></expr></argument>, <argument><expr><name>reaches</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_var_int</name><argument_list>(<argument><expr><literal type="string">"bisect_all"</literal></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_var_int</name><argument_list>(<argument><expr><literal type="string">"bisect_steps"</literal></expr></argument>, <argument><expr><call><name>estimate_bisect_steps</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_object_fast</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>exclude</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>name_hash</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>found_pack</name></decl></parameter>,
<parameter><decl><type><name>off_t</name></type> <name>found_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>parse_missing_action_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_missing_action</name> <operator>=</operator> <name>MA_ERROR</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"allow-any"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_missing_action</name> <operator>=</operator> <name>MA_ALLOW_ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fetch_if_missing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"print"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_missing_action</name> <operator>=</operator> <name>MA_PRINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fetch_if_missing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"allow-promisor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_missing_action</name> <operator>=</operator> <name>MA_ALLOW_PROMISOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fetch_if_missing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_bitmap_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>commit_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>tag_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>tree_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>blob_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>left_right</name></name> <operator>||</operator> <name><name>revs</name><operator>-&gt;</operator><name>cherry_mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name> <operator>||</operator> <name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name> <operator>||</operator> <name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>max_count</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap_git</name> <operator>=</operator> <call><name>prepare_bitmap_walk</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap_git</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>count_bitmap_commit_list</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commit_count</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>tree_count</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>blob_count</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>tag_count</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_count</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max_count</name> <operator>&lt;</operator> <name>commit_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>commit_count</name> <operator>=</operator> <name>max_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>commit_count</name> <operator>+</operator> <name>tree_count</name> <operator>+</operator> <name>blob_count</name> <operator>+</operator> <name>tag_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_bitmap_index</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_bitmap_traversal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitmap_git</name> <operator>=</operator> <call><name>prepare_bitmap_walk</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap_git</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>traverse_bitmap_commit_list</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_object_fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_bitmap_index</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_rev_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>revs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_list_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>setup_revision_opt</name></name></type> <name>s_r_opt</name> <init>= <expr><block>{
<expr><operator>.</operator><name>allow_exclude_promisor_objects</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bisect_list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bisect_show_vars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bisect_find_all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_bitmap_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show_progress</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>rev_list_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_default_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>abbrev</name></name> <operator>=</operator> <name>DEFAULT_ABBREV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>commit_format</name></name> <operator>=</operator> <name>CMIT_FMT_UNSPECIFIED</name></expr>;</expr_stmt>











<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--exclude-promisor-objects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fetch_if_missing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>exclude_promisor_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--missing="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>exclude_promisor_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot combine --exclude-promisor-objects and --missing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_missing_action_value</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>arg_missing_action</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>do_not_die_on_missing_tree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>setup_revisions</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_r_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>revs</name></name> <operator>=</operator> <operator>&amp;</operator><name>revs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>bisect</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bisect_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>quick</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REV_LIST_QUIET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--header"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>verbose_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--timestamp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>show_timestamp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--bisect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bisect_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--bisect-all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bisect_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bisect_find_all</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>BISECT_SHOW_ALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>show_decorations</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--bisect-vars"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bisect_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bisect_show_vars</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--use-bitmap-index"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>use_bitmap_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--test-bitmap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>test_bitmap_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--progress="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>show_progress</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"--"</literal> <name>CL_ARG__FILTER</name> <literal type="string">"="</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_list_objects_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_options</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filter_options</name><operator>.</operator><name>choice</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>.</operator><name>blob_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"object filtering requires --objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"--no-"</literal> <name>CL_ARG__FILTER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_objects_filter_set_no_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--filter-print-omitted"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_print_omitted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--exclude-promisor-objects"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--missing="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"--no-object-names"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_show_object_names</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"--object-names"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_show_object_names</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>rev_list_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>commit_format</name></name> <operator>!=</operator> <name>CMIT_FMT_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hdr_termination</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>commit_format</name></name> <operator>==</operator> <name>CMIT_FMT_ONELINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>header_prefix</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>header_prefix</name></name> <operator>=</operator> <literal type="string">"commit "</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>.</operator><name>verbose_header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>commit_format</name></name> <operator>=</operator> <name>CMIT_FMT_RAW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>revs</name><operator>.</operator><name>commits</name></name> <operator>&amp;&amp;</operator> <call><name>reflog_walk_empty</name><argument_list>(<argument><expr><name><name>revs</name><operator>.</operator><name>reflog_info</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><name><name>revs</name><operator>.</operator><name>tag_objects</name></name> <operator>||</operator> <name><name>revs</name><operator>.</operator><name>tree_objects</name></name> <operator>||</operator> <name><name>revs</name><operator>.</operator><name>blob_objects</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>revs</name><operator>.</operator><name>pending</name><operator>.</operator><name>nr</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>revs</name><operator>.</operator><name>rev_input_given</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>.</operator><name>read_from_stdin</name></name><operator>)</operator> <operator>||</operator>
<name><name>revs</name><operator>.</operator><name>diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>rev_list_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>show_notes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"rev-list does not support display of notes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>revs</name><operator>.</operator><name>tag_objects</name></name> <operator>||</operator> <name><name>revs</name><operator>.</operator><name>tree_objects</name></name> <operator>||</operator> <name><name>revs</name><operator>.</operator><name>blob_objects</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>revs</name><operator>.</operator><name>left_right</name></name> <operator>||</operator> <name><name>revs</name><operator>.</operator><name>cherry_mark</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"marked counting is incompatible with --objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_commit_buffer</name> <operator>=</operator> <operator>(</operator><name><name>revs</name><operator>.</operator><name>verbose_header</name></name> <operator>||</operator>
<name><name>revs</name><operator>.</operator><name>grep_filter</name><operator>.</operator><name>pattern_list</name></name> <operator>||</operator>
<name><name>revs</name><operator>.</operator><name>grep_filter</name><operator>.</operator><name>header_list</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bisect_list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>show_progress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(<argument><expr><name>show_progress</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_bitmap_index</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_bitmap_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_bitmap_traversal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prepare_revision_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"revision walk setup failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>tree_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_edges_uninteresting</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>show_edge</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bisect_list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reaches</name></decl>, <decl><type ref="prev"/><name>all</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>find_bisection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>.</operator><name>commits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reaches</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><name>bisect_find_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bisect_show_vars</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>show_bisect_vars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>reaches</name></expr></argument>, <argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_print_omitted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oidset_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>omitted_objects</name></expr></argument>, <argument><expr><name>DEFAULT_OIDSET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>arg_missing_action</name> <operator>==</operator> <name>MA_PRINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oidset_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing_objects</name></expr></argument>, <argument><expr><name>DEFAULT_OIDSET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>traverse_commit_list_filtered</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>filter_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>show_commit</name></expr></argument>, <argument><expr><name>show_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>arg_print_omitted</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>omitted_objects</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_print_omitted</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oidset_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>omitted_objects</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>oid</name> <operator>=</operator> <call><name>oidset_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"~%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>omitted_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>arg_missing_action</name> <operator>==</operator> <name>MA_PRINT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oidset_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing_objects</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>oid</name> <operator>=</operator> <call><name>oidset_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"?%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>left_right</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>.</operator><name>cherry_mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\t%d\t%d\n"</literal></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_left</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_right</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_same</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>.</operator><name>left_right</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\t%d\n"</literal></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_left</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>.</operator><name>cherry_mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\t%d\n"</literal></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_left</name></name> <operator>+</operator> <name><name>revs</name><operator>.</operator><name>count_right</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_same</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>count_left</name></name> <operator>+</operator> <name><name>revs</name><operator>.</operator><name>count_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
