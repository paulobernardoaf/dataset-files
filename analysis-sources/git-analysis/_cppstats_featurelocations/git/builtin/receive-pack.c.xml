<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\builtin\receive-pack.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkt-line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sideband.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connected.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gpg-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigchain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fsck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmp-objdir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oidset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-reach.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"worktree.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>receive_pack_usage</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git receive-pack &lt;git-dir&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>deny_action</name> <block>{
<decl><name>DENY_UNCONFIGURED</name></decl>,
<decl><name>DENY_IGNORE</name></decl>,
<decl><name>DENY_WARN</name></decl>,
<decl><name>DENY_REFUSE</name></decl>,
<decl><name>DENY_UPDATE_INSTEAD</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>deny_deletes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>deny_non_fast_forwards</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>deny_action</name></name></type> <name>deny_current_branch</name> <init>= <expr><name>DENY_UNCONFIGURED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>deny_action</name></name></type> <name>deny_delete_current</name> <init>= <expr><name>DENY_UNCONFIGURED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>receive_fsck_objects</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transfer_fsck_objects</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>fsck_msg_types</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>receive_unpack_limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transfer_unpack_limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>advertise_atomic_push</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>advertise_push_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>unpack_limit</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>off_t</name></type> <name>max_input_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>report_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_sideband</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_atomic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_push_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prefer_ofs_delta</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>auto_update_server_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>auto_gc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reject_thin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stateless_rpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>head_name_to_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sent_capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>shallow_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alt_shallow_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>push_cert</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>object_id</name></name></type> <name>push_cert_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>signature_check</name></name></type> <name>sigcheck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_cert_nonce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_nonce_seed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NONCE_UNSOLICITED</name> <init>= <expr><literal type="string">"UNSOLICITED"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NONCE_BAD</name> <init>= <expr><literal type="string">"BAD"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NONCE_MISSING</name> <init>= <expr><literal type="string">"MISSING"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NONCE_OK</name> <init>= <expr><literal type="string">"OK"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NONCE_SLOP</name> <init>= <expr><literal type="string">"SLOP"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nonce_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>nonce_stamp_slop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>timestamp_t</name></type> <name>nonce_stamp_slop_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl>;</decl_stmt>

<enum><specifier>static</specifier> enum <block>{
<decl><name>KEEPALIVE_NEVER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>KEEPALIVE_AFTER_NUL</name></decl>,
<decl><name>KEEPALIVE_ALWAYS</name></decl>
}</block> <decl><name>use_keepalive</name></decl>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>keepalive_in_sec</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tmp_objdir</name></name> <modifier>*</modifier></type><name>tmp_objdir</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>deny_action</name></name></type> <name>parse_deny_action</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ignore"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DENY_IGNORE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"warn"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DENY_WARN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"refuse"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DENY_REFUSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"updateinstead"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DENY_UPDATE_INSTEAD</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DENY_REFUSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>DENY_IGNORE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>receive_pack_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>parse_hide_refs_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"receive"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.denydeletes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deny_deletes</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.denynonfastforwards"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deny_non_fast_forwards</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.unpacklimit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>receive_unpack_limit</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"transfer.unpacklimit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>transfer_unpack_limit</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.fsck.skiplist"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsck_msg_types</name></expr></argument>, <argument><expr><literal type="string">"%cskiplist=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>fsck_msg_types</name><operator>.</operator><name>len</name></name></expr> ?</condition><then> <expr><literal type="char">','</literal></expr> </then><else>: <expr><literal type="char">'='</literal></expr></else></ternary></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.fsck."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_valid_msg_type</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsck_msg_types</name></expr></argument>, <argument><expr><literal type="string">"%c%s=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>fsck_msg_types</name><operator>.</operator><name>len</name></name></expr> ?</condition><then> <expr><literal type="char">','</literal></expr> </then><else>: <expr><literal type="char">'='</literal></expr></else></ternary></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Skipping unknown msg id '%s'"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.fsckobjects"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>receive_fsck_objects</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"transfer.fsckobjects"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>transfer_fsck_objects</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.denycurrentbranch"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deny_current_branch</name> <operator>=</operator> <call><name>parse_deny_action</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.denydeletecurrent"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deny_delete_current</name> <operator>=</operator> <call><name>parse_deny_action</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"repack.usedeltabaseoffset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefer_ofs_delta</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.updateserverinfo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auto_update_server_info</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.autogc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auto_gc</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.shallowupdate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shallow_update</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.certnonceseed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert_nonce_seed</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.certnonceslop"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nonce_stamp_slop_limit</name> <operator>=</operator> <call><name>git_config_ulong</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.advertiseatomic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>advertise_atomic_push</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.advertisepushoptions"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>advertise_push_options</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.keepalive"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepalive_in_sec</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"receive.maxinputsize"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_input_size</name> <operator>=</operator> <call><name>git_config_int64</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sent_capabilities</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_write_fmt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>cap</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>,
<argument><expr><literal type="string">"report-status delete-refs side-band-64k quiet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>advertise_atomic_push</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>, <argument><expr><literal type="string">" atomic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prefer_ofs_delta</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>, <argument><expr><literal type="string">" ofs-delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>push_cert_nonce</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>, <argument><expr><literal type="string">" push-cert=%s"</literal></expr></argument>, <argument><expr><name>push_cert_nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>advertise_push_options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>, <argument><expr><literal type="string">" push-options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>, <argument><expr><literal type="string">" agent=%s"</literal></expr></argument>, <argument><expr><call><name>git_user_agent_sanitized</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_write_fmt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s %s%c%s\n"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sent_capabilities</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_ref_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_full</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>seen</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>strip_namespace</name><argument_list>(<argument><expr><name>path_full</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ref_is_hidden</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_full</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>seen</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">".have"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>seen</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>show_ref</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_one_alternate_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>seen</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>seen</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_ref</name><argument_list>(<argument><expr><literal type="string">".have"</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_head_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>oidset</name></name></type> <name>seen</name> <init>= <expr><name>OIDSET_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>show_ref_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_alternate_ref</name><argument_list>(<argument><expr><name>show_one_alternate_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sent_capabilities</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_ref</name><argument_list>(<argument><expr><literal type="string">"capabilities^{}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>advertise_shallow_grafts</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>command</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>skip_update</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>did_not_exist</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>old_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>new_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ref_name</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rp_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>1<operator>,</operator> 2</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rp_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>1<operator>,</operator> 2</function_decl>)))<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>xsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>sz</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><index>[<expr><name>sz</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>use_sideband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xwrite</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rp_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report_message</name><argument_list>(<argument><expr><literal type="string">"warning: "</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rp_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report_message</name><argument_list>(<argument><expr><literal type="string">"error: "</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_to_sideband</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keepalive_active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keepalive_in_sec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_keepalive</name> <operator>=</operator> <name>KEEPALIVE_NEVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_keepalive</name> <operator>==</operator> <name>KEEPALIVE_ALWAYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keepalive_active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keepalive_active</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <name>keepalive_in_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">"0005\1"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>xread</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_keepalive</name> <operator>==</operator> <name>KEEPALIVE_AFTER_NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keepalive_active</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>keepalive_active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>data</name></expr></argument>, <argument><expr><name>use_sideband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>use_sideband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>use_sideband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hmac</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>text_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>GIT_MAX_BLKSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k_ipad</name><index>[<expr><name>GIT_MAX_BLKSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k_opad</name><index>[<expr><name>GIT_MAX_BLKSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>git_hash_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>GIT_MAX_BLKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>blksz</name></name> <operator>&lt;</operator> <name>key_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>k_ipad</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <literal type="number">0x36</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k_opad</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <literal type="number">0x5c</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>k_ipad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k_ipad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>k_opad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k_opad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>prepare_push_cert_nonce</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>stamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>GIT_MAX_RAWSZ</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s:%"</literal><name>PRItime</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>stamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hmac</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>cert_nonce_seed</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cert_nonce_seed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">"-%.*s"</literal></expr></argument>, <argument><expr><name>stamp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>, <argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>next_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>line</name> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name>msg</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>strchrnul</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msg</name> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>eol</name><operator>)</operator> <operator>||</operator> <name>line</name> <operator>==</operator> <name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>+</operator> <name>key_len</name> <operator>&lt;</operator> <name>eol</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>key_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>key_len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next_line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>next_line</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>eol</name></expr> ?</condition><then> <expr><name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>eol</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>eol</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>eol</name></expr> ?</condition><then> <expr><name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>check_nonce</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nonce</name> <init>= <expr><call><name>find_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"nonce"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>stamp</name></decl>, <decl><type ref="prev"/><name>ostamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bohmac</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>expect</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NONCE_BAD</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nonce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_MISSING</name></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>push_cert_nonce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_UNSOLICITED</name></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>push_cert_nonce</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_OK</name></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stateless_rpc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_BAD</name></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if></if_stmt>














<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nonce</name> <operator>&lt;=</operator> <literal type="char">'0'</literal> <operator>||</operator> <literal type="char">'9'</literal> <operator>&lt;</operator> <operator>*</operator><name>nonce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_BAD</name></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>stamp</name> <operator>=</operator> <call><name>parse_timestamp</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bohmac</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bohmac</name> <operator>==</operator> <name>nonce</name> <operator>||</operator> <name><name>bohmac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_BAD</name></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>prepare_push_cert_nonce</name><argument_list>(<argument><expr><name>service_dir</name></expr></argument>, <argument><expr><name>stamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_BAD</name></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>ostamp</name> <operator>=</operator> <call><name>parse_timestamp</name><argument_list>(<argument><expr><name>push_cert_nonce</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nonce_stamp_slop</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>ostamp</name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>stamp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nonce_stamp_slop_limit</name> <operator>&amp;&amp;</operator>
<call><name>labs</name><argument_list>(<argument><expr><name>nonce_stamp_slop</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>nonce_stamp_slop_limit</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>push_cert_nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>push_cert_nonce</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NONCE_SLOP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>leave</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>check_cert_push_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>push_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>push_cert</name><operator>.</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>push_cert</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>find_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"push-option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>next_line</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>next_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>options_seen</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>options_seen</name> <operator>&gt;</operator> <name><name>push_options</name><operator>-&gt;</operator><name>nr</name></name>
<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,
<argument><expr><name><name>push_options</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>options_seen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>leave</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>options_seen</name> <operator>!=</operator> <name><name>push_options</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>leave</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_push_cert_sha1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>already_done</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>push_cert</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>already_done</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bogs</name></decl> ;</decl_stmt>

<expr_stmt><expr><name>already_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_object_file</name><argument_list>(<argument><expr><name><name>push_cert</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>push_cert</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>push_cert_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_cert_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigcheck</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sigcheck</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bogs</name> <operator>=</operator> <call><name>parse_signature</name><argument_list>(<argument><expr><name><name>push_cert</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>push_cert</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_signature</name><argument_list>(<argument><expr><name><name>push_cert</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>bogs</name></expr></argument>, <argument><expr><name><name>push_cert</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>bogs</name></expr></argument>,
<argument><expr><name><name>push_cert</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>bogs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigcheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nonce_status</name> <operator>=</operator> <call><name>check_nonce</name><argument_list>(<argument><expr><name><name>push_cert</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>bogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_cert_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_PUSH_CERT=%s"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_cert_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_PUSH_CERT_SIGNER=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sigcheck</name><operator>.</operator><name>signer</name></name></expr> ?</condition><then> <expr><name><name>sigcheck</name><operator>.</operator><name>signer</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_PUSH_CERT_KEY=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sigcheck</name><operator>.</operator><name>key</name></name></expr> ?</condition><then> <expr><name><name>sigcheck</name><operator>.</operator><name>key</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_PUSH_CERT_STATUS=%c"</literal></expr></argument>,
<argument><expr><name><name>sigcheck</name><operator>.</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>push_cert_nonce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>env_array</name></name></expr></argument>,
<argument><expr><literal type="string">"GIT_PUSH_CERT_NONCE=%s"</literal></expr></argument>,
<argument><expr><name>push_cert_nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>env_array</name></name></expr></argument>,
<argument><expr><literal type="string">"GIT_PUSH_CERT_NONCE_STATUS=%s"</literal></expr></argument>,
<argument><expr><name>nonce_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nonce_status</name> <operator>==</operator> <name>NONCE_SLOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>env_array</name></name></expr></argument>,
<argument><expr><literal type="string">"GIT_PUSH_CERT_NONCE_SLOP=%ld"</literal></expr></argument>,
<argument><expr><name>nonce_stamp_slop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>receive_hook_feed_state</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_broken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>push_options</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>feed_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>run_and_feed_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook_name</name></decl></parameter>, <parameter><decl><type><name>feed_fn</name></type> <name>feed</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>receive_hook_feed_state</name></name> <modifier>*</modifier></type><name>feed_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>proc</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>async</name></name></type> <name>muxer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>find_hook</name><argument_list>(<argument><expr><name>hook_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>trace2_hook_name</name></name> <operator>=</operator> <name>hook_name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>feed_state</name><operator>-&gt;</operator><name>push_options</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>feed_state</name><operator>-&gt;</operator><name>push_options</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>.</operator><name>env_array</name></name></expr></argument>,
<argument><expr><literal type="string">"GIT_PUSH_OPTION_%d=%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>feed_state</name><operator>-&gt;</operator><name>push_options</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>.</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_PUSH_OPTION_COUNT=%d"</literal></expr></argument>,
<argument><expr><name><name>feed_state</name><operator>-&gt;</operator><name>push_options</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>.</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_PUSH_OPTION_COUNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_objdir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>.</operator><name>env_array</name></name></expr></argument>, <argument><expr><call><name>tmp_objdir_env</name><argument_list>(<argument><expr><name>tmp_objdir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>muxer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>muxer</name><operator>.</operator><name>proc</name></name> <operator>=</operator> <name>copy_to_sideband</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>muxer</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>start_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name><name>muxer</name><operator>.</operator><name>in</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prepare_push_cert_sha1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sigchain_push</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>feed</name><argument_list>(<argument><expr><name>feed_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>feed_receive_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>receive_hook_feed_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>state_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>cmd</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator>
<name><name>state</name><operator>-&gt;</operator><name>skip_broken</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>did_not_exist</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s %s\n"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bufp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sizep</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_receive_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>skip_broken</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>push_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>receive_hook_feed_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>commands</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>skip_broken</name></name> <operator>=</operator> <name>skip_broken</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>feed_receive_hook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>commands</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>push_options</name></name> <operator>=</operator> <name>push_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_and_feed_hook</name><argument_list>(<argument><expr><name>hook_name</name></expr></argument>, <argument><expr><name>feed_receive_hook</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_update_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>proc</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>find_hook</name><argument_list>(<argument><expr><literal type="string">"update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>err</name></name> <operator>=</operator> <ternary><condition><expr><name>use_sideband</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>trace2_hook_name</name></name> <operator>=</operator> <literal type="string">"update"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_to_sideband</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>refuse_unconfigured_deny_msg</name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"By default, updating the current branch in a non-bare repository\n"</literal>
<literal type="string">"is denied, because it will make the index and work tree inconsistent\n"</literal>
<literal type="string">"with what you pushed, and will require 'git reset --hard' to match\n"</literal>
<literal type="string">"the work tree to HEAD.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"You can set the 'receive.denyCurrentBranch' configuration variable\n"</literal>
<literal type="string">"to 'ignore' or 'warn' in the remote repository to allow pushing into\n"</literal>
<literal type="string">"its current branch; however, this is not recommended unless you\n"</literal>
<literal type="string">"arranged to update its work tree to match what you pushed in some\n"</literal>
<literal type="string">"other way.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"To squelch this message and still keep the default behaviour, set\n"</literal>
<literal type="string">"'receive.denyCurrentBranch' configuration variable to 'refuse'."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refuse_unconfigured_deny</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>refuse_unconfigured_deny_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>refuse_unconfigured_deny_delete_current_msg</name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"By default, deleting the current branch is denied, because the next\n"</literal>
<literal type="string">"'git clone' won't result in any file checked out, causing confusion.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"You can set 'receive.denyDeleteCurrent' configuration variable to\n"</literal>
<literal type="string">"'warn' or 'ignore' in the remote repository to allow deleting the\n"</literal>
<literal type="string">"current branch, with or without a warning message.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"To squelch this message, you can set it to 'refuse'."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refuse_unconfigured_deny_delete_current</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>refuse_unconfigured_deny_delete_current_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>command_singleton_iterator</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>update_shallow_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>shallow_lock</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>extra</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>check_connected_options</name></name></type> <name>opt</name> <init>= <expr><name>CHECK_CONNECTED_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name> <operator>%</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_shallow</name></expr></argument>,
<argument><expr><literal type="string">"shallow: update_shallow_ref %s\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>used_shallow</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>used_shallow</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name> <operator>/</operator> <literal type="number">32</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>delayed_reachability_test</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>env</name></name> <operator>=</operator> <call><name>tmp_objdir_env</name><argument_list>(<argument><expr><name>tmp_objdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_alternate_shallow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>.</operator><name>shallow_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_connected</name><argument_list>(<argument><expr><name>command_singleton_iterator</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>extra</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>register_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>extra</name><operator>.</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>shallow_ref</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>head_has_history</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_to_deploy</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>work_tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>update_refresh</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"update-index"</literal></expr>, <expr><literal type="string">"-q"</literal></expr>, <expr><literal type="string">"--ignore-submodules"</literal></expr>, <expr><literal type="string">"--refresh"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>diff_files</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"diff-files"</literal></expr>, <expr><literal type="string">"--quiet"</literal></expr>, <expr><literal type="string">"--ignore-submodules"</literal></expr>, <expr><literal type="string">"--"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>diff_index</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"diff-index"</literal></expr>, <expr><literal type="string">"--quiet"</literal></expr>, <expr><literal type="string">"--cached"</literal></expr>, <expr><literal type="string">"--ignore-submodules"</literal></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="string">"--"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>read_tree</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"read-tree"</literal></expr>, <expr><literal type="string">"-u"</literal></expr>, <expr><literal type="string">"-m"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>child</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>child</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>update_refresh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name><name>env</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>work_tree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Up-to-date check failed"</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>child_process_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>diff_files</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name><name>env</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>work_tree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Working directory has unstaged changes"</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>diff_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>head_has_history</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"HEAD"</literal></expr> </then><else>: <expr><call><name>empty_tree_oid_hex</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>child_process_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>diff_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name><name>env</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>no_stdout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Working directory has staged changes"</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>read_tree</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>hash_to_hex</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>child_process_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>read_tree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name><name>env</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>work_tree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>no_stdout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Could not update working tree to new HEAD"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_to_checkout_hook</name> <init>= <expr><literal type="string">"push-to-checkout"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_to_checkout</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>work_tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"GIT_WORK_TREE=%s"</literal></expr></argument>, <argument><expr><call><name>absolute_path</name><argument_list>(<argument><expr><name>work_tree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_hook_le</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name>push_to_checkout_hook</name></expr></argument>,
<argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"push-to-checkout hook declined"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>update_worktree</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>worktree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>retval</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>work_tree</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>git_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>env</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>worktree</name> <operator>&amp;&amp;</operator> <name><name>worktree</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>work_tree</name> <operator>=</operator> <name><name>worktree</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>git_work_tree_cfg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>work_tree</name> <operator>=</operator> <name>git_work_tree_cfg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>work_tree</name> <operator>=</operator> <literal type="string">".."</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"denyCurrentBranch = updateInstead needs a worktree"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>worktree</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>git_dir</name> <operator>=</operator> <call><name>get_worktree_git_dir</name><argument_list>(<argument><expr><name>worktree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>git_dir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>git_dir</name> <operator>=</operator> <call><name>get_git_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><literal type="string">"GIT_DIR=%s"</literal></expr></argument>, <argument><expr><call><name>absolute_path</name><argument_list>(<argument><expr><name>git_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_hook</name><argument_list>(<argument><expr><name>push_to_checkout_hook</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>push_to_deploy</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>work_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>push_to_checkout</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>work_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>namespaced_name_buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>namespaced_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name> <init>= <expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name> <init>= <expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_update_worktree</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>worktree</name> <init>= <expr><ternary><condition><expr><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>find_shared_symref</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_refname_format</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"refusing to create funny ref '%s' remotely"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"funny refname"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>namespaced_name_buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>get_git_namespace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>namespaced_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>namespaced_name</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>namespaced_name_buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>worktree</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>deny_current_branch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DENY_IGNORE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DENY_WARN</name></expr>:</case>
<expr_stmt><expr><call><name>rp_warning</name><argument_list>(<argument><expr><literal type="string">"updating the current branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DENY_REFUSE</name></expr>:</case>
<case>case <expr><name>DENY_UNCONFIGURED</name></expr>:</case>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"refusing to update checked out branch: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>deny_current_branch</name> <operator>==</operator> <name>DENY_UNCONFIGURED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>refuse_unconfigured_deny</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"branch is currently checked out"</literal></expr>;</return>
<case>case <expr><name>DENY_UPDATE_INSTEAD</name></expr>:</case>

<expr_stmt><expr><name>do_update_worktree</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>has_object_file</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unpack should have generated %s, "</literal>
<literal type="string">"but I can't find it!"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"bad pack"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_null_oid</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deny_deletes</name> <operator>&amp;&amp;</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"denying ref deletion for %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"deletion prohibited"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>worktree</name> <operator>||</operator> <operator>(</operator><name>head_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>namespaced_name</name></expr></argument>, <argument><expr><name>head_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>deny_delete_current</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DENY_IGNORE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DENY_WARN</name></expr>:</case>
<expr_stmt><expr><call><name>rp_warning</name><argument_list>(<argument><expr><literal type="string">"deleting the current branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DENY_REFUSE</name></expr>:</case>
<case>case <expr><name>DENY_UNCONFIGURED</name></expr>:</case>
<case>case <expr><name>DENY_UPDATE_INSTEAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>deny_delete_current</name> <operator>==</operator> <name>DENY_UNCONFIGURED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>refuse_unconfigured_deny_delete_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"refusing to delete the current branch: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"deletion of the current branch prohibited"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"Invalid denyDeleteCurrent setting"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>deny_non_fast_forwards</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>old_object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>old_commit</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_commit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_object</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>old_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_object</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_object</name> <operator>||</operator> <operator>!</operator><name>new_object</name> <operator>||</operator>
<name><name>old_object</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name> <operator>||</operator>
<name><name>new_object</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"bad sha1 objects for %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"bad ref"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>old_commit</name> <operator>=</operator> <operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>old_object</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_commit</name> <operator>=</operator> <operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>new_object</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>in_merge_bases</name><argument_list>(<argument><expr><name>old_commit</name></expr></argument>, <argument><expr><name>new_commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"denying non-fast-forward %s"</literal>
<literal type="string">" (you should pull first)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"non-fast-forward"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_update_hook</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"hook declined to update %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"hook declined"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_update_worktree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_worktree</name><argument_list>(<argument><expr><name><name>new_oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><call><name>find_shared_symref</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>old_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_oid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_exists</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_warning</name><argument_list>(<argument><expr><literal type="string">"Allowing deletion of corrupt ref."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>rp_warning</name><argument_list>(<argument><expr><literal type="string">"Deleting a non-existent ref."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>did_not_exist</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_delete</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>,
<argument><expr><name>namespaced_name</name></expr></argument>,
<argument><expr><name>old_oid</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"push"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="string">"failed to delete"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>shallow_update</name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>shallow_ref</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name>update_shallow_ref</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"shallow error"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_update</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>,
<argument><expr><name>namespaced_name</name></expr></argument>,
<argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>old_oid</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"push"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="string">"failed to update ref"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_update_post_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>proc</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hook</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hook</name> <operator>=</operator> <call><name>find_hook</name><argument_list>(<argument><expr><literal type="string">"post-update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hook</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>||</operator> <name><name>cmd</name><operator>-&gt;</operator><name>did_not_exist</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>.</operator><name>args</name><operator>.</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>.</operator><name>args</name><operator>.</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>err</name></name> <operator>=</operator> <ternary><condition><expr><name>use_sideband</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>trace2_hook_name</name></name> <operator>=</operator> <literal type="string">"post-update"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_to_sideband</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_aliased_update_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>dst_cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"refusing update to broken symref '%s'"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>skip_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"broken symref"</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst_name</name> <operator>=</operator> <call><name>strip_namespace</name><argument_list>(<argument><expr><name>dst_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>string_list_lookup</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>dst_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>skip_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_cmd</name> <operator>=</operator> <operator>(</operator>struct <name>command</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst_cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst_cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst_cmd</name><operator>-&gt;</operator><name>skip_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"refusing inconsistent update between symref '%s' (%s..%s) and"</literal>
<literal type="string">" its target '%s' (%s..%s)"</literal></expr></argument>,
<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>,
<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dst_cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>,
<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <name><name>dst_cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator>
<literal type="string">"inconsistent aliased update"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_aliased_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>get_git_namespace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_name</name> <operator>=</operator> <call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_aliased_update_internal</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>dst_name</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_aliased_updates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>ref_list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name> <init>=
<expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_list</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_aliased_update</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>command_singleton_iterator</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cmd_list</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>*</operator><name>cmd_list</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><operator>*</operator><name>cmd_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_connectivity_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>singleton</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>check_connected_options</name></name></type> <name>opt</name> <init>= <expr><name>CHECK_CONNECTED_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shallow_update</name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>shallow_ref</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>env</name></name> <operator>=</operator> <call><name>tmp_objdir_env</name><argument_list>(<argument><expr><name>tmp_objdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_connected</name><argument_list>(<argument><expr><name>command_singleton_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>singleton</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"missing necessary objects"</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<struct>struct <name>iterate_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iterate_receive_command_list</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iterate_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cmd_list</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>cmds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>*</operator><name>cmd_list</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shallow_update</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>si</name><operator>-&gt;</operator><name>shallow_ref</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>skip_update</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cmd_list</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>cmd_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reject_updates_to_hidden</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>refname_full</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname_full</name></expr></argument>, <argument><expr><call><name>get_git_namespace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <name><name>refname_full</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname_full</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname_full</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ref_is_hidden</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name><name>refname_full</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"deny deleting a hidden ref"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"deny updating a hidden ref"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>should_process_cmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>skip_update</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>warn_if_skipped_connectivity_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checked_connectivity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>should_process_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>si</name><operator>-&gt;</operator><name>shallow_ref</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"BUG: connectivity check has not been run on ref %s"</literal></expr></argument>,
<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checked_connectivity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>checked_connectivity</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"connectivity check skipped???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execute_commands_non_atomic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>should_process_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name>ref_transaction_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transaction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"transaction failed to start"</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <call><name>update</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name>
<operator>&amp;&amp;</operator> <call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"failed to update ref"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execute_commands_atomic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reported_error</name> <init>= <expr><literal type="string">"atomic push failure"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name>ref_transaction_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transaction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reported_error</name> <operator>=</operator> <literal type="string">"transaction failed to start"</literal></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>should_process_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <call><name>update</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rp_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reported_error</name> <operator>=</operator> <literal type="string">"atomic transaction failed"</literal></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>cleanup</name>;</goto>

<label><name>failure</name>:</label>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <name>reported_error</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execute_commands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unpacker_error</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>push_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>check_connected_options</name></name></type> <name>opt</name> <init>= <expr><name>CHECK_CONNECTED_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iterate_data</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>async</name></name></type> <name>muxer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unpacker_error</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"unpacker error"</literal></expr>;</expr_stmt></block_content></block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>muxer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>muxer</name><operator>.</operator><name>proc</name></name> <operator>=</operator> <name>copy_to_sideband</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>muxer</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err_fd</name> <operator>=</operator> <name><name>muxer</name><operator>.</operator><name>in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cmds</name></name> <operator>=</operator> <name>commands</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>si</name></name> <operator>=</operator> <name>si</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>err_fd</name></name> <operator>=</operator> <name>err_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>err_fd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quiet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>env</name></name> <operator>=</operator> <call><name>tmp_objdir_env</name><argument_list>(<argument><expr><name>tmp_objdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_connected</name><argument_list>(<argument><expr><name>iterate_receive_command_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_connectivity_errors</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>reject_updates_to_hidden</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>run_receive_hook</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><literal type="string">"pre-receive"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>push_options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"pre-receive hook declined"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>tmp_objdir_migrate</name><argument_list>(<argument><expr><name>tmp_objdir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"unable to migrate objects to permanent storage"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp_objdir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_aliased_updates</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>head_name_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>head_name</name> <operator>=</operator> <name>head_name_to_free</name> <operator>=</operator> <call><name>resolve_refdup</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_atomic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execute_commands_atomic</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execute_commands_non_atomic</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shallow_update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn_if_skipped_connectivity_check</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>command</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>queue_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>linelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>old_oid</name></decl>, <decl><type ref="prev"/><name>new_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator>
<call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"protocol error: expected old/new/ref, got '%s'"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>refname</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reflen</name> <operator>=</operator> <name>linelen</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FLEX_ALLOC_MEM</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ref_name</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>reflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_commands_from_cert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>push_cert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>boc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eoc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"protocol error: got both push certificate and unsigned commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>boc</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>push_cert</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>boc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"malformed push certificate %.*s"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>push_cert</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>boc</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>eoc</name> <operator>=</operator> <name><name>push_cert</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <call><name>parse_signature</name><argument_list>(<argument><expr><name><name>push_cert</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>push_cert</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>boc</name> <operator>&lt;</operator> <name>eoc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>boc</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>eoc</name> <operator>-</operator> <name>boc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>queue_command</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name>boc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>eol</name></expr> ?</condition><then> <expr><name>eol</name> <operator>-</operator> <name>boc</name></expr> </then><else>: <expr><name>eoc</name> <operator>-</operator> <name>boc</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>boc</name> <operator>=</operator> <ternary><condition><expr><name>eol</name></expr> ?</condition><then> <expr><name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>eoc</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>read_head_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>shallow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>commands</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>linelen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>pktlen</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"shallow "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"protocol error: expected shallow sha, got '%s'"</literal></expr></argument>,
<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><name>shallow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&lt;</operator> <name><name>reader</name><operator>-&gt;</operator><name>pktlen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>feature_list</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>linelen</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_feature_request</name><argument_list>(<argument><expr><name>feature_list</name></expr></argument>, <argument><expr><literal type="string">"report-status"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>report_status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_feature_request</name><argument_list>(<argument><expr><name>feature_list</name></expr></argument>, <argument><expr><literal type="string">"side-band-64k"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_sideband</name> <operator>=</operator> <name>LARGE_PACKET_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_feature_request</name><argument_list>(<argument><expr><name>feature_list</name></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>advertise_atomic_push</name>
<operator>&amp;&amp;</operator> <call><name>parse_feature_request</name><argument_list>(<argument><expr><name>feature_list</name></expr></argument>, <argument><expr><literal type="string">"atomic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_atomic</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>advertise_push_options</name>
<operator>&amp;&amp;</operator> <call><name>parse_feature_request</name><argument_list>(<argument><expr><name>feature_list</name></expr></argument>, <argument><expr><literal type="string">"push-options"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_push_options</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"push-cert"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>true_flush</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_options</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PACKET_READ_CHOMP_NEWLINE</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>PACKET_READ_FLUSH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>true_flush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"protocol error: got an unexpected packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"push-cert-end\n"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_cert</name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>saved_options</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>true_flush</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>queue_command</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>push_cert</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>queue_commands_from_cert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>push_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>commands</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_push_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_pack_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_header</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>read_pack_header</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PH_ERROR_EOF</name></expr>:</case>
<return>return <expr><literal type="string">"eof before pack header was fully read"</literal></expr>;</return>

<case>case <expr><name>PH_ERROR_PACK_SIGNATURE</name></expr>:</case>
<return>return <expr><literal type="string">"protocol error (pack signature mismatch detected)"</literal></expr>;</return>

<case>case <expr><name>PH_ERROR_PROTOCOL</name></expr>:</case>
<return>return <expr><literal type="string">"protocol error (pack version unsupported)"</literal></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="string">"unknown error in parse_pack_header"</literal></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pack_lockfile</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_header_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pack_header</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"--pack_header=%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>hdr_version</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>hdr_entries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unpack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err_fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_header</name></name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>child</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fsck_objects</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>receive_fsck_objects</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>receive_fsck_objects</name></expr>
</then><else>: <expr><ternary><condition><expr><name>transfer_fsck_objects</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>transfer_fsck_objects</name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hdr_err</name> <operator>=</operator> <call><name>parse_pack_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hdr_err</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err_fd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>hdr_err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>||</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alt_shallow_file</name> <operator>=</operator> <call><name>setup_temporary_shallow</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--shallow-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>alt_shallow_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_objdir</name> <operator>=</operator> <call><name>tmp_objdir_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_objdir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err_fd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>err_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"unable to create temporary object directory"</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>env</name></name> <operator>=</operator> <call><name>tmp_objdir_env</name><argument_list>(<argument><expr><name>tmp_objdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>tmp_objdir_add_as_alternate</name><argument_list>(<argument><expr><name>tmp_objdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>hdr_entries</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>unpack_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"unpack-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_header_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fsck_objects</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--strict%s"</literal></expr></argument>,
<argument><expr><name><name>fsck_msg_types</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max_input_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--max-input-size=%"</literal><name>PRIuMAX</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>max_input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>no_stdout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>err_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"unpack-objects abnormal exit"</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>HOST_NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"index-pack"</literal></expr></argument>, <argument><expr><literal type="string">"--stdin"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_header_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xgethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>,
<argument><expr><literal type="string">"--keep=receive-pack %"</literal><name>PRIuMAX</name><literal type="string">" on %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name> <operator>&amp;&amp;</operator> <name>err_fd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--show-resolving-progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--report-end-of-input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fsck_objects</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--strict%s"</literal></expr></argument>,
<argument><expr><name><name>fsck_msg_types</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reject_thin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--fix-thin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max_input_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--max-input-size=%"</literal><name>PRIuMAX</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>max_input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>err_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"index-pack fork failed"</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pack_lockfile</name> <operator>=</operator> <call><name>index_pack_lockfile</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"index-pack abnormal exit"</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reprepare_packed_git</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unpack_with_sideband</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>async</name></name></type> <name>muxer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>unpack</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>use_keepalive</name> <operator>=</operator> <name>KEEPALIVE_AFTER_NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>muxer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>muxer</name><operator>.</operator><name>proc</name></name> <operator>=</operator> <name>copy_to_sideband</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>muxer</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>start_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unpack</name><argument_list>(<argument><expr><name><name>muxer</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>muxer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_shallow_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>bitmap_size</name> <init>= <expr><call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>used_shallow</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assign_shallow_commits_to_refs</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>used_shallow</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>need_reachability_test</name></name> <operator>=</operator>
<call><name>xcalloc</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>si</name><operator>-&gt;</operator><name>need_reachability_test</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>reachable</name></name> <operator>=</operator>
<call><name>xcalloc</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>si</name><operator>-&gt;</operator><name>reachable</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>shallow_ref</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>si</name><operator>-&gt;</operator><name>shallow_ref</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>need_reachability_test</name><index>[<expr><name><name>si</name><operator>-&gt;</operator><name>ours</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>used_shallow</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bitmap_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>used_shallow</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>need_reachability_test</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>used_shallow</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>shallow_ref</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <name>k</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>





<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>need_reachability_test</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>si</name><operator>-&gt;</operator><name>need_reachability_test</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>







<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_SHALLOW_FILE_ENVIRONMENT</name></expr></argument>, <argument><expr><name>alt_shallow_file</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_shallow_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ref_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>remove_nonexistent_theirs_shallow</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shallow_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shallow_update</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prepare_shallow_update</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>ref_status</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assign_shallow_commits_to_refs</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ref_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref_status</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"shallow update not allowed"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>skip_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ref_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unpack_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"unpack %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>unpack_status</name></expr> ?</condition><then> <expr><name>unpack_status</name></expr> </then><else>: <expr><literal type="string">"ok"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ok %s\n"</literal></expr></argument>,
<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ng %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>packet_buf_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>use_sideband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>delete_only</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_receive_pack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>advertise_refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>commands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>shallow</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>ref</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>shallow_info</name></name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packet_reader</name></name></type> <name>reader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>OPT__QUIET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quiet</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"quiet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_HIDDEN_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stateless-rpc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stateless_rpc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_HIDDEN_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"advertise-refs"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>advertise_refs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_HIDDEN_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"reject-thin-pack-for-testing"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reject_thin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<macro><name>OPT_END</name><argument_list>()</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packet_trace_identity</name><argument_list>(<argument><expr><literal type="string">"receive-pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>receive_pack_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage_msg_opt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Too many arguments."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>receive_pack_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage_msg_opt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You must specify a directory."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>receive_pack_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>service_dir</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enter_repo</name><argument_list>(<argument><expr><name>service_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"'%s' does not appear to be a git repository"</literal></expr></argument>, <argument><expr><name>service_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>receive_pack_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cert_nonce_seed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_cert_nonce</name> <operator>=</operator> <call><name>prepare_push_cert_nonce</name><argument_list>(<argument><expr><name>service_dir</name></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>transfer_unpack_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unpack_limit</name> <operator>=</operator> <name>transfer_unpack_limit</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>receive_unpack_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unpack_limit</name> <operator>=</operator> <name>receive_unpack_limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>determine_protocol_version_server</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>protocol_v2</name></expr>:</case>




<break>break;</break>
<case>case <expr><name>protocol_v1</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name>advertise_refs</name> <operator>||</operator> <operator>!</operator><name>stateless_rpc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_write_fmt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"version 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<case>case <expr><name>protocol_v0</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>protocol_unknown_version</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown protocol version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>advertise_refs</name> <operator>||</operator> <operator>!</operator><name>stateless_rpc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_head_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>advertise_refs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>packet_reader_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PACKET_READ_CHOMP_NEWLINE</name> <operator>|</operator>
<name>PACKET_READ_DIE_ON_ERR_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>commands</name> <operator>=</operator> <call><name>read_head_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shallow</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unpack_status</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>push_options</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_push_options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_push_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>push_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_cert_push_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>command</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>cmd</name> <operator>=</operator> <name>commands</name></expr>;</init> <condition><expr><name>cmd</name></expr>;</condition> <incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>error_string</name></name> <operator>=</operator> <literal type="string">"inconsistent push options"</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prepare_shallow_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shallow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>.</operator><name>nr_ours</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>si</name><operator>.</operator><name>nr_theirs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shallow_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>delete_only</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unpack_status</name> <operator>=</operator> <call><name>unpack_with_sideband</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_shallow_info</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>use_keepalive</name> <operator>=</operator> <name>KEEPALIVE_ALWAYS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>execute_commands</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>unpack_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>push_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pack_lockfile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name>pack_lockfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>report_status</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>unpack_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>run_receive_hook</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><literal type="string">"post-receive"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>push_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run_update_post_hook</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>auto_gc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv_gc_auto</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"gc"</literal></expr>, <expr><literal type="string">"--auto"</literal></expr>, <expr><literal type="string">"--quiet"</literal></expr>, <expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>proc</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>stdout_to_stderr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>err</name></name> <operator>=</operator> <ternary><condition><expr><name>use_sideband</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv_gc_auto</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_object_store</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_to_sideband</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>auto_update_server_info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_server_info</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_shallow_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>push_cert_nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
