<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\builtin\pack-redundant.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLKSIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pack_redundant_usage</name><index>[]</index></name> <init>=
<expr><literal type="string">"git pack-redundant [--verbose] [--alt-odb] (--all | &lt;filename.pack&gt;...)"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>load_all_packs</name></decl>, <decl><type ref="prev"/><name>verbose</name></decl>, <decl><type ref="prev"/><name>alt_odb</name></decl>;</decl_stmt>

<struct>struct <name>llist_item</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
}</block>;</struct>
<struct><specifier>static</specifier> struct <name>llist</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>front</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>all_objects</name></decl>;</struct> 

<struct><specifier>static</specifier> struct <name>pack_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>unique_objects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>remaining_objects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>all_objects_size</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>local_packs</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>altodb_packs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>free_nodes</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>llist_item_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>free_nodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_nodes</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>llist_item_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>new_item</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>free_nodes</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>new_item</name> <operator>=</operator> <name>free_nodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_nodes</name> <operator>=</operator> <name><name>free_nodes</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>new_item</name></expr></argument>, <argument><expr><name>BLKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>llist_item_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>new_item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>llist_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>llist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>back</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type> <name>llist_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>new_item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_item</name> <operator>=</operator> <name><name>ret</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <call><name>llist_item_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>front</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_item</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>front</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>old_item</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_item</name> <operator>=</operator> <call><name>llist_item_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <name><name>old_item</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_item</name> <operator>=</operator> <name><name>old_item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>back</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>llist_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>after</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>new_item</name> <init>= <expr><call><name>llist_item_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>after</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>after</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>after</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>after</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>back</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>back</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>back</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name>new_item</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>new_item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>llist_insert_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>llist_insert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>back</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>llist_insert_sorted_unique</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>hint</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>list</name><operator>-&gt;</operator><name>front</name></name></expr> </then><else>: <expr><name>hint</name></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>oidcmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><call><name>llist_insert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>llist_insert_back</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type> <name>llist_sorted_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<label><name>redo_from_start</name>:</label>
<expr_stmt><expr><name>l</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>hint</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>list</name><operator>-&gt;</operator><name>front</name></name></expr> </then><else>: <expr><name>hint</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><call><name>oidcmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>prev</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hint</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>front</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hint</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>redo_from_start</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>back</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>back</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>llist_item_put</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>llist_sorted_difference_inplace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>A</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>hint</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hint</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>llist_sorted_remove</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type> <name>pack_list_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pl</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pack_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pack_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>pl</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pl</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>pack_list_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type> <name>pack_list_difference</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>A</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>pack</name></name> <operator>==</operator> <name><name>pl</name><operator>-&gt;</operator><name>pack</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>pack_list_difference</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pack_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pack_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>pack_list_difference</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmp_two_packs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>p1_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p2_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p1_step</name></decl>, <decl><type ref="prev"/><name>p2_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p1_base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>p1_hint</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2_hint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>hashsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p1</name><operator>-&gt;</operator><name>unique_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>unique_objects</name></name> <operator>=</operator> <call><name>llist_copy</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p2</name><operator>-&gt;</operator><name>unique_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p2</name><operator>-&gt;</operator><name>unique_objects</name></name> <operator>=</operator> <call><name>llist_copy</name><argument_list>(<argument><expr><name><name>p2</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p1_base</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>index_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_base</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>index_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1_base</name> <operator>+=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_base</name> <operator>+=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p2</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p1_step</name> <operator>=</operator> <name>hashsz</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_step</name> <operator>=</operator> <name>hashsz</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p2</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p1_off</name> <operator>&lt;</operator> <name><name>p1</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>*</operator> <name>p1_step</name> <operator>&amp;&amp;</operator>
<name>p2_off</name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>*</operator> <name>p2_step</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><call><name>hashcmp</name><argument_list>(<argument><expr><name>p1_base</name> <operator>+</operator> <name>p1_off</name></expr></argument>, <argument><expr><name>p2_base</name> <operator>+</operator> <name>p2_off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p1_hint</name> <operator>=</operator> <call><name>llist_sorted_remove</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>unique_objects</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>object_id</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p1_base</name> <operator>+</operator> <name>p1_off</name><operator>)</operator></expr></argument>,
<argument><expr><name>p1_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_hint</name> <operator>=</operator> <call><name>llist_sorted_remove</name><argument_list>(<argument><expr><name><name>p2</name><operator>-&gt;</operator><name>unique_objects</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>object_id</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p1_base</name> <operator>+</operator> <name>p1_off</name><operator>)</operator></expr></argument>,
<argument><expr><name>p2_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p1_off</name> <operator>+=</operator> <name>p1_step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_off</name> <operator>+=</operator> <name>p2_step</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>p1_off</name> <operator>+=</operator> <name>p1_step</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>p2_off</name> <operator>+=</operator> <name>p2_step</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>sizeof_union</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>p1_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p2_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p1_step</name></decl>, <decl><type ref="prev"/><name>p2_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p1_base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>hashsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_base</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>index_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_base</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>index_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1_base</name> <operator>+=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_base</name> <operator>+=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p2</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p1_step</name> <operator>=</operator> <name>hashsz</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_step</name> <operator>=</operator> <name>hashsz</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p2</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p1_off</name> <operator>&lt;</operator> <name><name>p1</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>*</operator> <name>p1_step</name> <operator>&amp;&amp;</operator>
<name>p2_off</name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>*</operator> <name>p2_step</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>hashcmp</name><argument_list>(<argument><expr><name>p1_base</name> <operator>+</operator> <name>p1_off</name></expr></argument>, <argument><expr><name>p2_base</name> <operator>+</operator> <name>p2_off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p1_off</name> <operator>+=</operator> <name>p1_step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2_off</name> <operator>+=</operator> <name>p2_step</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>p1_off</name> <operator>+=</operator> <name>p1_step</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>p2_off</name> <operator>+=</operator> <name>p2_step</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_pack_redundancy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>subset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>subset</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>subset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>sizeof_union</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name><name>subset</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subset</name> <operator>=</operator> <name><name>subset</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>off_t</name></type> <name>pack_set_bytecount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>pl</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>pack_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>pl</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>index_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_remaining_objects</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl_a</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>pack_list</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl_b</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>pack_list</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pl_a</name><operator>-&gt;</operator><name>remaining_objects</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>pl_b</name><operator>-&gt;</operator><name>remaining_objects</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pl_a</name><operator>-&gt;</operator><name>all_objects_size</name></name> <operator>==</operator> <name><name>pl_b</name><operator>-&gt;</operator><name>all_objects_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pl_a</name><operator>-&gt;</operator><name>all_objects_size</name></name> <operator>&lt;</operator> <name><name>pl_b</name><operator>-&gt;</operator><name>all_objects_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pl_a</name><operator>-&gt;</operator><name>remaining_objects</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>pl_b</name><operator>-&gt;</operator><name>remaining_objects</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_pack_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ary</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>pack_list_size</name><argument_list>(<argument><expr><operator>*</operator><name>pl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pack_list</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pl</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ary</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cmp_remaining_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ary</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name><name>ary</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ary</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pl</name> <operator>=</operator> <name><name>ary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>minimize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>min</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>unique</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>non_unique</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>missing</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>unique_pack_objects</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>local_packs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>unique_objects</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pack_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unique</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pack_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>non_unique</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>missing</name> <operator>=</operator> <call><name>llist_copy</name><argument_list>(<argument><expr><name>all_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>unique</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name>missing</name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>unique</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>missing</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unique_pack_objects</name> <operator>=</operator> <call><name>llist_copy</name><argument_list>(<argument><expr><name>all_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name>unique_pack_objects</name></expr></argument>, <argument><expr><name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>non_unique</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>, <argument><expr><name>unique_pack_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>non_unique</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sort_pack_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>non_unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>non_unique</name><operator>-&gt;</operator><name>remaining_objects</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pack_list_insert</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>non_unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pl</name> <operator>=</operator> <name><name>non_unique</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>pl</name> <operator>&amp;&amp;</operator> <name><name>pl</name><operator>-&gt;</operator><name>remaining_objects</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>, <argument><expr><name><name>non_unique</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>non_unique</name> <operator>=</operator> <name><name>non_unique</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_all_objects</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>pl</name> <init>= <expr><name>local_packs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist_item</name></name> <modifier>*</modifier></type><name>hint</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>remaining_objects</name><operator>-&gt;</operator><name>front</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>llist_insert_sorted_unique</name><argument_list>(<argument><expr><name>all_objects</name></expr></argument>,
<argument><expr><name><name>l</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>altodb_packs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name>all_objects</name></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cmp_local_packs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>subset</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pl</name> <init>= <expr><name>local_packs</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>subset</name> <operator>=</operator> <name>pl</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>subset</name> <operator>=</operator> <name><name>subset</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmp_two_packs</name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>subset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_alt_odb_packs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>local</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alt</name> <operator>=</operator> <name>altodb_packs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>alt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>local</name> <operator>=</operator> <name>local_packs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>local</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name><name>local</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>,
<argument><expr><name><name>alt</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>local</name> <operator>=</operator> <name><name>local</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>alt</name> <operator>=</operator> <name><name>alt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type> <name>add_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pack_local</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>alt_odb</name> <operator>||</operator> <name>verbose</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>.</operator><name>pack</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>.</operator><name>remaining_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>open_pack_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>index_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>+=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>*</operator> <name>step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>llist_insert_back</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>remaining_objects</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>object_id</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>base</name> <operator>+</operator> <name>off</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>l</name><operator>.</operator><name>all_objects_size</name></name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>remaining_objects</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>.</operator><name>unique_objects</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pack_local</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>pack_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_packs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>pack_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>altodb_packs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type> <name>add_pack_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_all_packs</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Bad pack filename: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>add_pack</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Filename %s not found in packed_git"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_all_packs</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_pack</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_pack_redundant</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_list</name></name> <modifier>*</modifier></type><name>min</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>red</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>llist</name></name> <modifier>*</modifier></type><name>ignore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>pack_redundant_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>load_all_packs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--alt-odb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alt_odb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>pack_redundant_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>load_all_packs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>load_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>argv</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_pack_file</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>argv</name> <operator>+</operator> <name>i</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>local_packs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Zero packs found!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>load_all_objects</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alt_odb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scan_alt_odb_packs</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Bad object ID on stdin: %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>llist_insert_sorted_unique</name><argument_list>(<argument><expr><name>ignore</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name>all_objects</name></expr></argument>, <argument><expr><name>ignore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>local_packs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>llist_sorted_difference_inplace</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>remaining_objects</name></name></expr></argument>, <argument><expr><name>ignore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>cmp_local_packs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>minimize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"There are %lu packs available in alt-odbs.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>pack_list_size</name><argument_list>(<argument><expr><name>altodb_packs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"The smallest (bytewise) set of packs is:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"containing %lu duplicate objects "</literal>
<literal type="string">"with a total size of %lukb.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>get_pack_redundancy</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>pack_set_bytecount</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"A total of %lu unique objects were considered.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>all_objects</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Redundant packs (with indexes):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>red</name> <operator>=</operator> <call><name>pack_list_difference</name><argument_list>(<argument><expr><name>local_packs</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n%s\n"</literal></expr></argument>,
<argument><expr><call><name>sha1_pack_index_name</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl</name> <operator>=</operator> <name><name>pl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%luMB of redundant packs in total.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>pack_set_bytecount</name><argument_list>(<argument><expr><name>red</name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
