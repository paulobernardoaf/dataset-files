<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\builtin\merge-tree.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_THE_INDEX_COMPATIBILITY_MACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"merge-blobs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>merge_tree_usage</name><index>[]</index></name> <init>= <expr><literal type="string">"git merge-tree &lt;base-tree&gt; &lt;branch1&gt; &lt;branch2&gt;"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>merge_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stage</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>blob</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>merge_result</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>merge_result_end</name> <init>= <expr><operator>&amp;</operator><name>merge_result</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_merge_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>merge_result_end</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>merge_result_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>merge_trees</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>explanation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>stage</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><literal type="string">"merged"</literal></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><literal type="string">"added in remote"</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"added in both"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"added in local"</literal></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"removed in both"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"changed in both"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"removed in local"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"removed in remote"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>our</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>their</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>stage</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>read_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>blob</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>blob</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>our</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>our</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>blob</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>their</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>their</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>blob</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>merge_blobs</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>our</name></expr></argument>, <argument><expr><name>their</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>origin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>read_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>blob</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_outf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_</name></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbuf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmfile_t</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitcb_t</name></type> <name>ecb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecb</name><operator>.</operator><name>out_hunk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecb</name><operator>.</operator><name>out_line</name></name> <operator>=</operator> <name>show_outf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecb</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>origin</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>src</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>result</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xdi_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to generate diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>src</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dst</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_result_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>explanation</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>link</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>desc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"result"</literal></expr>, <expr><literal type="string">"base"</literal></expr>, <expr><literal type="string">"our"</literal></expr>, <expr><literal type="string">"their"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %-6s %o %s %s\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>stage</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>blob</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>entry</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_result</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>walk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>walk</name> <operator>=</operator> <name>merge_result</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>walk</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_result_list</name><argument_list>(<argument><expr><name>walk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_diff</name><argument_list>(<argument><expr><name>walk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>walk</name> <operator>=</operator> <name><name>walk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>same_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>a</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>both_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>create_entry</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>blob</name></name> <operator>=</operator> <call><name>lookup_blob</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>traverse_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_make_traverse_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resolve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>ours</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>orig</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>final</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ours</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>traverse_path</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orig</name> <operator>=</operator> <call><name>create_entry</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ours</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ours</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>final</name> <operator>=</operator> <call><name>create_entry</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>final</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_merge_entry</name><argument_list>(<argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unresolved_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>the_repository</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>newbase</name> <operator>=</operator> <call><name>traverse_path</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTRY_OID</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((e)-&gt;mode &amp;&amp; S_ISDIR((e)-&gt;mode)) ? &amp;(e)-&gt;oid : NULL)</cpp:value></cpp:define>
<expr_stmt><expr><name>buf0</name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ENTRY_OID</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ENTRY_OID</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ENTRY_OID</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENTRY_OID</name></cpp:undef>

<expr_stmt><expr><call><name>merge_trees</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>newbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>link_entry</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>entry</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>traverse_path</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>link</name> <operator>=</operator> <call><name>create_entry</name><argument_list>(<argument><expr><name>stage</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<return>return <expr><name>link</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unresolved</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_list</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dirmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>||</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dirmask</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>unresolved_directory</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirmask</name> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>link_entry</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>link_entry</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>link_entry</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_merge_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>int</name></type> <name>threeway_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dirmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>same_entry</name><argument_list>(<argument><expr><name>entry</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>both_empty</name><argument_list>(<argument><expr><name>entry</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>resolve</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>same_entry</name><argument_list>(<argument><expr><name>entry</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>entry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>resolve</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></if></if_stmt>





</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>same_entry</name><argument_list>(<argument><expr><name>entry</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>both_empty</name><argument_list>(<argument><expr><name>entry</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>resolve</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>entry</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unresolved</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_trees</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>traverse_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_traverse_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>threeway_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>traverse_trees</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>get_tree_descriptor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_get_oid</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unknown rev %s"</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s is not a tree"</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_merge_tree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>the_repository</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>merge_tree_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>get_tree_descriptor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>get_tree_descriptor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf3</name> <operator>=</operator> <call><name>get_tree_descriptor</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>merge_trees</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_result</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
