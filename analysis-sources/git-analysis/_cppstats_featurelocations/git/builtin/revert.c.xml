<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\builtin\revert.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rerere.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sequencer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"branch.h"</cpp:file></cpp:include>












<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>revert_usage</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git revert [&lt;options&gt;] &lt;commit-ish&gt;..."</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git revert &lt;subcommand&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>cherry_pick_usage</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git cherry-pick [&lt;options&gt;] &lt;commit-ish&gt;..."</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git cherry-pick &lt;subcommand&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>REPLAY_REVERT</name></expr> ?</condition><then> <expr><literal type="string">"revert"</literal></expr> </then><else>: <expr><literal type="string">"cherry-pick"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>revert_or_cherry_pick_usage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>REPLAY_REVERT</name></expr> ?</condition><then> <expr><name>revert_usage</name></expr> </then><else>: <expr><name>cherry_pick_usage</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>option_parse_x</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>opts_ptr</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><operator>*</operator><name>opts_ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>xopts</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>xopts_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>xopts_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>xopts</name><index>[<expr><name><name>opts</name><operator>-&gt;</operator><name>xopts_nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>option_parse_m</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>replay</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>replay</name><operator>-&gt;</operator><name>mainline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>replay</name><operator>-&gt;</operator><name>mainline</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>||</operator> <name><name>replay</name><operator>-&gt;</operator><name>mainline</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"option `%s' expects a number greater than zero"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>LAST_ARG_MUST_BE_NULL</name>
<specifier>static</specifier> <name>void</name></type> <name>verify_opt_compatible</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_opt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>this_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>base_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>this_opt</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>this_opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: %s cannot be used with %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>this_opt</name></expr></argument>, <argument><expr><name>base_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_sequencer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type> <name>usage_str</name> <init>= <expr><call><name>revert_or_cherry_pick_usage</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>me</name> <init>= <expr><call><name>action_name</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cleanup_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>base_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"end revert or cherry-pick sequence"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"continue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"resume revert or cherry-pick sequence"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cancel revert or cherry-pick sequence"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"skip current commit and continue"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_CLEANUP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cleanup_arg</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="string">"no-commit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>no_commit</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"don't automatically commit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="string">"edit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>edit</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"edit the commit message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_NOOP_NOARG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="string">"signoff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>signoff</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"add Signed-off-by:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_CALLBACK</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="string">"mainline"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"parent-number"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"select mainline parent"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option_parse_m</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_RERERE_AUTOUPDATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_auto</name></name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"strategy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"merge strategy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_CALLBACK</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="string">"strategy-option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"option"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"option for merge strategy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option_parse_x</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>OPTION_STRING</name></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="string">"gpg-sign"</literal></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign</name></name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"key-id"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"GPG sign commit"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <literal type="string">""</literal></expr> }</block></expr>,
<macro><name>OPT_END</name><argument_list>()</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>base_options</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>REPLAY_PICK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>cp_extra</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>record_origin</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"append commit name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>allow_ff</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow fast-forward"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"allow-empty"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>allow_empty</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"preserve initially empty commits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"allow-empty-message"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>allow_empty_message</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow commits with empty messages"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"keep-redundant-commits"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>keep_redundant_commits</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"keep redundant, empty commits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_END</name><argument_list>()</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parse_options_concat</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>cp_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>usage_str</name></expr></argument>,
<argument><expr><name>PARSE_OPT_KEEP_ARGV0</name> <operator>|</operator>
<name>PARSE_OPT_KEEP_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>keep_redundant_commits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_empty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cleanup_arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>default_msg_cleanup</name></name> <operator>=</operator> <call><name>get_cleanup_mode</name><argument_list>(<argument><expr><name>cleanup_arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>explicit_cleanup</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>this_operation</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_operation</name> <operator>=</operator> <literal type="string">"--quit"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_operation</name> <operator>=</operator> <literal type="string">"--continue"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_operation</name> <operator>=</operator> <literal type="string">"--skip"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cmd</name> <operator>==</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_operation</name> <operator>=</operator> <literal type="string">"--abort"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>verify_opt_compatible</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>this_operation</name></expr></argument>,
<argument><expr><literal type="string">"--no-commit"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>no_commit</name></name></expr></argument>,
<argument><expr><literal type="string">"--signoff"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>signoff</name></name></expr></argument>,
<argument><expr><literal type="string">"--mainline"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>mainline</name></name></expr></argument>,
<argument><expr><literal type="string">"--strategy"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"--strategy-option"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>xopts</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"-x"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>record_origin</name></name></expr></argument>,
<argument><expr><literal type="string">"--ff"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_ff</name></name></expr></argument>,
<argument><expr><literal type="string">"--rerere-autoupdate"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_auto</name></name> <operator>==</operator> <name>RERERE_AUTOUPDATE</name></expr></argument>,
<argument><expr><literal type="string">"--no-rerere-autoupdate"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_auto</name></name> <operator>==</operator> <name>RERERE_NOAUTOUPDATE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>allow_ff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verify_opt_compatible</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="string">"--ff"</literal></expr></argument>,
<argument><expr><literal type="string">"--signoff"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>signoff</name></name></expr></argument>,
<argument><expr><literal type="string">"--no-commit"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>no_commit</name></name></expr></argument>,
<argument><expr><literal type="string">"-x"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>record_origin</name></name></expr></argument>,
<argument><expr><literal type="string">"--edit"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>edit</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>revs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>setup_revision_opt</name></name></type> <name>s_r_opt</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>revs</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opts</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <name>REVISION_WALK_NO_WALK_UNSORTED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>usage_str</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"@{-1}"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_r_opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s_r_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s_r_opt</name><operator>.</operator><name>assume_dashdash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>setup_revisions</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_r_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>usage_str</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sequencer_remove_state</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_branch_state</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sequencer_continue</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sequencer_rollback</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sequencer_skip</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>sequencer_pick_revisions</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_revert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name></type> <name>opts</name> <init>= <expr><name>REPLAY_OPTS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>edit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>REPLAY_REVERT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sequencer_init_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>run_sequencer</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"revert failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_cherry_pick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name></type> <name>opts</name> <init>= <expr><name>REPLAY_OPTS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>REPLAY_PICK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sequencer_init_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>run_sequencer</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cherry-pick failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
