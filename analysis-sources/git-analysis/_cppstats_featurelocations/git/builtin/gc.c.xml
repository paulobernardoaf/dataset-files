<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\builtin\gc.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tempfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigchain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"promisor-remote.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAILED_RUN</name></cpp:macro> <cpp:value>"failed to run %s"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>builtin_gc_usage</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git gc [&lt;options&gt;]"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pack_refs</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prune_reflogs</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>aggressive_depth</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>aggressive_window</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gc_auto_threshold</name> <init>= <expr><literal type="number">6700</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gc_auto_pack_limit</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>detach_auto</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>timestamp_t</name></type> <name>gc_log_expire_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gc_log_expire</name> <init>= <expr><literal type="string">"1.day.ago"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prune_expire</name> <init>= <expr><literal type="string">"2.weeks.ago"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prune_worktrees_expire</name> <init>= <expr><literal type="string">"3.months.ago"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>big_pack_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>max_delta_cache_size</name> <init>= <expr><name>DEFAULT_DELTA_CACHE_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argv_array</name></name></type> <name>pack_refs_cmd</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argv_array</name></name></type> <name>reflog</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argv_array</name></name></type> <name>repack</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argv_array</name></name></type> <name>prune</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argv_array</name></name></type> <name>prune_worktrees</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argv_array</name></name></type> <name>rerere</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>pidfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lock_file</name></name></type> <name>log_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>pack_garbage</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_pack_garbage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pack_garbage</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>pack_garbage</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pack_garbage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_pack_garbage</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>seen_bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seen_bits</name> <operator>==</operator> <name>PACKDIR_FILE_IDX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pack_garbage</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_log_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>get_lock_file_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_lock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed to fstat %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_tempfile_path</name><argument_list>(<argument><expr><name><name>log_lock</name><operator>.</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>saved_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>git_path</name><argument_list>(<argument><expr><literal type="string">"gc.log"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_log_file_at_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_log_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_log_file_on_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>process_log_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gc_config_is_timestamp_never</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>expire</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_value</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>value</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_expiry_date</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expire</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse '%s' value '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>expire</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gc_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_value</name><argument_list>(<argument><expr><literal type="string">"gc.packrefs"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"notbare"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pack_refs</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pack_refs</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><literal type="string">"gc.packrefs"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gc_config_is_timestamp_never</name><argument_list>(<argument><expr><literal type="string">"gc.reflogexpire"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>gc_config_is_timestamp_never</name><argument_list>(<argument><expr><literal type="string">"gc.reflogexpireunreachable"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prune_reflogs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"gc.aggressivewindow"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>aggressive_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"gc.aggressivedepth"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>aggressive_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"gc.auto"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_auto_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"gc.autopacklimit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_auto_pack_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"gc.autodetach"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>detach_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_expiry</name><argument_list>(<argument><expr><literal type="string">"gc.pruneexpire"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prune_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_expiry</name><argument_list>(<argument><expr><literal type="string">"gc.worktreepruneexpire"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prune_worktrees_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_expiry</name><argument_list>(<argument><expr><literal type="string">"gc.logexpiry"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_log_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config_get_ulong</name><argument_list>(<argument><expr><literal type="string">"gc.bigpackthreshold"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>big_pack_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_ulong</name><argument_list>(<argument><expr><literal type="string">"pack.deltacachesize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_delta_cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_default_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>too_many_loose_objects</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auto_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_loose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hexsz_loose</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><call><name>git_path</name><argument_list>(<argument><expr><literal type="string">"objects/17"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>auto_threshold</name> <operator>=</operator> <call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name>gc_auto_threshold</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ent</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strspn</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"0123456789abcdef"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>hexsz_loose</name> <operator>||</operator>
<name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>hexsz_loose</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>num_loose</name> <operator>&gt;</operator> <name>auto_threshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>needed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>needed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>find_base_packs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>packs</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>get_all_packs</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pack_local</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pack_size</name></name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>packs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>base</name> <operator>||</operator> <name><name>base</name><operator>-&gt;</operator><name>pack_size</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>pack_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>packs</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>too_many_packs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gc_auto_pack_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <call><name>get_all_packs</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pack_local</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pack_keep</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>gc_auto_pack_limit</name> <operator>&lt;</operator> <name>cnt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>total_ram</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sysinfo</name></name></type> <name>si</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sysinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>si</name><operator>.</operator><name>totalram</name></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_SYSCTL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HW_MEMSIZE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HW_PHYSMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<decl_stmt><decl><type><name>int64_t</name></type> <name>physical_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_HW</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HW_MEMSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>HW_MEMSIZE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>HW_PHYSMEM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>physical_memory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>physical_memory</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GIT_WINDOWS_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>memInfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>memInfo</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MEMORYSTATUSEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GlobalMemoryStatusEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>memInfo</name><operator>.</operator><name>ullTotalPhys</name></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>estimate_repack_memory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nr_objects</name> <init>= <expr><call><name>approximate_object_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>os_cache</name></decl>, <decl><type ref="prev"/><name>heap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pack</name> <operator>||</operator> <operator>!</operator><name>nr_objects</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><name>os_cache</name> <operator>=</operator> <name><name>pack</name><operator>-&gt;</operator><name>pack_size</name></name> <operator>+</operator> <name><name>pack</name><operator>-&gt;</operator><name>index_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>heap</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>object_entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nr_objects</name></expr>;</expr_stmt>




<expr_stmt><expr><name>heap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>blob</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nr_objects</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>heap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>tree</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nr_objects</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>heap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>object</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nr_objects</name></expr>;</expr_stmt>

<expr_stmt><expr><name>heap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>revindex_entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nr_objects</name></expr>;</expr_stmt>




<expr_stmt><expr><name>heap</name> <operator>+=</operator> <name>delta_base_cache_limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>heap</name> <operator>+=</operator> <name>max_delta_cache_size</name></expr>;</expr_stmt>

<return>return <expr><name>os_cache</name> <operator>+</operator> <name>heap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keep_one_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"--keep-pack=%s"</literal></expr></argument>, <argument><expr><call><name>basename</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_repack_all_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>keep_pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prune_expire</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>prune_expire</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"-A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prune_expire</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"--unpack-unreachable=%s"</literal></expr></argument>, <argument><expr><name>prune_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_pack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>for_each_string_list</name><argument_list>(<argument><expr><name>keep_pack</name></expr></argument>, <argument><expr><name>keep_one_pack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_repack_incremental_option</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"--no-write-bitmap-index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>need_to_gc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>gc_auto_threshold</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>too_many_packs</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>keep_pack</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>big_pack_threshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_base_packs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><name>big_pack_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>keep_pack</name><operator>.</operator><name>nr</name></name> <operator>&gt;=</operator> <name>gc_auto_pack_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>big_pack_threshold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_base_packs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>find_base_packs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mem_have</name></decl>, <decl><type ref="prev"/><name>mem_want</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mem_have</name> <operator>=</operator> <call><name>total_ram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mem_want</name> <operator>=</operator> <call><name>estimate_repack_memory</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mem_have</name> <operator>||</operator> <name>mem_want</name> <operator>&lt;</operator> <name>mem_have</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_repack_all_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>too_many_loose_objects</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_repack_incremental_option</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>run_hook_le</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pre-auto-gc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lock_repo_for_gc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>pid_t</name><modifier>*</modifier></type> <name>ret_pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>my_host</name><index>[<expr><name>HOST_NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidfile_path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_tempfile_active</name><argument_list>(<argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xgethostname</name><argument_list>(<argument><expr><name>my_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>my_host</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>my_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>my_host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pidfile_path</name> <operator>=</operator> <call><name>git_pathdup</name><argument_list>(<argument><expr><literal type="string">"gc.pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>pidfile_path</name></expr></argument>,
<argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>locking_host</name><index>[<expr><name>HOST_NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>scan_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>should_exit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scan_fmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scan_fmt</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s %%%ds"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNuMAX</name></expr></argument>, <argument><expr><name>HOST_NAME_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pidfile_path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>locking_host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>locking_host</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>should_exit</name> <operator>=</operator>
<name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>









<call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">3600</literal> <operator>&amp;&amp;</operator>
<call><name>fscanf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>scan_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><name>locking_host</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>locking_host</name></expr></argument>, <argument><expr><name>my_host</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EPERM</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>should_exit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pidfile_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>locking_host</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name><literal type="string">" %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>my_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pidfile</name> <operator>=</operator> <call><name>register_tempfile</name><argument_list>(<argument><expr><name>pidfile_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pidfile_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>report_last_gc_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gc_log_path</name> <init>= <expr><call><name>git_pathdup</name><argument_list>(<argument><expr><literal type="string">"gc.log"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>gc_log_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot stat '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc_log_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;</operator> <name>gc_log_expire_time</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>gc_log_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc_log_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The last gc run reported the following. "</literal>
<literal type="string">"Please correct the root cause\n"</literal>
<literal type="string">"and remove %s.\n"</literal>
<literal type="string">"Automatic cleanup will not be performed "</literal>
<literal type="string">"until the file is removed.\n\n"</literal>
<literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>gc_log_path</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gc_log_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gc_before_repack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pack_refs</name> <operator>&amp;&amp;</operator> <call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>pack_refs_cmd</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>FAILED_RUN</name></expr></argument>, <argument><expr><name><name>pack_refs_cmd</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prune_reflogs</name> <operator>&amp;&amp;</operator> <call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>reflog</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>FAILED_RUN</name></expr></argument>, <argument><expr><name><name>reflog</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_gc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aggressive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auto_gc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quiet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>daemonized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep_base_pack</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>builtin_gc_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>OPT__QUIET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quiet</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"suppress progress reporting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>OPTION_STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"prune"</literal></expr>, <expr><operator>&amp;</operator><name>prune_expire</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"prune unreferenced objects"</literal></expr></argument>)</argument_list></call></expr>,
<expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>prune_expire</name></expr> }</block></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"aggressive"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>aggressive</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"be more thorough (increased runtime)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>auto_gc</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"enable auto-gc mode"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PARSE_OPT_NOCOMPLETE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"force"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>force</name></expr></argument>,
<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force running gc even if there may be another gc running"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PARSE_OPT_NOCOMPLETE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"keep-largest-pack"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keep_base_pack</name></expr></argument>,
<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"repack all other packs except the largest pack"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>OPT_END</name><argument_list>()</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_gc_usage</name></expr></argument>, <argument><expr><name>builtin_gc_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pack_refs_cmd</name></expr></argument>, <argument><expr><literal type="string">"pack-refs"</literal></expr></argument>, <argument><expr><literal type="string">"--all"</literal></expr></argument>, <argument><expr><literal type="string">"--prune"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog</name></expr></argument>, <argument><expr><literal type="string">"reflog"</literal></expr></argument>, <argument><expr><literal type="string">"expire"</literal></expr></argument>, <argument><expr><literal type="string">"--all"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"repack"</literal></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune</name></expr></argument>, <argument><expr><literal type="string">"prune"</literal></expr></argument>, <argument><expr><literal type="string">"--expire"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune_worktrees</name></expr></argument>, <argument><expr><literal type="string">"worktree"</literal></expr></argument>, <argument><expr><literal type="string">"prune"</literal></expr></argument>, <argument><expr><literal type="string">"--expire"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rerere</name></expr></argument>, <argument><expr><literal type="string">"rerere"</literal></expr></argument>, <argument><expr><literal type="string">"gc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>gc_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_expiry_date</name><argument_list>(<argument><expr><name>gc_log_expire</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_log_expire_time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse gc.logexpiry value %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc_log_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pack_refs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pack_refs</name> <operator>=</operator> <operator>!</operator><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>builtin_gc_options</name></expr></argument>,
<argument><expr><name>builtin_gc_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_gc_usage</name></expr></argument>, <argument><expr><name>builtin_gc_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prune_expire</name> <operator>&amp;&amp;</operator> <call><name>parse_expiry_date</name><argument_list>(<argument><expr><name>prune_expire</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse prune expiry value %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prune_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aggressive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"-f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aggressive_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"--depth=%d"</literal></expr></argument>, <argument><expr><name>aggressive_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>aggressive_window</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"--window=%d"</literal></expr></argument>, <argument><expr><name>aggressive_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>repack</name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto_gc</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>need_to_gc</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>detach_auto</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Auto packing the repository in background for optimum performance.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Auto packing the repository for optimum performance.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"See \"git help gc\" for manual housekeeping.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>detach_auto</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>report_last_gc_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lock_repo_for_gc</name><argument_list>(<argument><expr><name>force</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gc_before_repack</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>delete_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>daemonized</name> <operator>=</operator> <operator>!</operator><call><name>daemonize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>keep_pack</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_base_pack</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>keep_base_pack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>find_base_packs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>big_pack_threshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_base_packs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><name>big_pack_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_repack_all_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keep_pack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>lock_repo_for_gc</name><argument_list>(<argument><expr><name>force</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto_gc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"gc is already running on machine '%s' pid %"</literal><name>PRIuMAX</name><literal type="string">" (use --force if not)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>daemonized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_lock</name></expr></argument>,
<argument><expr><call><name>git_path</name><argument_list>(<argument><expr><literal type="string">"gc.log"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><call><name>get_lock_file_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_lock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigchain_push_common</name><argument_list>(<argument><expr><name>process_log_file_on_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>process_log_file_at_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gc_before_repack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>repository_format_precious_objects</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_object_store</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>repack</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>FAILED_RUN</name></expr></argument>, <argument><expr><name><name>repack</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prune_expire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune</name></expr></argument>, <argument><expr><name>prune_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune</name></expr></argument>, <argument><expr><literal type="string">"--no-progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>has_promisor_remote</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune</name></expr></argument>,
<argument><expr><literal type="string">"--exclude-promisor-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>prune</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>FAILED_RUN</name></expr></argument>, <argument><expr><name><name>prune</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prune_worktrees_expire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune_worktrees</name></expr></argument>, <argument><expr><name>prune_worktrees_expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>prune_worktrees</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>FAILED_RUN</name></expr></argument>, <argument><expr><name><name>prune_worktrees</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>rerere</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>FAILED_RUN</name></expr></argument>, <argument><expr><name><name>rerere</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>report_garbage</name> <operator>=</operator> <name>report_pack_garbage</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reprepare_packed_git</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pack_garbage</name><operator>.</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_object_store</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_pack_garbage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prepare_repo_settings</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>the_repository</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>gc_write_commit_graph</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_commit_graph_reachable</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><name>quiet</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>daemonized</name></expr> ?</condition><then> <expr><name>COMMIT_GRAPH_WRITE_PROGRESS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto_gc</name> <operator>&amp;&amp;</operator> <call><name>too_many_loose_objects</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"There are too many unreachable loose objects; "</literal>
<literal type="string">"run 'git prune' to remove them."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>daemonized</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>git_path</name><argument_list>(<argument><expr><literal type="string">"gc.log"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
