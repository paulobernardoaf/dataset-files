<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\dir-iterator.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir-iterator.h"</cpp:file></cpp:include>

<struct>struct <name>dir_iterator_level</name> <block>{
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>dir_iterator_int</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>size_t</name></type> <name>levels_nr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>levels_alloc</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_level</name></name> <modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>







<function><type><specifier>static</specifier> <name>int</name></type> <name>push_level</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dir_iterator_int</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_level</name></name> <modifier>*</modifier></type><name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>level</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning_errno</name><argument_list>(<argument><expr><literal type="string">"error opening directory '%s'"</literal></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>pop_level</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dir_iterator_int</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_level</name></name> <modifier>*</modifier></type><name>level</name> <init>=
<expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name> <operator>&amp;&amp;</operator> <call><name>closedir</name><argument_list>(<argument><expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning_errno</name><argument_list>(<argument><expr><literal type="string">"error closing directory '%s'"</literal></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>--</operator><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>prepare_next_entry_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dir_iterator_int</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>saved_errno</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>relative_path</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name> <operator>+</operator>
<name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prefix_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>basename</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name> <operator>+</operator>
<name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prefix_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIR_ITERATOR_FOLLOW_SYMLINKS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning_errno</name><argument_list>(<argument><expr><literal type="string">"failed to stat '%s'"</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dir_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dir_iterator</name></name> <modifier>*</modifier></type><name>dir_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_int</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>dir_iterator_int</name> <operator>*</operator><operator>)</operator><name>dir_iterator</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>push_level</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIR_ITERATOR_PEDANTIC</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_level</name></name> <modifier>*</modifier></type><name>level</name> <init>=
<expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>level</name><operator>-&gt;</operator><name>prefix_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>de</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning_errno</name><argument_list>(<argument><expr><literal type="string">"error reading directory '%s'"</literal></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIR_ITERATOR_PEDANTIC</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>pop_level</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>dir_iterator_abort</name><argument_list>(<argument><expr><name>dir_iterator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_dot_or_dotdot</name><argument_list>(<argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prepare_next_entry_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIR_ITERATOR_PEDANTIC</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_out</name>;</goto></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ITER_OK</name></expr>;</return>
</block_content>}</block></while>

<label><name>error_out</name>:</label>
<expr_stmt><expr><call><name>dir_iterator_abort</name><argument_list>(<argument><expr><name>dir_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ITER_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dir_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dir_iterator</name></name> <modifier>*</modifier></type><name>dir_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_int</name></name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><operator>(</operator>struct <name>dir_iterator_int</name> <operator>*</operator><operator>)</operator><name>dir_iterator</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_level</name></name> <modifier>*</modifier></type><name>level</name> <init>=
<expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name> <operator>&amp;&amp;</operator> <call><name>closedir</name><argument_list>(<argument><expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>level</name><operator>-&gt;</operator><name>prefix_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warning_errno</name><argument_list>(<argument><expr><literal type="string">"error closing directory '%s'"</literal></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ITER_DONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dir_iterator</name></name> <modifier>*</modifier></type><name>dir_iterator_begin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator_int</name></name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator</name></name> <modifier>*</modifier></type><name>dir_iterator</name> <init>= <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>st</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>error_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt>
<goto>goto <name>error_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dir_iterator</name></expr>;</return>

<label><name>error_out</name>:</label>
<expr_stmt><expr><call><name>dir_iterator_abort</name><argument_list>(<argument><expr><name>dir_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
