<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\khash.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AC_KHASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__AC_KHASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_VERSION_KHASH_H</name></cpp:macro> <cpp:value>"0.2.8"</cpp:value></cpp:define>

<typedef>typedef <type><name>uint32_t</name></type> <name>khint32_t</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>khint64_t</name>;</typedef>

<typedef>typedef <type><name>khint32_t</name></type> <name>khint_t</name>;</typedef>
<typedef>typedef <type><name>khint_t</name></type> <name>khiter_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_isempty</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flag[i&gt;&gt;4]&gt;&gt;((i&amp;0xfU)&lt;&lt;1))&amp;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_isdel</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flag[i&gt;&gt;4]&gt;&gt;((i&amp;0xfU)&lt;&lt;1))&amp;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_iseither</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flag[i&gt;&gt;4]&gt;&gt;((i&amp;0xfU)&lt;&lt;1))&amp;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isdel_false</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]&amp;=~(1ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isempty_false</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]&amp;=~(2ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isboth_false</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]&amp;=~(3ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isdel_true</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]|=1ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_fsize</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((m) &lt; 16? 1 : (m)&gt;&gt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kroundup32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(--(x), (x)|=(x)&gt;&gt;1, (x)|=(x)&gt;&gt;2, (x)|=(x)&gt;&gt;4, (x)|=(x)&gt;&gt;8, (x)|=(x)&gt;&gt;16, ++(x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>khint_t</name></type> <name>__ac_X31_hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khint_t</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>khint_t</name><operator>)</operator><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><expr><operator>++</operator><name>s</name></expr> ;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>h</name> <operator>+</operator> <operator>(</operator><name>khint_t</name><operator>)</operator><operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_str_hash_func</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__ac_X31_hash_string(key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_str_hash_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strcmp(a, b) == 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>__ac_HASH_UPPER</name> <init>= <expr><literal type="number">0.77</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KHASH_TYPE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; khkey_t *keys; khval_t *vals; } kh_##name##_t;</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KHASH_PROTOTYPES</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_##name##_t *kh_init_##name(void); void kh_destroy_##name(kh_##name##_t *h); void kh_clear_##name(kh_##name##_t *h); khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key); int kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets); khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret); void kh_del_##name(kh_##name##_t *h, khint_t x);</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KHASH_IMPL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>SCOPE</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>, <parameter><type><name>kh_is_map</name></type></parameter>, <parameter><type><name>__hash_func</name></type></parameter>, <parameter><type><name>__hash_equal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SCOPE kh_##name##_t *kh_init_##name(void) { return (kh_##name##_t*)xcalloc(1, sizeof(kh_##name##_t)); } SCOPE void kh_release_##name(kh_##name##_t *h) { free(h-&gt;flags); free((void *)h-&gt;keys); free((void *)h-&gt;vals); } SCOPE void kh_destroy_##name(kh_##name##_t *h) { if (h) { kh_release_##name(h); free(h); } } SCOPE void kh_clear_##name(kh_##name##_t *h) { if (h &amp;&amp; h-&gt;flags) { memset(h-&gt;flags, 0xaa, __ac_fsize(h-&gt;n_buckets) * sizeof(khint32_t)); h-&gt;size = h-&gt;n_occupied = 0; } } SCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) { if (h-&gt;n_buckets) { khint_t k, i, last, mask, step = 0; mask = h-&gt;n_buckets - 1; k = __hash_func(key); i = k &amp; mask; last = i; while (!__ac_isempty(h-&gt;flags, i) &amp;&amp; (__ac_isdel(h-&gt;flags, i) || !__hash_equal(h-&gt;keys[i], key))) { i = (i + (++step)) &amp; mask; if (i == last) return h-&gt;n_buckets; } return __ac_iseither(h-&gt;flags, i)? h-&gt;n_buckets : i; } else return 0; } SCOPE int kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) { khint32_t *new_flags = NULL; khint_t j = 1; { kroundup32(new_n_buckets); if (new_n_buckets &lt; 4) new_n_buckets = 4; if (h-&gt;size &gt;= (khint_t)(new_n_buckets * __ac_HASH_UPPER + 0.5)) j = 0; else { ALLOC_ARRAY(new_flags, __ac_fsize(new_n_buckets)); if (!new_flags) return -1; memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); if (h-&gt;n_buckets &lt; new_n_buckets) { REALLOC_ARRAY(h-&gt;keys, new_n_buckets); if (kh_is_map) { REALLOC_ARRAY(h-&gt;vals, new_n_buckets); } } } } if (j) { for (j = 0; j != h-&gt;n_buckets; ++j) { if (__ac_iseither(h-&gt;flags, j) == 0) { khkey_t key = h-&gt;keys[j]; khval_t val; khint_t new_mask; new_mask = new_n_buckets - 1; if (kh_is_map) val = h-&gt;vals[j]; __ac_set_isdel_true(h-&gt;flags, j); while (1) { khint_t k, i, step = 0; k = __hash_func(key); i = k &amp; new_mask; while (!__ac_isempty(new_flags, i)) i = (i + (++step)) &amp; new_mask; __ac_set_isempty_false(new_flags, i); if (i &lt; h-&gt;n_buckets &amp;&amp; __ac_iseither(h-&gt;flags, i) == 0) { { khkey_t tmp = h-&gt;keys[i]; h-&gt;keys[i] = key; key = tmp; } if (kh_is_map) { khval_t tmp = h-&gt;vals[i]; h-&gt;vals[i] = val; val = tmp; } __ac_set_isdel_true(h-&gt;flags, i); } else { h-&gt;keys[i] = key; if (kh_is_map) h-&gt;vals[i] = val; break; } } } } if (h-&gt;n_buckets &gt; new_n_buckets) { REALLOC_ARRAY(h-&gt;keys, new_n_buckets); if (kh_is_map) REALLOC_ARRAY(h-&gt;vals, new_n_buckets); } free(h-&gt;flags); h-&gt;flags = new_flags; h-&gt;n_buckets = new_n_buckets; h-&gt;n_occupied = h-&gt;size; h-&gt;upper_bound = (khint_t)(h-&gt;n_buckets * __ac_HASH_UPPER + 0.5); } return 0; } SCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) { khint_t x; if (h-&gt;n_occupied &gt;= h-&gt;upper_bound) { if (h-&gt;n_buckets &gt; (h-&gt;size&lt;&lt;1)) { if (kh_resize_##name(h, h-&gt;n_buckets - 1) &lt; 0) { *ret = -1; return h-&gt;n_buckets; } } else if (kh_resize_##name(h, h-&gt;n_buckets + 1) &lt; 0) { *ret = -1; return h-&gt;n_buckets; } } { khint_t k, i, site, last, mask = h-&gt;n_buckets - 1, step = 0; x = site = h-&gt;n_buckets; k = __hash_func(key); i = k &amp; mask; if (__ac_isempty(h-&gt;flags, i)) x = i; else { last = i; while (!__ac_isempty(h-&gt;flags, i) &amp;&amp; (__ac_isdel(h-&gt;flags, i) || !__hash_equal(h-&gt;keys[i], key))) { if (__ac_isdel(h-&gt;flags, i)) site = i; i = (i + (++step)) &amp; mask; if (i == last) { x = site; break; } } if (x == h-&gt;n_buckets) { if (__ac_isempty(h-&gt;flags, i) &amp;&amp; site != h-&gt;n_buckets) x = site; else x = i; } } } if (__ac_isempty(h-&gt;flags, x)) { h-&gt;keys[x] = key; __ac_set_isboth_false(h-&gt;flags, x); ++h-&gt;size; ++h-&gt;n_occupied; *ret = 1; } else if (__ac_isdel(h-&gt;flags, x)) { h-&gt;keys[x] = key; __ac_set_isboth_false(h-&gt;flags, x); ++h-&gt;size; *ret = 2; } else *ret = 0; return x; } SCOPE void kh_del_##name(kh_##name##_t *h, khint_t x) { if (x != h-&gt;n_buckets &amp;&amp; !__ac_iseither(h-&gt;flags, x)) { __ac_set_isdel_true(h-&gt;flags, x); --h-&gt;size; } }</cpp:value></cpp:define>


















































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_DECLARE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__KHASH_TYPE(name, khkey_t, khval_t) __KHASH_PROTOTYPES(name, khkey_t, khval_t)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_INIT2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>SCOPE</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>, <parameter><type><name>kh_is_map</name></type></parameter>, <parameter><type><name>__hash_func</name></type></parameter>, <parameter><type><name>__hash_equal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__KHASH_TYPE(name, khkey_t, khval_t) __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>, <parameter><type><name>kh_is_map</name></type></parameter>, <parameter><type><name>__hash_func</name></type></parameter>, <parameter><type><name>__hash_equal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_exist</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!__ac_iseither((h)-&gt;flags, (x)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_key</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;keys[x])</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_val</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;vals[x])</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_value</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;vals[x])</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_begin</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(khint_t)(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_end</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;n_buckets)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_size</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;size)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_n_buckets</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;n_buckets)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_foreach</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>kvar</name></type></parameter>, <parameter><type><name>vvar</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ khint_t __i; for (__i = kh_begin(h); __i != kh_end(h); ++__i) { if (!kh_exist(h,__i)) continue; (kvar) = kh_key(h,__i); (vvar) = kh_val(h,__i); code; } }</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_foreach_value</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>vvar</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ khint_t __i; for (__i = kh_begin(h); __i != kh_end(h); ++__i) { if (!kh_exist(h,__i)) continue; (vvar) = kh_val(h,__i); code; } }</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>oidhash_by_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>oidhash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>oideq_by_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>KHASH_INIT</name><argument_list>(<argument>oid_set</argument>, <argument>struct object_id</argument>, <argument>int</argument>, <argument><literal type="number">0</literal></argument>, <argument>oidhash_by_value</argument>, <argument>oideq_by_value</argument>)</argument_list></macro>

<macro><name>KHASH_INIT</name><argument_list>(<argument>oid_map</argument>, <argument>struct object_id</argument>, <argument>void *</argument>, <argument><literal type="number">1</literal></argument>, <argument>oidhash_by_value</argument>, <argument>oideq_by_value</argument>)</argument_list></macro>

<macro><name>KHASH_INIT</name><argument_list>(<argument>oid_pos</argument>, <argument>struct object_id</argument>, <argument>int</argument>, <argument><literal type="number">1</literal></argument>, <argument>oidhash_by_value</argument>, <argument>oideq_by_value</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
