<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\resolve-undo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resolve-undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>


<function><type><name>void</name></type> <name>record_resolve_undo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>lost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>resolve_undo_info</name></name> <modifier>*</modifier></type><name>ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>resolve_undo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stage</name> <init>= <expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stage</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>resolve_undo</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>resolve_undo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolve_undo</name><operator>-&gt;</operator><name>strdup_strings</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name> <operator>=</operator> <name>resolve_undo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>resolve_undo</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lost</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><name>resolve_undo</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lost</name><operator>-&gt;</operator><name>util</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lost</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ui</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ui</name> <operator>=</operator> <name><name>lost</name><operator>-&gt;</operator><name>util</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ui</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>stage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>stage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resolve_undo_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>resolve_undo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>resolve_undo</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>resolve_undo_info</name></name> <modifier>*</modifier></type><name>ui</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ui</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%o%c"</literal></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>resolve_undo_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>resolve_undo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>rawsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>resolve_undo</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>resolve_undo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolve_undo</name><operator>-&gt;</operator><name>strdup_strings</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>lost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>resolve_undo_info</name></name> <modifier>*</modifier></type><name>ui</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lost</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><name>resolve_undo</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lost</name><operator>-&gt;</operator><name>util</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lost</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ui</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ui</name> <operator>=</operator> <name><name>lost</name><operator>-&gt;</operator><name>util</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ui</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>endptr</name> <operator>||</operator> <name>endptr</name> <operator>==</operator> <name>data</name> <operator>||</operator> <operator>*</operator><name>endptr</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>endptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ui</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>rawsz</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oidread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ui</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>rawsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>rawsz</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<return>return <expr><name>resolve_undo</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><name>resolve_undo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Index records invalid resolve-undo information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resolve_undo_clear_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>resolve_undo</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resolve_undo</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><name>resolve_undo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>resolve_undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_changed</name></name> <operator>|=</operator> <name>RESOLVE_UNDO_CHANGED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>unmerge_index_entry_at</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>resolve_undo_info</name></name> <modifier>*</modifier></type><name>ru</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_lookup</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ru</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ru</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_MATCHED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove_index_entry_at</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>nce</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ru</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nce</name> <operator>=</operator> <call><name>make_cache_entry</name><argument_list>(<argument><expr><name>istate</name></expr></argument>,
<argument><expr><name><name>ru</name><operator>-&gt;</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ru</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_MATCHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_index_entry</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>nce</name></expr></argument>, <argument><expr><name>ADD_CACHE_OK_TO_ADD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot unmerge '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>unmerge_index_entry_at</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>unmerge_marked_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_MATCHED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>unmerge_index_entry_at</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>unmerge_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>resolve_undo</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_path_match</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>pathspec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>unmerge_index_entry_at</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
