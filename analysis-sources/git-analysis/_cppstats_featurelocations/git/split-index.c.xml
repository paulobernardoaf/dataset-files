<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\split-index.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"split-index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewah/ewok.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>init_split_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_link_extension</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"corrupt link extension (too short)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>init_split_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>base_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ewah_read_mmap</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"corrupt delete bitmap in link extension"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ewah_read_mmap</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"corrupt replace bitmap in link extension"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"garbage at the end of link extension"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>write_link_extension</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>base_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ewah_serialize_strbuf</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_serialize_strbuf</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_base_index_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>move_cache_to_base_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator>
<name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mem_pool_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>istate</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mem_pool_combine</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>si</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ce_mem_pool</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>ce_mem_pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mark_base_index_entries</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CE_UPDATE_IN_BASE</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_entry_for_delete</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"position for delete %d exceeds base index size %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pos</name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>|=</operator> <name>CE_REMOVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>nr_deletions</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>replace_entry</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"position for replacement %d exceeds base index size %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pos</name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>nr_replacements</name></name> <operator>&gt;=</operator> <name><name>si</name><operator>-&gt;</operator><name>saved_cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"too many replacements (%d vs %d)"</literal></expr></argument>,
<argument><expr><name><name>si</name><operator>-&gt;</operator><name>nr_replacements</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_REMOVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"entry %d is marked as both replaced and deleted"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>saved_cache</name><index>[<expr><name><name>si</name><operator>-&gt;</operator><name>nr_replacements</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"corrupt link extension, entry %d should have "</literal>
<literal type="string">"zero length name"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UPDATE_IN_BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>ce_namelen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_cache_entry</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>nr_replacements</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>merge_base_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mark_base_index_entries</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache_nr</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>nr_deletions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>nr_replacements</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_each_bit</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name></expr></argument>, <argument><expr><name>replace_entry</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_each_bit</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name></expr></argument>, <argument><expr><name>mark_entry_for_delete</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>nr_deletions</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_marked_cache_entries</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_replacements</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>saved_cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_namelen</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"corrupt link extension, entry %d should "</literal>
<literal type="string">"have non-zero length name"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_index_entry</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ADD_CACHE_OK_TO_ADD</name> <operator>|</operator>
<name>ADD_CACHE_KEEP_CACHE_TREE</name> <operator>|</operator>





<name>ADD_CACHE_SKIP_DFCHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_ce_content</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>ondisk_flags</name> <init>= <expr><name>CE_STAGEMASK</name> <operator>|</operator> <name>CE_VALID</name> <operator>|</operator>
<name>CE_EXTENDED_FLAGS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ce_flags</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>ce_flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>base_flags</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>ce_flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <name>ondisk_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <name>ondisk_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ce_stat_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>ce_stat_data</name></name></expr></argument>,
<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>cache_entry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>offsetof</name><argument_list>(<argument><expr>struct <name>cache_entry</name></expr></argument>, <argument><expr><name>ce_stat_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <name>ce_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <name>base_flags</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>prepare_to_write_split_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>init_split_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nr_entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ce</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>


















<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;</operator> <name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"ce refers to a shared ce at %d, which is beyond the shared index size %d"</literal></expr></argument>,
<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_MATCHED</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>ce</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ce</name> <operator>==</operator> <name>base</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE_IN_BASE</name></expr>)</condition> <block>{<block_content>










</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ce_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>is_racy_timestamp</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UPDATE_IN_BASE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>!=</operator> <name><name>base</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE_IN_BASE</name></expr>)</condition> <block>{<block_content>









</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ce_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>is_racy_timestamp</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UPDATE_IN_BASE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>









<if_stmt><if>if <condition>(<expr><call><name>compare_ce_content</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UPDATE_IN_BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>ce</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_REMOVE</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_MATCHED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ewah_set</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE_IN_BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ewah_set</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_STRIP_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>nr_entries</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nr_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>nr_entries</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>drop_cache_tree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>base</name></name> <operator>||</operator> <operator>!</operator><name><name>ce</name><operator>-&gt;</operator><name>index</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_REMOVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_STRIP_NAME</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>nr_entries</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nr_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>nr_entries</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_MATCHED</name></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>saved_cache_nr</name></name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>=</operator> <name>nr_entries</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>finish_writing_split_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>init_split_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>delete_bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>replace_bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>saved_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>saved_cache_nr</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>discard_split_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>si</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>discard_index</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>save_or_free_index_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;&amp;</operator>
<name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name> <operator>&amp;&amp;</operator>
<name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator>
<name><name>ce</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;=</operator> <name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>&amp;&amp;</operator>
<name>ce</name> <operator>==</operator> <name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>ce</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_REMOVE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>replace_index_entry_in_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>old_entry</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>new_entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>old_entry</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;&amp;</operator>
<name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name> <operator>&amp;&amp;</operator>
<name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator>
<name><name>old_entry</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;=</operator> <name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>old_entry</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_entry</name> <operator>!=</operator> <name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>new_entry</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>new_entry</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>new_entry</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>new_entry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_split_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_split_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_changed</name></name> <operator>|=</operator> <name>SPLIT_INDEX_ORDERED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_split_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>mem_pool_combine</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr></argument>,
<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ce_mem_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>split_index</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>discard_split_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_changed</name></name> <operator>|=</operator> <name>SOMETHING_CHANGED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
