<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\reflog-walk.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"reflog-walk.h"</cpp:file></cpp:include>

<struct>struct <name>complete_reflogs</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_ref</name></decl>;</decl_stmt>
<struct>struct <name>reflog_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>ooid</name></decl>, <decl><type ref="prev"/><name>noid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>email</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>items</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_one_reflog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>ooid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>noid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>email</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>complete_reflogs</name></name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_info</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>items</name></name> <operator>+</operator> <name><name>array</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>ooid</name></name></expr></argument>, <argument><expr><name>ooid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>noid</name></name></expr></argument>, <argument><expr><name>noid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>email</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>email</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>tz</name></name> <operator>=</operator> <name>tz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_complete_reflog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>complete_reflogs</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>email</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>complete_reflogs</name></name> <modifier>*</modifier></type><name>read_complete_reflog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>complete_reflogs</name></name> <modifier>*</modifier></type><name>reflogs</name> <init>=
<expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>complete_reflogs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>reflogs</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_reflog_ent</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>read_one_reflog</name></expr></argument>, <argument><expr><name>reflogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reflogs</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>name_to_free</name></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>name_to_free</name> <operator>=</operator> <call><name>resolve_refdup</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>RESOLVE_REF_READING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>for_each_reflog_ent</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>read_one_reflog</name></expr></argument>, <argument><expr><name>reflogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reflogs</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refname</name> <init>= <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"refs/%s"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>for_each_reflog_ent</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>read_one_reflog</name></expr></argument>, <argument><expr><name>reflogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reflogs</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>refname</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"refs/heads/%s"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_reflog_ent</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>read_one_reflog</name></expr></argument>, <argument><expr><name>reflogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>reflogs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_reflog_recno_by_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>complete_reflogs</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
<parameter><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&gt;=</operator> <name><name>array</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>commit_reflog</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>recno</name></decl>;</decl_stmt>
<enum>enum <name>selector_type</name> <block>{
<decl><name>SELECTOR_NONE</name></decl>,
<decl><name>SELECTOR_INDEX</name></decl>,
<decl><name>SELECTOR_DATE</name></decl>
}</block> <decl><name>selector</name></decl>;</enum>
<decl_stmt><decl><type><name><name>struct</name> <name>complete_reflogs</name></name> <modifier>*</modifier></type><name>reflogs</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>reflog_walk_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>logs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>complete_reflogs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>last_commit_reflog</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>init_reflog_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>reflog_walk_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>info</name><operator>)</operator><operator>-&gt;</operator><name><name>complete_reflogs</name><operator>.</operator><name>strdup_strings</name></name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_reflog_for_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>recno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>complete_reflogs</name></name> <modifier>*</modifier></type><name>reflogs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>branch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>at</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>commit_reflog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>selector_type</name></name></type> <name>selector</name> <init>= <expr><name>SELECTOR_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot walk reflogs for %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>branch</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&amp;&amp;</operator> <name><name>at</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>branch</name><index>[<expr><name>at</name> <operator>-</operator> <name>name</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>recno</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>at</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>recno</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>approxidate</name><argument_list>(<argument><expr><name>at</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>selector</name> <operator>=</operator> <name>SELECTOR_DATE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>selector</name> <operator>=</operator> <name>SELECTOR_INDEX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>recno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>complete_reflogs</name></name></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reflogs</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>branch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>branch</name> <operator>=</operator> <call><name>resolve_refdup</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>branch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"no current branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reflogs</name> <operator>=</operator> <call><name>read_complete_reflog</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reflogs</name> <operator>||</operator> <name><name>reflogs</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dwim_log</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_complete_reflog</name><argument_list>(<argument><expr><name>reflogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>branch</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reflogs</name> <operator>=</operator> <call><name>read_complete_reflog</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reflogs</name> <operator>||</operator> <name><name>reflogs</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_complete_reflog</name><argument_list>(<argument><expr><name>reflogs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>complete_reflogs</name></name></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>util</name>
<operator>=</operator> <name>reflogs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>commit_reflog</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>commit_reflog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>recno</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name> <operator>=</operator> <call><name>get_reflog_recno_by_time</name><argument_list>(<argument><expr><name>reflogs</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>commit_reflog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name> <operator>=</operator> <name><name>reflogs</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name>recno</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>selector</name></name> <operator>=</operator> <name>selector</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name></name> <operator>=</operator> <name>reflogs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>logs</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>logs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>commit_reflog</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_reflog_selector</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>reflog_info</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>dmode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_date</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shorten</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>commit_reflog</name> <init>= <expr><name><name>reflog_info</name><operator>-&gt;</operator><name>last_commit_reflog</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>printed_ref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit_reflog</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shorten</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>short_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>short_ref</name></name>
<operator>=</operator> <call><name>shorten_unambiguous_ref</name><argument_list>(<argument><expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>printed_ref</name> <operator>=</operator> <name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>short_ref</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>printed_ref</name> <operator>=</operator> <name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s@{"</literal></expr></argument>, <argument><expr><name>printed_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>selector</name></name> <operator>==</operator> <name>SELECTOR_DATE</name> <operator>||</operator>
<operator>(</operator><name><name>commit_reflog</name><operator>-&gt;</operator><name>selector</name></name> <operator>==</operator> <name>SELECTOR_NONE</name> <operator>&amp;&amp;</operator> <name>force_date</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>show_date</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>tz</name></name></expr></argument>, <argument><expr><name>dmode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>nr</name></name>
<operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_reflog_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>reflog_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>commit_reflog</name> <init>= <expr><name><name>reflog_info</name><operator>-&gt;</operator><name>last_commit_reflog</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit_reflog</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>message</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_reflog_ident</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>reflog_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>commit_reflog</name> <init>= <expr><name><name>reflog_info</name><operator>-&gt;</operator><name>last_commit_reflog</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit_reflog</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>email</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>timestamp_t</name></type> <name>get_reflog_timestamp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>reflog_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>commit_reflog</name> <init>= <expr><name><name>reflog_info</name><operator>-&gt;</operator><name>last_commit_reflog</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit_reflog</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_reflog_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>reflog_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oneline</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>dmode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reflog_info</name> <operator>&amp;&amp;</operator> <name><name>reflog_info</name><operator>-&gt;</operator><name>last_commit_reflog</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>commit_reflog</name> <init>= <expr><name><name>reflog_info</name><operator>-&gt;</operator><name>last_commit_reflog</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>selector</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit_reflog</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>commit_reflog</name><operator>-&gt;</operator><name>recno</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_reflog_selector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>, <argument><expr><name>reflog_info</name></expr></argument>, <argument><expr><name>dmode</name></expr></argument>, <argument><expr><name>force_date</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oneline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>selector</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Reflog: %s (%s)\nReflog message: %s"</literal></expr></argument>,
<argument><expr><name><name>selector</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>email</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>reflog_walk_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name>info</name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>nr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>next_reflog_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name><name>log</name><operator>-&gt;</operator><name>recno</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>log</name><operator>-&gt;</operator><name>recno</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>reflog_info</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>log</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>log</name><operator>-&gt;</operator><name>recno</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>noid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>obj</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>timestamp_t</name></type> <name>log_timestamp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>log</name><operator>-&gt;</operator><name>reflogs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>log</name><operator>-&gt;</operator><name>recno</name></name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>next_reflog_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>reflog_walk_info</name></name> <modifier>*</modifier></type><name>walk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>best</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>best_commit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>walk</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_reflog</name></name> <modifier>*</modifier></type><name>log</name> <init>= <expr><name><name>walk</name><operator>-&gt;</operator><name>logs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><call><name>next_reflog_commit</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best</name> <operator>||</operator> <call><name>log_timestamp</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>log_timestamp</name><argument_list>(<argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best</name> <operator>=</operator> <name>log</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_commit</name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>best</name><operator>-&gt;</operator><name>recno</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>walk</name><operator>-&gt;</operator><name>last_commit_reflog</name></name> <operator>=</operator> <name>best</name></expr>;</expr_stmt>
<return>return <expr><name>best_commit</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
