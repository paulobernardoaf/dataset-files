<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\progress.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gettext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TP_IDX_MAX</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct>struct <name>throughput</name> <block>{
<decl_stmt><decl><type><name>off_t</name></type> <name>curr_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>prev_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>avg_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>avg_misecs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>last_bytes</name><index>[<expr><name>TP_IDX_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>last_misecs</name><index>[<expr><name>TP_IDX_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>display</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>progress</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>last_percent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sparse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>throughput</name></name> <modifier>*</modifier></type><name>throughput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>counters_sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>title_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>split</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>progress_update</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>progress_testing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>progress_test_ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>progress_test_force_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function><type><name>void</name></type> <name>progress_test_force_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>progress_update</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>progress_interval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>progress_update</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_progress_signal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>progress_testing</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>progress_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>progress_interval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_RESTART</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>it_value</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>it_interval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_progress_signal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>v</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr>,}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>progress_testing</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>progress_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_foreground_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tpgrp</name> <init>= <expr><call><name>tcgetpgrp</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>tpgrp</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>tpgrp</name> <operator>==</operator> <call><name>getpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>counters_sb</name> <init>= <expr><operator>&amp;</operator><name><name>progress</name><operator>-&gt;</operator><name>counters_sb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_update</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_count_len</name> <init>= <expr><name><name>counters_sb</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>progress</name><operator>-&gt;</operator><name>delay</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>progress_update</name> <operator>||</operator> <operator>--</operator><name><name>progress</name><operator>-&gt;</operator><name>delay</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>last_value</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>progress</name><operator>-&gt;</operator><name>throughput</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>progress</name><operator>-&gt;</operator><name>throughput</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>buf</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>progress</name><operator>-&gt;</operator><name>total</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>percent</name> <init>= <expr><name>n</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name><name>progress</name><operator>-&gt;</operator><name>total</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>percent</name> <operator>!=</operator> <name><name>progress</name><operator>-&gt;</operator><name>last_percent</name></name> <operator>||</operator> <name>progress_update</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>last_percent</name></name> <operator>=</operator> <name>percent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>counters_sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>counters_sb</name></expr></argument>,
<argument><expr><literal type="string">"%3u%% (%"</literal><name>PRIuMAX</name><literal type="string">"/%"</literal><name>PRIuMAX</name><literal type="string">")%s"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>progress</name><operator>-&gt;</operator><name>total</name></name></expr></argument>,
<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_update</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>progress_update</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>counters_sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>counters_sb</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_update</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>show_update</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_foreground_fd</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>done</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><ternary><condition><expr><name>done</name></expr> ?</condition><then> <expr><name>done</name></expr> </then><else>: <expr><literal type="string">"\r"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clear_len</name> <init>= <expr><ternary><condition><expr><name><name>counters_sb</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>last_count_len</name></expr> ?</condition><then>
<expr><name>last_count_len</name> <operator>-</operator> <name><name>counters_sb</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>:
<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>progress_line_len</name> <init>= <expr><name><name>progress</name><operator>-&gt;</operator><name>title_len</name></name> <operator>+</operator>
<name><name>counters_sb</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><call><name>term_columns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>progress</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s%*s"</literal></expr></argument>, <argument><expr><name><name>counters_sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>clear_len</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <name>cols</name> <operator>&lt;</operator> <name>progress_line_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clear_len</name> <operator>=</operator> <ternary><condition><expr><name><name>progress</name><operator>-&gt;</operator><name>title_len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>cols</name></expr> ?</condition><then>
<expr><name>cols</name> <operator>-</operator> <name><name>progress</name><operator>-&gt;</operator><name>title_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%*s\n %s%s"</literal></expr></argument>,
<argument><expr><name><name>progress</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>clear_len</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>counters_sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>split</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s%*s"</literal></expr></argument>, <argument><expr><name><name>progress</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,
<argument><expr><name><name>counters_sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>clear_len</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>progress_update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>throughput_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_humanise_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" | "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_humanise_rate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rate</name> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>progress_getnanotime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>progress_testing</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>progress</name><operator>-&gt;</operator><name>start_ns</name></name> <operator>+</operator> <name>progress_test_ns</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>display_throughput</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>throughput</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>now_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>misecs</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>rate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>progress</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>progress</name><operator>-&gt;</operator><name>throughput</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>now_ns</name> <operator>=</operator> <call><name>progress_getnanotime</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>throughput</name></name> <operator>=</operator> <name>tp</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>prev_total</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>curr_total</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>prev_ns</name></name> <operator>=</operator> <name>now_ns</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>curr_total</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>now_ns</name> <operator>-</operator> <name><name>tp</name><operator>-&gt;</operator><name>prev_ns</name></name> <operator>&lt;=</operator> <literal type="number">500000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

















<expr_stmt><expr><name>misecs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>now_ns</name> <operator>-</operator> <name><name>tp</name><operator>-&gt;</operator><name>prev_ns</name></name><operator>)</operator> <operator>*</operator> <literal type="number">4398</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>total</name> <operator>-</operator> <name><name>tp</name><operator>-&gt;</operator><name>prev_total</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>prev_total</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>prev_ns</name></name> <operator>=</operator> <name>now_ns</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>avg_bytes</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>avg_misecs</name></name> <operator>+=</operator> <name>misecs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rate</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>avg_bytes</name></name> <operator>/</operator> <name><name>tp</name><operator>-&gt;</operator><name>avg_misecs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>avg_bytes</name></name> <operator>-=</operator> <name><name>tp</name><operator>-&gt;</operator><name>last_bytes</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>avg_misecs</name></name> <operator>-=</operator> <name><name>tp</name><operator>-&gt;</operator><name>last_misecs</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>last_bytes</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>last_misecs</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>misecs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>TP_IDX_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>throughput_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>progress</name><operator>-&gt;</operator><name>last_value</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>progress_update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name><name>progress</name><operator>-&gt;</operator><name>last_value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>display_progress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>progress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>start_progress_delay</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>sparse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>progress</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>last_value</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>last_percent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>sparse</name></name> <operator>=</operator> <name>sparse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>throughput</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>start_ns</name></name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><operator>-&gt;</operator><name>counters_sb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>title_len</name></name> <operator>=</operator> <call><name>utf8_strwidth</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progress</name><operator>-&gt;</operator><name>split</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_progress_signal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>progress</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_default_delay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>delay_in_secs</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delay_in_secs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay_in_secs</name> <operator>=</operator> <call><name>git_env_ulong</name><argument_list>(<argument><expr><literal type="string">"GIT_PROGRESS_DELAY"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>delay_in_secs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>start_delayed_progress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>start_progress_delay</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><call><name>get_default_delay</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>start_progress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>start_progress_delay</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>start_sparse_progress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>start_progress_delay</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>start_delayed_sparse_progress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>start_progress_delay</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><call><name>get_default_delay</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_if_sparse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>progress</name> <operator>&amp;&amp;</operator>
<name><name>progress</name><operator>-&gt;</operator><name>sparse</name></name> <operator>&amp;&amp;</operator>
<name><name>progress</name><operator>-&gt;</operator><name>last_value</name></name> <operator>!=</operator> <name><name>progress</name><operator>-&gt;</operator><name>total</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name><name>progress</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stop_progress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_progress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>finish_if_sparse</name><argument_list>(<argument><expr><operator>*</operator><name>p_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_progress_msg</name><argument_list>(<argument><expr><name>p_progress</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stop_progress_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_progress</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name> <init>= <expr><operator>*</operator><name>p_progress</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>progress</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_progress</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>progress</name><operator>-&gt;</operator><name>last_value</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>throughput</name></name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name><name>progress</name><operator>-&gt;</operator><name>throughput</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>now_ns</name> <init>= <expr><call><name>progress_getnanotime</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>misecs</name></decl>, <decl><type ref="prev"/><name>rate</name></decl>;</decl_stmt>
<expr_stmt><expr><name>misecs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>now_ns</name> <operator>-</operator> <name><name>progress</name><operator>-&gt;</operator><name>start_ns</name></name><operator>)</operator> <operator>*</operator> <literal type="number">4398</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rate</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>curr_total</name></name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>misecs</name></expr> ?</condition><then> <expr><name>misecs</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>throughput_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>curr_total</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>progress_update</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">", %s.\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name><name>progress</name><operator>-&gt;</operator><name>last_value</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_progress_signal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><operator>-&gt;</operator><name>counters_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>progress</name><operator>-&gt;</operator><name>throughput</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><operator>-&gt;</operator><name>throughput</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>progress</name><operator>-&gt;</operator><name>throughput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
