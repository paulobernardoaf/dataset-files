<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\wt-status.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STATUS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pathspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>

<struct_decl>struct <name>repository</name>;</struct_decl>
<struct_decl>struct <name>worktree</name>;</struct_decl>

<enum>enum <name>color_wt_status</name> <block>{
<decl><name>WT_STATUS_HEADER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>WT_STATUS_UPDATED</name></decl>,
<decl><name>WT_STATUS_CHANGED</name></decl>,
<decl><name>WT_STATUS_UNTRACKED</name></decl>,
<decl><name>WT_STATUS_NOBRANCH</name></decl>,
<decl><name>WT_STATUS_UNMERGED</name></decl>,
<decl><name>WT_STATUS_LOCAL_BRANCH</name></decl>,
<decl><name>WT_STATUS_REMOTE_BRANCH</name></decl>,
<decl><name>WT_STATUS_ONBRANCH</name></decl>,
<decl><name>WT_STATUS_MAXSLOT</name></decl>
}</block>;</enum>

<enum>enum <name>untracked_status_type</name> <block>{
<decl><name>SHOW_NO_UNTRACKED_FILES</name></decl>,
<decl><name>SHOW_NORMAL_UNTRACKED_FILES</name></decl>,
<decl><name>SHOW_ALL_UNTRACKED_FILES</name></decl>
}</block>;</enum>

<enum>enum <name>show_ignored_type</name> <block>{
<decl><name>SHOW_NO_IGNORED</name></decl>,
<decl><name>SHOW_TRADITIONAL_IGNORED</name></decl>,
<decl><name>SHOW_MATCHING_IGNORED</name></decl>,
}</block>;</enum>


<enum>enum <name>commit_whence</name> <block>{
<decl><name>FROM_COMMIT</name></decl>, 
<decl><name>FROM_MERGE</name></decl>, 
<decl><name>FROM_CHERRY_PICK_SINGLE</name></decl>, 
<decl><name>FROM_CHERRY_PICK_MULTI</name></decl>, 
<decl><name>FROM_REBASE_PICK</name></decl> 
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_from_cherry_pick</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>commit_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>whence</name> <operator>==</operator> <name>FROM_CHERRY_PICK_SINGLE</name> <operator>||</operator>
<name>whence</name> <operator>==</operator> <name>FROM_CHERRY_PICK_MULTI</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_from_rebase</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>commit_whence</name></name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>whence</name> <operator>==</operator> <name>FROM_REBASE_PICK</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>wt_status_change_data</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>worktree_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stagemask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode_head</name></decl>, <decl><type ref="prev"/><name>mode_index</name></decl>, <decl><type ref="prev"/><name>mode_worktree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid_head</name></decl>, <decl><type ref="prev"/><name>oid_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rename_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rename_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rename_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dirty_submodule</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>new_submodule_commits</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>wt_status_format</name> <block>{
<decl><name>STATUS_FORMAT_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STATUS_FORMAT_LONG</name></decl>,
<decl><name>STATUS_FORMAT_SHORT</name></decl>,
<decl><name>STATUS_FORMAT_PORCELAIN</name></decl>,
<decl><name>STATUS_FORMAT_PORCELAIN_V2</name></decl>,

<decl><name>STATUS_FORMAT_UNSPECIFIED</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_DETACHED_AT</name></cpp:macro> <cpp:value>_("HEAD detached at ")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD_DETACHED_FROM</name></cpp:macro> <cpp:value>_("HEAD detached from ")</cpp:value></cpp:define>

<struct>struct <name>wt_status_state</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>merge_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>am_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>am_empty_patch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rebase_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rebase_interactive_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cherry_pick_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bisect_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>revert_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>detached_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>branch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>onto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>detached_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>detached_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>revert_head_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>cherry_pick_head_oid</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>wt_status</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_initial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>branch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reference</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pathspec</name></name></type> <name>pathspec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>amend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>commit_whence</name></name></type> <name>whence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nowarn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_gettext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display_comment_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>relative_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>submodule_summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>show_ignored_type</name></name></type> <name>show_ignored_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>untracked_status_type</name></name></type> <name>show_untracked_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ignore_submodule_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>color_palette</name><index>[<expr><name>WT_STATUS_MAXSLOT</name></expr>]</index><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>colopts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>null_termination</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>commit_template</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_branch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_stash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ahead_behind_flags</name></name></type> <name>ahead_behind_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>detect_rename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rename_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rename_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>wt_status_format</name></name></type> <name>status_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wt_status_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid_commit</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>committable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>workdir_dirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>index_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>untracked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>ignored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>untracked_in_ms</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>size_t</name></type> <name>wt_status_locate_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>wt_status_append_cut_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>wt_status_add_cut_line</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>wt_status_prepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>wt_status</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>wt_status_print</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wt_status</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>wt_status_collect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wt_status</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>wt_status_collect_free_buffers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wt_status</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>wt_status_get_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wt_status_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>get_detached_from</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>wt_status_check_rebase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wt_status_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>wt_status_check_bisect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>wt_status_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">3</literal>, <literal type="number">4</literal>))</argument>)</argument_list></macro>
<function_decl><type><name>void</name></type> <name>status_printf_ln</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wt_status</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">3</literal>, <literal type="number">4</literal>))</argument>)</argument_list></macro>
<function_decl><type><name>void</name></type> <name>status_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wt_status</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>has_unstaged_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ignore_submodules</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>has_uncommitted_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ignore_submodules</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>require_clean_work_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ignore_submodules</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>gently</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
