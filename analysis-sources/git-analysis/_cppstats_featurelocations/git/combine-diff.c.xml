<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\combine-diff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff/xmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_paths</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>base_name_compare</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,
<argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filename_changed</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>status</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>||</operator> <name>status</name> <operator>==</operator> <literal type="char">'C'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>intersect_paths</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>curr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>combined_all_paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>&amp;</operator><name>curr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>combine_diff_path_size</name><argument_list>(<argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>num_parent</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>status</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>combined_all_paths</name> <operator>&amp;&amp;</operator>
<call><name>filename_changed</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>curr</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>tail</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name><operator>)</operator></expr>
?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>compare_paths</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>two</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>combined_all_paths</name> <operator>&amp;&amp;</operator>
<call><name>filename_changed</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>status</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>combined_all_paths</name> <operator>&amp;&amp;</operator>
<call><name>filename_changed</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>curr</name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>lline</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>parent_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>plost</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>lost_head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lost_tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>sline</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>lost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lenlost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>plost</name></name></type> <name>plost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>p_lno</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_string_spaces</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>len1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>len1</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>len2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line2</name><index>[<expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>len2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>XDF_IGNORE_WHITESPACE</name> <operator>|</operator> <name>XDF_IGNORE_WHITESPACE_CHANGE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>len1</name> <operator>==</operator> <name>len2</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>len1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len1</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>len1</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line2</name><index>[<expr><name>len2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE_CHANGE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>len1</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line2</name><index>[<expr><name>len2</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>len1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>len1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>len1</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>len2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line2</name><index>[<expr><name>len2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>len2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line1</name><index>[<expr><name>len1</name></expr>]</index></name> <operator>!=</operator> <name><name>line2</name><index>[<expr><name>len2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>XDF_IGNORE_WHITESPACE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>len1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>len1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>len1</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>len2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><name><name>line2</name><index>[<expr><name>len2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>len2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>len2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>coalesce_direction</name> <block>{ <decl><name>MATCH</name></decl>, <decl><name>BASE</name></decl>, <decl><name>NEW</name></decl> }</block>;</enum>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>coalesce_lines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenbase</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>newline</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lennew</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>lcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>coalesce_direction</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>directions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>baseend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>origbaselen</name> <init>= <expr><operator>*</operator><name>lenbase</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>base</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lenbase</name> <operator>=</operator> <name>lennew</name></expr>;</expr_stmt>
<return>return <expr><name>newline</name></expr>;</return>
</block_content>}</block></if></if_stmt>












<expr_stmt><expr><name>lcs</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><name>origbaselen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>directions</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><name>origbaselen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>coalesce_direction</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>origbaselen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lcs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><name>lennew</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><name>lennew</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>coalesce_direction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>BASE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lennew</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>directions</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NEW</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>baseend</name> <operator>=</operator> <name>base</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>origbaselen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>newend</name> <operator>=</operator> <name>newline</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lennew</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>match_string_spaces</name><argument_list>(<argument><expr><name><name>baseend</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>baseend</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>newend</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>newend</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lcs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>lcs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>MATCH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lcs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>lcs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lcs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>lcs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NEW</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lcs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>lcs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>BASE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newend</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newend</name> <operator>=</operator> <name><name>newend</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>baseend</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>baseend</name> <operator>=</operator> <name><name>baseend</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>origbaselen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>baseend</name><operator>-&gt;</operator><name>parent_map</name></name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>baseend</name> <operator>=</operator> <name><name>baseend</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>newend</name> <operator>=</operator> <name><name>newend</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NEW</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>lline</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lline</name> <operator>=</operator> <name>newend</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>lline</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name><name>lline</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lline</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>lline</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newend</name> <operator>=</operator> <name><name>lline</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>baseend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>baseend</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>baseend</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>lline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>lline</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>lenbase</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lline</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>lline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>baseend</name> <operator>=</operator> <name><name>baseend</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>newend</name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>newend</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>lline</name> <init>= <expr><name>newend</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>newend</name> <operator>=</operator> <name><name>newend</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>origbaselen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>directions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>directions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>grab_blob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>blob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Subproject commit %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>blob</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>textconv</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>df</name> <init>= <expr><call><name>alloc_filespec</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>textconv</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>blob</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"object '%s' is not a blob!"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>blob</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_lost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>lline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>this_mask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FLEX_ALLOC_MEM</name><argument_list>(<argument><expr><name>lline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>sline</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>lost_tail</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>lline</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>lost_head</name></name> <operator>=</operator> <name>lline</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>sline</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>lost_tail</name></name> <operator>=</operator> <name>lline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sline</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lline</name><operator>-&gt;</operator><name>parent_map</name></name> <operator>=</operator> <name>this_mask</name></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>combine_diff_state</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ob</name></decl>, <decl><type ref="prev"/><name>on</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>nn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>lost_bucket</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>consume_hunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state_</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>ob</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>nb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcline</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>state_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ob</name></name> <operator>=</operator> <name>ob</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>on</name></name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nn</name></name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lno</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>nb</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>nn</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lost_bucket</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>sline</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>nb</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>nb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lost_bucket</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>sline</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>nb</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>sline</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>nb</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_lno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sline</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>nb</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_lno</name> <operator>=</operator>
<call><name>xcalloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>num_parent</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sline</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>nb</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p_lno</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>ob</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>consume_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>state_</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>lost_bucket</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
<switch>switch <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><call><name>append_lost</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lost_bucket</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>line</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sline</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>lno</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flag</name> <operator>|=</operator> <name><name>state</name><operator>-&gt;</operator><name>nmask</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lno</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>combine_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>result_file</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result_deleted</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>p_lno</name></decl>, <decl><type ref="prev"/><name>lno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nmask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmfile_t</name></type> <name>parent_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result_deleted</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>parent_file</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>grab_blob</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>textconv</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent_file</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>nmask</name></name> <operator>=</operator> <name>nmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>sline</name></name> <operator>=</operator> <name>sline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>lno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>num_parent</name></name> <operator>=</operator> <name>num_parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parent_file</name></expr></argument>, <argument><expr><name>result_file</name></expr></argument>, <argument><expr><name>consume_hunk</name></expr></argument>,
<argument><expr><name>consume_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to generate combined diff for %s"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>parent_file</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<for>for <control>(<init><expr><name>lno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p_lno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lno</name> <operator>&lt;=</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>lno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>ll</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name><name>p_lno</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>p_lno</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name><name>plost</name><operator>.</operator><name>lost_head</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>lost</name></name> <operator>=</operator> <call><name>coalesce_lines</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>lost</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>lenlost</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>lost_head</name></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>lost_head</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>lost_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>plost</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>lost</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ll</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ll</name><operator>-&gt;</operator><name>parent_map</name></name> <operator>&amp;</operator> <name>nmask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_lno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>lno</name> <operator>&lt;</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>nmask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_lno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name><name>p_lno</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>p_lno</name></expr>;</expr_stmt> 
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>context</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>combine_marker</name> <init>= <expr><literal type="char">'@'</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>interesting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>all_mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<return>return <expr><operator>(</operator><operator>(</operator><name><name>sline</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>all_mask</name><operator>)</operator> <operator>||</operator> <name><name>sline</name><operator>-&gt;</operator><name>lost</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>adjust_hunk_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>all_mask</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hunk_begin</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hunk_begin</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>all_mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>find_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mark</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cnt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>look_for_uninteresting</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>look_for_uninteresting</name></expr>
?</condition><then> <expr><operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><name><name>sline</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>give_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>all_mask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>num_parent</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mark</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>num_parent</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>no_pre_delete</name> <init>= <expr><operator>(</operator><literal type="number">2UL</literal><operator>&lt;&lt;</operator><name>num_parent</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>










<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>find_next</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>context</name> <operator>&lt;</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>i</name> <operator>-</operator> <name>context</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>|=</operator> <name>no_pre_delete</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>flag</name> <operator>|=</operator> <name>mark</name></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>again</name>:</label>



<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>find_next</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>find_next</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>adjust_hunk_tail</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>all_mask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>j</name> <operator>+</operator> <name>context</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>flag</name> <operator>|=</operator> <name>mark</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>i</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>j</name> <operator>+</operator> <name>context</name> <operator>&lt;</operator> <name>cnt</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>j</name> <operator>+</operator> <name>context</name></expr> </then><else>: <expr><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>flag</name> <operator>|=</operator> <name>mark</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_hunks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cnt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dense</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>all_mask</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>num_parent</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mark</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>num_parent</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_interesting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>interesting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sline</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>all_mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>|=</operator> <name>mark</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>mark</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dense</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>give_context</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>hunk_begin</name></decl>, <decl><type ref="prev"/><name>hunk_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>same_diff</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>hunk_begin</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>la</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>contin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>la</name> <operator>=</operator> <call><name>adjust_hunk_tail</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>all_mask</name></expr></argument>,
<argument><expr><name>hunk_begin</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>la</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>la</name> <operator>+</operator> <name>context</name> <operator>&lt;</operator> <name>cnt</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><name>la</name> <operator>+</operator> <name>context</name><operator>)</operator></expr> </then><else>: <expr><name>cnt</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>la</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <operator>--</operator><name>la</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sline</name><index>[<expr><name>la</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>contin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contin</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>la</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>hunk_end</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>




















<expr_stmt><expr><name>same_diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>has_interesting</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>hunk_end</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_interesting</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>this_diff</name> <init>= <expr><name><name>sline</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>all_mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><name><name>sline</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lost</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>this_diff</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same_diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>same_diff</name> <operator>=</operator> <name>this_diff</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>same_diff</name> <operator>!=</operator> <name>this_diff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_interesting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>ll</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_interesting</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>this_diff</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>parent_map</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same_diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>same_diff</name> <operator>=</operator> <name>this_diff</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>same_diff</name> <operator>!=</operator> <name>this_diff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_interesting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_interesting</name> <operator>&amp;&amp;</operator> <name>same_diff</name> <operator>!=</operator> <name>all_mask</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>hunk_begin</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>hunk_end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>mark</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>hunk_end</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>has_interesting</name> <operator>=</operator> <call><name>give_context</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>has_interesting</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_parent_lno</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>l0</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>null_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>l0</name> <operator>=</operator> <name><name>sline</name><index>[<expr><name>l0</name></expr>]</index></name><operator>.</operator><name><name>p_lno</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <name><name>sline</name><index>[<expr><name>l1</name></expr>]</index></name><operator>.</operator><name><name>p_lno</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" -%lu,%lu"</literal></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name><operator>-</operator><name>l0</name><operator>-</operator><name>null_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hunk_comment_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>bol</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_line_to_eol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saw_cr_at_eol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>saw_cr_at_eol</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s%s%s\n"</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>saw_cr_at_eol</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
<argument><expr><name>reset</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>saw_cr_at_eol</name></expr> ?</condition><then> <expr><literal type="string">"\r"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_sline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>use_color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result_deleted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mark</name> <init>= <expr><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>num_parent</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>no_pre_delete</name> <init>= <expr><operator>(</operator><literal type="number">2UL</literal><operator>&lt;&lt;</operator><name>num_parent</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>lno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_frag</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_func</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_FUNCINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_new</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_old</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_context</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_reset</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result_deleted</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hunk_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rlines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hunk_comment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>null_context</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>lno</name> <operator>&lt;=</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hunk_comment_line</name><argument_list>(<argument><expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>bol</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hunk_comment</name> <operator>=</operator> <name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>bol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lno</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>lno</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>hunk_end</name> <operator>=</operator> <name>lno</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>hunk_end</name> <operator>&lt;=</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>hunk_end</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>hunk_end</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>mark</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rlines</name> <operator>=</operator> <name>hunk_end</name> <operator>-</operator> <name>lno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>hunk_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rlines</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition> <block>{<block_content>









<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>lno</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>hunk_end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sline</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><name>mark</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>null_context</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>rlines</name> <operator>-=</operator> <name>null_context</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>combine_marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_parent_lno</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>lno</name></expr></argument>, <argument><expr><name>hunk_end</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>null_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" +%lu,%lu "</literal></expr></argument>, <argument><expr><name>lno</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>combine_marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>hunk_comment</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>comment_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>hunk_comment</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>comment_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>comment_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s %s%s"</literal></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>,
<argument><expr><name>c_context</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>,
<argument><expr><name>c_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>comment_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>hunk_comment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lno</name> <operator>&lt;</operator> <name>hunk_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>p_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>sline</name><index>[<expr><name>lno</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>no_pre_delete</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>lost</name></name></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ll</name><operator>-&gt;</operator><name>parent_map</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>show_line_to_eol</name><argument_list>(<argument><expr><name><name>ll</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>lno</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_mask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>mark</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>c_context</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>c_new</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_mask</name> <operator>&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p_mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>show_line_to_eol</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>bol</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reuse_combine_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cnt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>lno</name></decl>, <decl><type ref="prev"/><name>imask</name></decl>, <decl><type ref="prev"/><name>jmask</name></decl>;</decl_stmt>
<expr_stmt><expr><name>imask</name> <operator>=</operator> <operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>jmask</name> <operator>=</operator> <operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lno</name> <operator>&lt;=</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>lno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><name><name>sline</name><operator>-&gt;</operator><name>lost</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sline</name><operator>-&gt;</operator><name>p_lno</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sline</name><operator>-&gt;</operator><name>p_lno</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ll</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ll</name><operator>-&gt;</operator><name>parent_map</name></name> <operator>&amp;</operator> <name>jmask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ll</name><operator>-&gt;</operator><name>parent_map</name></name> <operator>|=</operator> <name>imask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>sline</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>jmask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>imask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sline</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sline</name><operator>-&gt;</operator><name>p_lno</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sline</name><operator>-&gt;</operator><name>p_lno</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_quoted_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quote_two_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_combined_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>elem</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dense</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode_differs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>show_file_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abbrev</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>full_index</name></name></expr> ?</condition><then> <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr> </then><else>: <expr><name>DEFAULT_ABBREV</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_prefix</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>a_prefix</name></name></expr> ?</condition><then> <expr><name><name>opt</name><operator>-&gt;</operator><name>a_prefix</name></name></expr> </then><else>: <expr><literal type="string">"a/"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b_prefix</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>b_prefix</name></name></expr> ?</condition><then> <expr><name><name>opt</name><operator>-&gt;</operator><name>b_prefix</name></name></expr> </then><else>: <expr><literal type="string">"b/"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_meta</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>DIFF_METAINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_reset</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rev</name><operator>-&gt;</operator><name>loginfo</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rev</name><operator>-&gt;</operator><name>no_commit_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_log</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_quoted_path</name><argument_list>(<argument><expr><ternary><condition><expr><name>dense</name></expr> ?</condition><then> <expr><literal type="string">"diff --cc "</literal></expr> </then><else>: <expr><literal type="string">"diff --combined "</literal></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%sindex "</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>abb</name> <operator>=</operator> <call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>,
<argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>abb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>abb</name> <operator>=</operator> <call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"..%s%s\n"</literal></expr></argument>, <argument><expr><name>abb</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode_differs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>deleted</name> <operator>=</operator> <operator>!</operator><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>added</name> <operator>=</operator> <operator>!</operator><name>deleted</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>added</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>!=</operator>
<name>DIFF_STATUS_ADDED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%snew file mode %06o"</literal></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%sdeleted file "</literal></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mode "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%06o"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"..%06o"</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>show_file_header</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rev</name><operator>-&gt;</operator><name>combined_all_paths</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><call><name>filename_changed</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>path</name><operator>.</operator><name>buf</name></name></expr> </then><else>: <expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>DIFF_STATUS_ADDED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_quoted_path</name><argument_list>(<argument><expr><literal type="string">"--- "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_quoted_path</name><argument_list>(<argument><expr><literal type="string">"--- "</literal></expr></argument>, <argument><expr><name>a_prefix</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_quoted_path</name><argument_list>(<argument><expr><literal type="string">"--- "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_quoted_path</name><argument_list>(<argument><expr><literal type="string">"--- "</literal></expr></argument>, <argument><expr><name>a_prefix</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_quoted_path</name><argument_list>(<argument><expr><literal type="string">"+++ "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_quoted_path</name><argument_list>(<argument><expr><literal type="string">"+++ "</literal></expr></argument>, <argument><expr><name>b_prefix</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_patch_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>elem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dense</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>working_tree_file</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>result_size</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>lno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result_deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sline</name></name> <modifier>*</modifier></type><name>sline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mode_differs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>show_hunks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmfile_t</name></type> <name>result_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>userdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_binary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name> <init>= <expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>userdiff</name> <operator>=</operator> <call><name>userdiff_find_by_path</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>userdiff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>userdiff</name> <operator>=</operator> <call><name>userdiff_find_by_name</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_textconv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>textconv</name> <operator>=</operator> <call><name>userdiff_get_textconv</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>userdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>working_tree_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>grab_blob</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_size</name></expr></argument>,
<argument><expr><name>textconv</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>deleted_file</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_readlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"readlink(%s)"</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result_size</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>canon_mode</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>resolve_gitlink_ref</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>grab_blob</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_size</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>grab_blob</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>result_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>textconv</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>df</name> <init>= <expr><call><name>alloc_filespec</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result_size</name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>textconv</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>xsize_t</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_file</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>canon_mode</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>is_file</name> <operator>=</operator> <name>has_symlinks</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>is_file</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_file</name> <operator>=</operator> <operator>!</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>canon_mode</name><argument_list>(<argument><expr><name>S_IFLNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result_size</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>read_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"read error '%s'"</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>done</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"early EOF '%s'"</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>is_file</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_to_git</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>global_conv_flags_eol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result_size</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<label><name>deleted_file</name>:</label>
<expr_stmt><expr><name>result_deleted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>!=</operator> <name><name>elem</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode_differs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>textconv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_binary</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>userdiff</name><operator>-&gt;</operator><name>binary</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_binary</name> <operator>=</operator> <name><name>userdiff</name><operator>-&gt;</operator><name>binary</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>is_binary</name> <operator>=</operator> <call><name>buffer_is_binary</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>is_binary</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>grab_blob</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>,
<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buffer_is_binary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_binary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_binary</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_combined_header</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>dense</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>mode_differs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Binary files differ\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>cp</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>result</name> <operator>+</operator> <name>result_size</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>result_size</name> <operator>&amp;&amp;</operator> <name><name>result</name><index>[<expr><name>result_size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>sline</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sline</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bol</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>cp</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>result</name> <operator>+</operator> <name>result_size</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>cp</name> <operator>-</operator> <name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>bol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lno</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lno</name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>bol</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>result_size</name> <operator>&amp;&amp;</operator> <name><name>result</name><index>[<expr><name>result_size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>cnt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>result_size</name> <operator>-</operator> <operator>(</operator><name><name>sline</name><index>[<expr><name>cnt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bol</name> <operator>-</operator> <name>result</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>result_file</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result_file</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>result_size</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>sline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_lno</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_mult</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lno</name> <operator>&lt;=</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>lno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sline</name><index>[<expr><name>lno</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_lno</name> <operator>=</operator> <name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>p_lno</name> <operator>+</operator> <name>num_parent</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reuse_combine_diff</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>combine_diff</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>,
<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>result_file</name></expr></argument>, <argument><expr><name>sline</name></expr></argument>,
<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>result_deleted</name></expr></argument>,
<argument><expr><name>textconv</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>show_hunks</name> <operator>=</operator> <call><name>make_hunks</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>dense</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_hunks</name> <operator>||</operator> <name>mode_differs</name> <operator>||</operator> <name>working_tree_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_combined_header</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>dense</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>mode_differs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_sline</name><argument_list>(<argument><expr><name>sline</name></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>result_deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lno</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>lno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>lost</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><name><name>sline</name><index>[<expr><name>lno</name></expr>]</index></name><operator>.</operator><name>lost</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ll</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lline</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>ll</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ll</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_lno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_raw_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_termination</name></decl>, <decl><type ref="prev"/><name>inter_name_termination</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name> <init>= <expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>line_termination</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>line_termination</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inter_name_termination</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line_termination</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inter_name_termination</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rev</name><operator>-&gt;</operator><name>loginfo</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rev</name><operator>-&gt;</operator><name>no_commit_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_log</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_RAW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%06o "</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%06o"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>diff_aligned_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>abbrev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><call><name>diff_aligned_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>abbrev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_RAW</name> <operator>|</operator> <name>DIFF_FORMAT_NAME_STATUS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>inter_name_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>rev</name><operator>-&gt;</operator><name>combined_all_paths</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>filename_changed</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>,
<argument><expr><name>inter_name_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>,
<argument><expr><name>inter_name_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>line_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>show_combined_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dense</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_RAW</name> <operator>|</operator>
<name>DIFF_FORMAT_NAME</name> <operator>|</operator>
<name>DIFF_FORMAT_NAME_STATUS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_raw_diff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_PATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_patch_diff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>dense</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_combined_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>combined_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><name>num_parent</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_filespec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name>pool</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>one</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid_valid</name> <operator>=</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>has_more_entries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><index>[<expr><name>num_parent</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>has_more_entries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>=</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pair</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_combined_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>paths</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_parent</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>num_paths</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_filepair</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <name>num_paths</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <name>num_paths</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>paths</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>queue</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>combined_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name><name>opt</name><operator>-&gt;</operator><name>format_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>format_callback_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_paths</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_combined_pair</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_path</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator>struct <name>combine_diff_path</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>path</name><operator>-&gt;</operator><name>path</name></name></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_FORMAT_MASK</name></cpp:macro> <cpp:value>(DIFF_FORMAT_NUMSTAT | DIFF_FORMAT_SHORTSTAT | DIFF_FORMAT_SUMMARY | DIFF_FORMAT_DIRSTAT | DIFF_FORMAT_DIFFSTAT)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>find_paths_generic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>parents</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>combined_all_paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>paths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_parent</name> <init>= <expr><name><name>parents</name><operator>-&gt;</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_format</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orderfile</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>orderfile</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>DIFF_FORMAT_NO_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>orderfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>stat_opt</name> <init>= <expr><name>output_format</name> <operator>&amp;</operator> <name>STAT_FORMAT_MASK</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stat_opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>stat_opt</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>DIFF_FORMAT_NO_OUTPUT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>diff_tree_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parents</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>intersect_paths</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>,
<argument><expr><name>combined_all_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>!=</operator> <name>DIFF_FORMAT_NO_OUTPUT</name> <operator>&amp;&amp;</operator>
<name>orderfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diffcore_order</name><argument_list>(<argument><expr><name>orderfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_flush</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>output_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>orderfile</name></name> <operator>=</operator> <name>orderfile</name></expr>;</expr_stmt>
<return>return <expr><name>paths</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>find_paths_multitree</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>parents</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nparent</name> <init>= <expr><name><name>parents</name><operator>-&gt;</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>parents_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name></type> <name>paths_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>base</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>parents_oid</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parents_oid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>parents</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>paths_head</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_tree_paths</name><argument_list>(<argument><expr><operator>&amp;</operator><name>paths_head</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>parents_oid</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>parents_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>paths_head</name><operator>.</operator><name>next</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>diff_tree_combined</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>parents</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dense</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name></type> <name>diffopts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_paths</name></decl>, <decl><type ref="prev"/><name>needsep</name></decl>, <decl><type ref="prev"/><name>show_log_first</name></decl>, <decl><type ref="prev"/><name>num_parent</name> <init>= <expr><name><name>parents</name><operator>-&gt;</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_generic_pathscan</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_parent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>show_log_first</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>rev</name><operator>-&gt;</operator><name>loginfo</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rev</name><operator>-&gt;</operator><name>no_commit_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_log_first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_log</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rev</name><operator>-&gt;</operator><name>verbose_header</name></name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;&amp;</operator>
<name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>!=</operator> <name>DIFF_FORMAT_NO_OUTPUT</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>commit_format_is_empty</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>commit_format</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diffopts</name> <operator>=</operator> <operator>*</operator><name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diffopts</name><operator>.</operator><name>pathspec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diffopts</name><operator>.</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diffopts</name><operator>.</operator><name>flags</name><operator>.</operator><name>allow_external</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



















<expr_stmt><expr><name>need_generic_pathscan</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>skip_stat_unmatch</name></name> <operator>||</operator>
<name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name> <operator>||</operator>
<name><name>opt</name><operator>-&gt;</operator><name>break_opt</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>opt</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>||</operator>
<operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KINDS_MASK</name><operator>)</operator> <operator>||</operator>
<name><name>opt</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>need_generic_pathscan</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>find_paths_generic</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>parents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diffopts</name></expr></argument>,
<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>combined_all_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stat_opt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>find_paths_multitree</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>parents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diffopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>stat_opt</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>STAT_FORMAT_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stat_opt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>diffopts</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <name>stat_opt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_tree_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parents</name><operator>-&gt;</operator><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>diffopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>orderfile</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diffcore_order</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>orderfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>diff_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>num_paths</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>paths</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_paths</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>orderfile</name></name> <operator>&amp;&amp;</operator> <name>num_paths</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>obj_order</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>num_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>paths</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>order_objects</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>orderfile</name></name></expr></argument>, <argument><expr><name>path_path</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>num_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_paths</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>o</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>obj</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>o</name><index>[<expr><name>num_paths</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <name><name>o</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>num_paths</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_RAW</name> <operator>|</operator>
<name>DIFF_FORMAT_NAME</name> <operator>|</operator>
<name>DIFF_FORMAT_NAME_STATUS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>paths</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_raw_diff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>needsep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>STAT_FORMAT_MASK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>needsep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_CALLBACK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_combined_callback</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>num_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_PATCH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>needsep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>paths</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_patch_diff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>num_parent</name></expr></argument>, <argument><expr><name>dense</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>paths</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>paths</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <name><name>paths</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_parent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>rev</name><operator>-&gt;</operator><name>combined_all_paths</name></name> <operator>&amp;&amp;</operator>
<call><name>filename_changed</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diffopts</name><operator>.</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_tree_combined_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dense</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>get_saved_parents</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>parents</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>diff_tree_combined</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parents</name></expr></argument>, <argument><expr><name>dense</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
