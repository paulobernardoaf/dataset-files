<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\attr.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread-utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>git_attr__true</name><index>[]</index></name> <init>= <expr><literal type="string">"(builtin)true"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>git_attr__false</name><index>[]</index></name> <init>= <expr><literal type="string">"\0(builtin)false"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>git_attr__unknown</name><index>[]</index></name> <init>= <expr><literal type="string">"(builtin)unknown"</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR__TRUE</name></cpp:macro> <cpp:value>git_attr__true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR__FALSE</name></cpp:macro> <cpp:value>git_attr__false</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR__UNSET</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTR__UNKNOWN</name></cpp:macro> <cpp:value>git_attr__unknown</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_ATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_ATTR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>git_attr</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>attr_nr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_attr_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>attr_hashmap</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hashmap_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hashmap_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>attr_hashmap</name></name></type> <name>g_attr_hashmap</name></decl>;</decl_stmt>


<struct>struct <name>attr_hash_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt> 
}</block>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type> <name>attr_hash_entry_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>unused_cmp_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>eptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry_or_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>unused_keydata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>attr_hash_entry</name></name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>eptr</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>attr_hash_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>entry_or_key</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>attr_hash_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>keylen</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>keylen</name></name><operator>)</operator> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>attr_hashmap_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>attr_hash_entry_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>attr_hashmap_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_hash_entry</name></name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_hash_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>map</name><operator>.</operator><name>tablesize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>attr_hashmap_init</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>k</name><operator>.</operator><name>ent</name></name></expr></argument>, <argument><expr><call><name>memhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>.</operator><name>keylen</name></name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>hashmap_get_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>attr_hashmap_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_hash_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>map</name><operator>.</operator><name>tablesize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>attr_hashmap_init</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>attr_hash_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><call><name>memhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>all_attrs_item</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>macro</name></decl>;</decl_stmt>
}</block>;</struct>






<function><type><specifier>static</specifier> <name>void</name></type> <name>all_attrs_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashmap_lock</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>hashmap_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>check</name><operator>-&gt;</operator><name>all_attrs_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"interned attributes shouldn't be deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name><name>check</name><operator>-&gt;</operator><name>all_attrs_nr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_hash_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs_nr</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<macro><name>hashmap_for_each_entry</name><argument_list>(<argument>&amp;map-&gt;map</argument>, <argument>&amp;iter</argument>, <argument>e</argument>,
<argument>ent</argument> )</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>attr_nr</name></name></expr>]</index></name><operator>.</operator><name>attr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_unlock</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>check</name><operator>-&gt;</operator><name>all_attrs_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>ATTR__UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>macro</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>attr_name_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>namelen</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>name</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator>
<operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_invalid_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%.*s is not a valid attribute name"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s:%d\n"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>git_attr_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>attr_name_valid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_attr_hashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>attr_hashmap_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_attr_hashmap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FLEX_ALLOC_MEM</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>attr_nr</name></name> <operator>=</operator> <call><name>hashmap_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_attr_hashmap</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attr_hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_attr_hashmap</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>attr_nr</name></name> <operator>==</operator>
<operator>(</operator><call><name>hashmap_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_attr_hashmap</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_attr_hashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>git_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_attr_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>attr_state</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setto</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>pattern</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>patternlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nowildcardlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt> 
}</block>;</struct>














<struct>struct <name>match_attr</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pattern</name></name></type> <name>pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>char</name></type> <name>is_macro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_state</name></name></type> <name><name>state</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>blank</name><index>[]</index></name> <init>= <expr><literal type="string">" \t\r\n"</literal></expr></init></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_state</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>equals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>equals</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>equals</name> <operator>&amp;&amp;</operator> <name>ep</name> <operator>&lt;</operator> <name>equals</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>equals</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>equals</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>equals</name> <operator>-</operator> <name>cp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>cp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>attr_name_valid</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>report_invalid_attr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>setto</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ATTR__FALSE</name></expr> </then><else>: <expr><name>ATTR__UNSET</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>equals</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>setto</name></name> <operator>=</operator> <name>ATTR__TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>setto</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>equals</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>equals</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <call><name>git_attr_internal</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ep</name> <operator>+</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>parse_attr_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>macro_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_attr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>states</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_macro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>pattern</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>line</name> <operator>+</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>unquote_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>states</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>pattern</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name><name>pattern</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>states</name> <operator>=</operator> <name>name</name> <operator>+</operator> <name>namelen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ATTRIBUTE_MACRO_PREFIX</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>namelen</name> <operator>&amp;&amp;</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ATTRIBUTE_MACRO_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>macro_ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s not allowed: %s:%d"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_return</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_macro</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ATTRIBUTE_MACRO_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>attr_name_valid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>report_invalid_attr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_return</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>is_macro</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>states</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>states</name></expr></argument>, <argument><expr><name>blank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>states</name></expr><operator>,</operator> <expr><name>num_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>num_attr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>parse_attr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_return</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr>struct <name>attr_state</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_attr</name> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name>is_macro</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_macro</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <call><name>git_attr_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>num_attr</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name><operator>.</operator><name>pattern</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_path_pattern</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name><operator>.</operator><name>pattern</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name><operator>.</operator><name>patternlen</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name><operator>.</operator><name>flags</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name><operator>.</operator><name>nowildcardlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATTERN_FLAG_NEGATIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Negative patterns are ignored in git attributes\n"</literal>
<literal type="string">"Use '\\!' for literal leading exclamation."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_return</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>is_macro</name></name> <operator>=</operator> <name>is_macro</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>num_attr</name></name> <operator>=</operator> <name>num_attr</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>states</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>parse_attr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>

<label><name>fail_return</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



















<struct>struct <name>attr_stack</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>originlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>attrs</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attr_stack_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>origin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>num_matches</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>num_attr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setto</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>setto</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>setto</name> <operator>==</operator> <name>ATTR__TRUE</name> <operator>||</operator>
<name>setto</name> <operator>==</operator> <name>ATTR__FALSE</name> <operator>||</operator>
<name>setto</name> <operator>==</operator> <name>ATTR__UNSET</name> <operator>||</operator>
<name>setto</name> <operator>==</operator> <name>ATTR__UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>setto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drop_attr_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>stack</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><operator>*</operator><name>stack</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>stack</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attr_stack_free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<struct><specifier>static</specifier> struct <name>check_vector</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>checks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
}</block> <decl><name>check_vector</name></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vector_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>check_vector</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vector_unlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>check_vector</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_vector_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vector_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>check_vector</name><operator>.</operator><name>checks</name></name></expr></argument>,
<argument><expr><name><name>check_vector</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>check_vector</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check_vector</name><operator>.</operator><name>checks</name><index>[<expr><name><name>check_vector</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vector_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_vector_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vector_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>check_vector</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>check_vector</name><operator>.</operator><name>checks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>check</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>check_vector</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"no entry found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>check_vector</name><operator>.</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>check_vector</name><operator>.</operator><name>checks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>check_vector</name><operator>.</operator><name>checks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>check_vector</name><operator>.</operator><name>nr</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vector_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>drop_all_attr_stacks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vector_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>check_vector</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>drop_attr_stack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>check_vector</name><operator>.</operator><name>checks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vector_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>attr_check_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>attr_check</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>check_vector_add</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>attr_check_initl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>attr_check_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>attr_check_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>attr</name> <operator>=</operator> <call><name>git_attr</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name><name>check</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"counted %d != ended at %d"</literal></expr></argument>,
<argument><expr><name><name>check</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>git_attr</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"%s: not a valid attribute name"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>check</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>attr_check_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>attr_check_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>alloc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>attr_check_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>check</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>attr_check_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>attr_check_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drop_attr_stack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>attr_check_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>check</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>check_vector_remove</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attr_check_clear</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>builtin_attr</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"[attr]binary -diff -merge -text"</literal></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_attr_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>macro_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>parse_attr_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>num_matches</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>num_matches</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>read_attr_from_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>list</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_attr_line</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"[builtin]"</literal></expr></argument>, <argument><expr><operator>++</operator><name>lineno</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>










<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>git_attr_direction</name></name></type> <name>direction</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>git_attr_set_direction</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>git_attr_direction</name></name></type> <name>new_direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_bare_repository</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>new_direction</name> <operator>!=</operator> <name>GIT_ATTR_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"non-INDEX attr direction in a bare repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_direction</name> <operator>!=</operator> <name>direction</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drop_all_attr_stacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>direction</name> <operator>=</operator> <name>new_direction</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>read_attr_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>macro_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen_or_warn</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lineno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_utf8_bom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>handle_attr_line</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>++</operator><name>lineno</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>read_attr_from_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>macro_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>istate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>read_blob_data_from_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>*</operator><name>sp</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>more</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>more</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ep</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_attr_line</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>++</operator><name>lineno</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <name>more</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>read_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>macro_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>GIT_ATTR_INDEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>read_attr_from_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>GIT_ATTR_CHECKOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>read_attr_from_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>read_attr_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>direction</name> <operator>==</operator> <name>GIT_ATTR_CHECKIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>read_attr_from_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>






<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>read_attr_from_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>macro_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ATTR</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>elem</name><operator>-&gt;</operator><name>origin</name></name></expr> ?</condition><then> <expr><name><name>elem</name><operator>-&gt;</operator><name>origin</name></name></expr> </then><else>: <expr><literal type="string">"()"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"set"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ATTR_FALSE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"unset"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"unspecified"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s =&gt; %s (%s)\n"</literal></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>value</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_push</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>debug_info("push", (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_pop</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>debug_info("pop", (a))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_push</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_pop</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_set</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ; } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_etc_gitattributes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>system_wide</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>system_wide</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>system_wide</name> <operator>=</operator> <call><name>system_path</name><argument_list>(<argument><expr><name>ETC_GITATTRIBUTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>system_wide</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_home_gitattributes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>git_attributes_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>git_attributes_file</name> <operator>=</operator> <call><name>xdg_config_home</name><argument_list>(<argument><expr><literal type="string">"attributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>git_attributes_file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_attr_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_ATTR_NOSYSTEM"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>GIT_PATH_FUNC</name><argument_list>(<argument>git_path_info_attributes</argument>, <argument>INFOATTRIBUTES_FILE</argument>)</argument_list></macro>

<specifier>static</specifier> <name>void</name> <macro><name>push_stack</name><argument_list>(<argument>struct attr_stack **attr_stack_p</argument>,
<argument>struct attr_stack *elem</argument>, <argument>char *origin</argument>, <argument>size_t originlen</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><name>elem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>origin</name></name> <operator>=</operator> <name>origin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>origin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>originlen</name></name> <operator>=</operator> <name>originlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <operator>*</operator><name>attr_stack_p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>attr_stack_p</name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
}

static <function><type><name>void</name></type> <name>bootstrap_attr_stack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>stack</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>read_attr_from_array</name><argument_list>(<argument><expr><name>builtin_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>git_attr_system</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>read_attr_from_file</name><argument_list>(<argument><expr><call><name>git_etc_gitattributes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_home_gitattributes</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>read_attr_from_file</name><argument_list>(<argument><expr><call><name>get_home_gitattributes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>read_attr</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>GITATTRIBUTES_FILE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>startup_info</name><operator>-&gt;</operator><name>have_repository</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>read_attr_from_file</name><argument_list>(<argument><expr><call><name>git_path_info_attributes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>attr_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>push_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_attr_stack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirlen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>pathbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
















<expr_stmt><expr><call><name>bootstrap_attr_stack</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>*</operator><name>stack</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>stack</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>







<while>while <condition>(<expr><name><operator>(</operator><operator>*</operator><name>stack</name><operator>)</operator><operator>-&gt;</operator><name>origin</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>stack</name><operator>)</operator><operator>-&gt;</operator><name>originlen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

<expr_stmt><expr><name>elem</name> <operator>=</operator> <operator>*</operator><name>stack</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&lt;=</operator> <name>dirlen</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>origin</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>namelen</name> <operator>||</operator> <name><name>path</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>debug_pop</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>stack</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attr_stack_free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>







<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>stack</name><operator>)</operator><operator>-&gt;</operator><name>origin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathbuf</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>stack</name><operator>)</operator><operator>-&gt;</operator><name>origin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>pathbuf</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <name>dirlen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>pathbuf</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origin</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>dirlen</name> <operator>&amp;&amp;</operator> <call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>dirlen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>pathbuf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathbuf</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathbuf</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <name><name>pathbuf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>-</operator> <name><name>pathbuf</name><operator>.</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathbuf</name></expr></argument>, <argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><name>GITATTRIBUTES_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>read_attr</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name><name>pathbuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>origin</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>pathbuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>




<expr_stmt><expr><call><name>push_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>path_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pathlen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>basename_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pattern</name></name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baselen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name><name>pat</name><operator>-&gt;</operator><name>pattern</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix</name> <init>= <expr><name><name>pat</name><operator>-&gt;</operator><name>nowildcardlen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdir</name> <init>= <expr><operator>(</operator><name>pathlen</name> <operator>&amp;&amp;</operator> <name><name>pathname</name><index>[<expr><name>pathlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATTERN_FLAG_MUSTBEDIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>isdir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATTERN_FLAG_NODIR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>match_basename</name><argument_list>(<argument><expr><name>pathname</name> <operator>+</operator> <name>basename_offset</name></expr></argument>,
<argument><expr><name>pathlen</name> <operator>-</operator> <name>basename_offset</name> <operator>-</operator> <name>isdir</name></expr></argument>,
<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>patternlen</name></name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>match_pathname</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>pathlen</name> <operator>-</operator> <name>isdir</name></expr></argument>,
<argument><expr><name>base</name></expr></argument>, <argument><expr><name>baselen</name></expr></argument>,
<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>patternlen</name></name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>macroexpand_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>all_attrs_item</name></name> <modifier>*</modifier></type><name>all_attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rem</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>all_attrs_item</name></name> <modifier>*</modifier></type><name>all_attrs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>num_attr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rem</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_attr</name></name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>n</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>all_attrs</name><index>[<expr><name><name>attr</name><operator>-&gt;</operator><name>attr_nr</name></name></expr>]</index></name><operator>.</operator><name>value</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>setto</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>n</name> <operator>==</operator> <name>ATTR__UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug_set</name><argument_list>(<argument><expr><name>what</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>is_macro</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name><operator>.</operator><name>pattern</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <call><name>macroexpand_one</name><argument_list>(<argument><expr><name>all_attrs</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attr_nr</name></name></expr></argument>, <argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>rem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pathlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>basename_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>all_attrs_item</name></name> <modifier>*</modifier></type><name>all_attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>rem</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stack</name></expr>;</condition> <incr><expr><name>stack</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><ternary><condition><expr><name><name>stack</name><operator>-&gt;</operator><name>origin</name></name></expr> ?</condition><then> <expr><name><name>stack</name><operator>-&gt;</operator><name>origin</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>num_matches</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>rem</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>is_macro</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>path_matches</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>, <argument><expr><name>basename_offset</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pat</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>originlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <call><name>fill_one</name><argument_list>(<argument><expr><literal type="string">"fill"</literal></expr></argument>, <argument><expr><name>all_attrs</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>rem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>macroexpand_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>all_attrs_item</name></name> <modifier>*</modifier></type><name>all_attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>all_attrs_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><name><name>all_attrs</name><index>[<expr><name>nr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>macro</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>ATTR__TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>fill_one</name><argument_list>(<argument><expr><literal type="string">"expand"</literal></expr></argument>, <argument><expr><name>all_attrs</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>macro</name></name></expr></argument>, <argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>rem</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>determine_macros</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>all_attrs_item</name></name> <modifier>*</modifier></type><name>all_attrs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>attr_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>stack</name></expr>;</condition> <incr><expr><name>stack</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>num_matches</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>match_attr</name></name> <modifier>*</modifier></type><name>ma</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ma</name><operator>-&gt;</operator><name>is_macro</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>ma</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>attr</name><operator>-&gt;</operator><name>attr_nr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>all_attrs</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>macro</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>all_attrs</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>macro</name> <operator>=</operator> <name>ma</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>collect_some_attrs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>, <decl><type ref="prev"/><name>dirlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_slash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>basename_offset</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_slash</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <name>cp</name> <operator>-</operator> <name>path</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last_slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>basename_offset</name> <operator>=</operator> <name>last_slash</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirlen</name> <operator>=</operator> <name>last_slash</name> <operator>-</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>basename_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dirlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>prepare_attr_stack</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>all_attrs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_attr_hashmap</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>determine_macros</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rem</name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>all_attrs_nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>, <argument><expr><name>basename_offset</name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name></name></expr></argument>, <argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_check_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>collect_some_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>check</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>attr</name><operator>-&gt;</operator><name>attr_nr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>ATTR__UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>ATTR__UNSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_all_attrs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>attr_check_reset</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>collect_some_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>check</name><operator>-&gt;</operator><name>all_attrs_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>all_attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>ATTR__UNSET</name> <operator>||</operator> <name>value</name> <operator>==</operator> <name>ATTR__UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>attr_check_append</name><argument_list>(<argument><expr><name>check</name></expr></argument>, <argument><expr><call><name>git_attr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>attr_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_attr_hashmap</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>check_vector</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
