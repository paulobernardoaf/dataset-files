<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\notes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"notes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>













<struct>struct <name>int_node</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>











<struct>struct <name>leaf_node</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>key_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>val_oid</name></decl>;</decl_stmt>
}</block>;</struct>









<struct>struct <name>non_note</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TYPE_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TYPE_INTERNAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TYPE_NOTE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_TYPE_SUBTREE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PTR_TYPE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uintptr_t) (ptr) &amp; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR_PTR_TYPE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *) ((uintptr_t) (ptr) &amp; ~3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_PTR_TYPE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *) ((uintptr_t) (ptr) | (type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_NIBBLE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>sha1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((sha1)[(n) &gt;&gt; 1]) &gt;&gt; ((~(n) &amp; 0x01) &lt;&lt; 2)) &amp; 0x0f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_INDEX</name></cpp:macro> <cpp:value>(the_hash_algo-&gt;rawsz - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FANOUT_PATH_SEPARATORS</name></cpp:macro> <cpp:value>(the_hash_algo-&gt;rawsz - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FANOUT_PATH_SEPARATORS_MAX</name></cpp:macro> <cpp:value>((GIT_MAX_HEXSZ / 2) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBTREE_SHA1_PREFIXCMP</name><parameter_list>(<parameter><type><name>key_sha1</name></type></parameter>, <parameter><type><name>subtree_sha1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memcmp(key_sha1, subtree_sha1, subtree_sha1[KEY_INDEX]))</cpp:value></cpp:define>


<decl_stmt><decl><type><name><name>struct</name> <name>notes_tree</name></name></type> <name>default_notes_tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>display_notes_refs</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>display_notes_trees</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>load_subtree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>subtree</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
















<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>note_tree_search</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_sha1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>tree</name><operator>)</operator><operator>-&gt;</operator><name>a</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTR_TYPE_SUBTREE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUBTREE_SHA1_PREFIXCMP</name><argument_list>(<argument><expr><name>key_sha1</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tree</name><operator>)</operator><operator>-&gt;</operator><name>a</name></name><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_subtree</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>*</operator><name>tree</name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>note_tree_search</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>key_sha1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GET_NIBBLE</name><argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>, <argument><expr><name>key_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>tree</name><operator>)</operator><operator>-&gt;</operator><name>a</name></name><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PTR_TYPE_INTERNAL</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>tree</name> <operator>=</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>n</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>note_tree_search</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>key_sha1</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>PTR_TYPE_SUBTREE</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUBTREE_SHA1_PREFIXCMP</name><argument_list>(<argument><expr><name>key_sha1</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tree</name><operator>)</operator><operator>-&gt;</operator><name>a</name></name><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_subtree</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>*</operator><name>tree</name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>note_tree_search</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>key_sha1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<return>return <expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>tree</name><operator>)</operator><operator>-&gt;</operator><name>a</name></name><index>[<expr><name>i</name></expr>]</index><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>note_tree_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_sha1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>note_tree_search</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>key_sha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTR_TYPE_NOTE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasheq</name><argument_list>(<argument><expr><name>key_sha1</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>l</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>note_tree_consolidate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tree</name> <operator>&amp;&amp;</operator> <name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PTR_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PTR_TYPE_NOTE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>note_tree_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name><name>parent_stack</name><index>[<expr><name>GIT_MAX_RAWSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>note_tree_search</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PTR_TYPE_NOTE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>SET_PTR_TYPE</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PTR_TYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>parent_stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>GET_NIBBLE</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent_stack</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name><name>parent_stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>parent_stack</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>note_tree_consolidate</name><argument_list>(<argument><expr><name><name>parent_stack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>parent_stack</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>GET_NIBBLE</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>note_tree_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>new_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>note_tree_search</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PTR_TYPE_NULL</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>SET_PTR_TYPE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>PTR_TYPE_NOTE</name></expr>:</case>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PTR_TYPE_NOTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>combine_notes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>note_tree_remove</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PTR_TYPE_SUBTREE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUBTREE_SHA1_PREFIXCMP</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>load_subtree</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>PTR_TYPE_SUBTREE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUBTREE_SHA1_PREFIXCMP</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_subtree</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>note_tree_insert</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>combine_notes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTR_TYPE_NOTE</name> <operator>||</operator>
<call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PTR_TYPE_SUBTREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_node</name> <operator>=</operator> <operator>(</operator>struct <name>int_node</name> <operator>*</operator><operator>)</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>int_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>note_tree_insert</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>combine_notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>SET_PTR_TYPE</name><argument_list>(<argument><expr><name>new_node</name></expr></argument>, <argument><expr><name>PTR_TYPE_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>note_tree_insert</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>combine_notes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>note_tree_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PTR_TYPE_INTERNAL</name></expr>:</case>
<expr_stmt><expr><call><name>note_tree_free</name><argument_list>(<argument><expr><call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PTR_TYPE_NOTE</name></expr>:</case>
<case>case <expr><name>PTR_TYPE_SUBTREE</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>non_note_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>add_non_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>prev_non_note</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>non_note</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>non_note</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>prev_non_note</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>non_note_cmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><call><name>non_note_cmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>


<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <call><name>non_note_cmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>non_note_cmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>prev_non_note</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_subtree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>subtree</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>object_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hashsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subtree</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Could not read %s for notes-index"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subtree</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <name><name>subtree</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name><index>[<expr><name>KEY_INDEX</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix_len</name> <operator>&gt;=</operator> <name>hashsz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"prefix_len (%"</literal><name>PRIuMAX</name><literal type="string">") is out of range"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix_len</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"prefix_len (%"</literal><name>PRIuMAX</name><literal type="string">") is too small"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>object_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>subtree</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path_len</name> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>hashsz</name> <operator>-</operator> <name>prefix_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>handle_non_note</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hex_to_bytes</name><argument_list>(<argument><expr><name><name>object_oid</name><operator>.</operator><name>hash</name></name> <operator>+</operator> <name>prefix_len</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>,
<argument><expr><name>hashsz</name> <operator>-</operator> <name>prefix_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>handle_non_note</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>PTR_TYPE_NOTE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>path_len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>prefix_len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>handle_non_note</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hex_to_bytes</name><argument_list>(<argument><expr><name><name>object_oid</name><operator>.</operator><name>hash</name></name> <operator>+</operator> <name>len</name><operator>++</operator></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>handle_non_note</name>;</goto></block_content></block></if></if_stmt> 






<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>object_oid</name><operator>.</operator><name>hash</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hashsz</name> <operator>-</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object_oid</name><operator>.</operator><name>hash</name><index>[<expr><name>KEY_INDEX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>PTR_TYPE_SUBTREE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>handle_non_note</name>;</goto>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>note_tree_insert</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>combine_notes_concatenate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Failed to load %s %s into notes tree "</literal>
<literal type="string">"from %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>PTR_TYPE_NOTE</name></expr> ?</condition><then> <expr><literal type="string">"note"</literal></expr> </then><else>: <expr><literal type="string">"subtree"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object_oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

<label><name>handle_non_note</name>:</label>









<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>non_note_path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subtree</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prefix_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>non_note_path</name></expr></argument>, <argument><expr><operator>*</operator><name>q</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>non_note_path</name></expr></argument>, <argument><expr><operator>*</operator><name>q</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>non_note_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>non_note_path</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_non_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>non_note_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>determine_fanout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fanout</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>fanout</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>fanout</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PTR_TYPE_SUBTREE</name></expr>:</case>
<case>case <expr><name>PTR_TYPE_INTERNAL</name></expr>:</case>
<continue>continue;</continue>
<default>default:</default>
<return>return <expr><name>fanout</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name>fanout</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FANOUT_PATH_MAX</name></cpp:macro> <cpp:value>GIT_MAX_HEXSZ + FANOUT_PATH_SEPARATORS_MAX + 1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>construct_path_with_fanout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fanout</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex_hash</name> <init>= <expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fanout</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>fanout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex_hash</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex_hash</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fanout</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>FANOUT_PATH_MAX</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>hex_hash</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>for_each_note_helper</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>fanout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>each_note_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>path</name><index>[<expr><name>FANOUT_PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>fanout</name> <operator>=</operator> <call><name>determine_fanout</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>fanout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<label><name>redo</name>:</label>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>GET_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PTR_TYPE_INTERNAL</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>for_each_note_helper</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>fanout</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PTR_TYPE_SUBTREE</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>fanout</name> <operator>&amp;&amp;</operator>
<name>flags</name> <operator>&amp;</operator> <name>FOR_EACH_NOTE_YIELD_SUBTREES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>path_len</name> <init>=
<expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name><index>[<expr><name>KEY_INDEX</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>fanout</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path_len</name> <operator>&lt;</operator> <name>FANOUT_PATH_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>construct_path_with_fanout</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>,
<argument><expr><name>fanout</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>path_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>path_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>fanout</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FOR_EACH_NOTE_DONT_UNPACK_SUBTREES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_subtree</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>redo</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PTR_TYPE_NOTE</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>CLR_PTR_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>construct_path_with_fanout</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>fanout</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>tree_write_stack</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>matches_tree_write_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>tws</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>full_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>full_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>full_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>full_path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_tree_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>path_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier>
<name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%o %.*s%c"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tree_write_stack_init_subtree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>tws</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>tws</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>tree_write_stack</name> <operator>*</operator><operator>)</operator>
<call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tree_write_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tws</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tree_write_stack_finish_subtree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>tws</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>tws</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tree_write_stack_finish_subtree</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_object_file</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>tree_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tws</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tws</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">040000</literal></expr></argument>, <argument><expr><name><name>tws</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_each_note_helper</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>tws</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>tws</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>&lt;</operator> <name>path_len</name> <operator>&amp;&amp;</operator>
<call><name>matches_tree_write_stack</name><argument_list>(<argument><expr><name>tws</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tws</name> <operator>=</operator> <name><name>tws</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tree_write_stack_finish_subtree</name><argument_list>(<argument><expr><name>tws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>path_len</name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tree_write_stack_init_subtree</name><argument_list>(<argument><expr><name>tws</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tws</name> <operator>=</operator> <name><name>tws</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memchr</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><name>path_len</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>write_tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tws</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>path</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><name>path_len</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>write_each_note_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>tree_write_stack</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>nn_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>nn_prev</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_each_non_note_until</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>note_path</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>write_each_note_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>nn_prev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr> </then><else>: <expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>nn_list</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>note_path</name> <operator>||</operator> <operator>(</operator><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>note_path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>note_path</name> <operator>&amp;&amp;</operator> <name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_each_note_helper</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nn_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_each_note</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>note_oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>note_path</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>write_each_note_data</name></name> <modifier>*</modifier></type><name>d</name> <init>=
<expr><operator>(</operator>struct <name>write_each_note_data</name> <operator>*</operator><operator>)</operator> <name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>note_path_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>note_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0100644</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>note_path</name><index>[<expr><name>note_path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>note_path_len</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>note_path</name><index>[<expr><name>note_path_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">040000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>note_path_len</name> <operator>&lt;=</operator> <name>GIT_MAX_HEXSZ</name> <operator>+</operator> <name>FANOUT_PATH_SEPARATORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>write_each_non_note_until</name><argument_list>(<argument><expr><name>note_path</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>write_each_note_helper</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>note_path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>note_oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>note_delete_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>note_delete_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prune_notes_helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>note_oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>note_path</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>note_delete_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>l</name> <init>= <expr><operator>(</operator>struct <name>note_delete_list</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>note_delete_list</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_object_file</name><argument_list>(<argument><expr><name>object_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>note_delete_list</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sha1</name></name> <operator>=</operator> <name><name>object_oid</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>combine_notes_concatenate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cur_len</name></decl>, <decl><type ref="prev"/><name>new_len</name></decl>, <decl><type ref="prev"/><name>buf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>cur_type</name></decl>, <decl><type ref="prev"/><name>new_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_msg</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_msg</name> <operator>||</operator> <operator>!</operator><name>new_len</name> <operator>||</operator> <name>new_type</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>cur_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_msg</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>cur_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_msg</name> <operator>||</operator> <operator>!</operator><name>cur_len</name> <operator>||</operator> <name>cur_type</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cur_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>cur_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cur_msg</name><index>[<expr><name>cur_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>buf_len</name> <operator>=</operator> <name>cur_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>new_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cur_msg</name></expr></argument>, <argument><expr><name>cur_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cur_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cur_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>cur_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>new_msg</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cur_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_object_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>, <argument><expr><name>cur_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>combine_notes_overwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>cur_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>combine_notes_ignore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>string_list_add_note_lines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>OBJ_BLOB</name> <operator>||</operator> <operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name> <operator>!=</operator> <name>OBJ_BLOB</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>string_list_split</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_list_join_lines_helper</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>combine_notes_cat_sort_uniq</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>sort_uniq_list</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>string_list_add_note_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sort_uniq_list</name></expr></argument>, <argument><expr><name>cur_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>string_list_add_note_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sort_uniq_list</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>string_list_remove_empty_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sort_uniq_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sort_uniq_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_remove_duplicates</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sort_uniq_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>for_each_string_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sort_uniq_list</name></expr></argument>,
<argument><expr><name>string_list_join_lines_helper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_object_file</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>, <argument><expr><name>cur_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sort_uniq_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>string_list_add_one_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>unsorted_string_list_has_string</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>string_list_add_refs_by_glob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>strdup_strings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>has_glob_specials</name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>for_each_glob_ref</name><argument_list>(<argument><expr><name>string_list_add_one_ref</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name>glob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"notes ref %s is invalid"</literal></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>unsorted_string_list_has_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>string_list_add_refs_from_colon_sep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>globs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>split</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>globs_copy</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>globs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>string_list_split_in_place</name><argument_list>(<argument><expr><operator>&amp;</operator><name>split</name></expr></argument>, <argument><expr><name>globs_copy</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_remove_empty_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>split</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>split</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_add_refs_by_glob</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>split</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>split</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>globs_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>notes_display_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>load_refs</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>load_refs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"notes.displayref"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>string_list_add_refs_by_glob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display_notes_refs</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_notes_ref</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>notes_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notes_ref</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>notes_ref</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>GIT_NOTES_REF_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notes_ref</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>notes_ref</name> <operator>=</operator> <name>notes_ref_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notes_ref</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>notes_ref</name> <operator>=</operator> <name>GIT_NOTES_DEFAULT_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>notes_ref</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>notes_ref</name></decl></parameter>,
<parameter><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>, <decl><type ref="prev"/><name>object_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name></type> <name>root_tree</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notes_ref</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>notes_ref</name> <operator>=</operator> <call><name>default_notes_ref</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>combine_notes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>combine_notes</name> <operator>=</operator> <name>combine_notes_concatenate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <operator>(</operator>struct <name>int_node</name> <operator>*</operator><operator>)</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>int_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>prev_non_note</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name>notes_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>update_ref</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NOTES_INIT_WRITABLE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>t</name><operator>-&gt;</operator><name>ref</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>combine_notes</name></name> <operator>=</operator> <name>combine_notes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTES_INIT_EMPTY</name> <operator>||</operator> <operator>!</operator><name>notes_ref</name> <operator>||</operator>
<call><name>get_oid_treeish</name><argument_list>(<argument><expr><name>notes_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTES_INIT_WRITABLE</name> <operator>&amp;&amp;</operator> <call><name>read_ref</name><argument_list>(<argument><expr><name>notes_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Cannot use notes ref %s"</literal></expr></argument>, <argument><expr><name>notes_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_tree_entry</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_oid</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Failed to read notes tree referenced by %s (%s)"</literal></expr></argument>,
<argument><expr><name>notes_ref</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>object_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root_tree</name><operator>.</operator><name>key_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root_tree</name><operator>.</operator><name>val_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_subtree</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_tree</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>load_notes_trees</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>trees</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>trees</name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>refs</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>notes_tree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_notes</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>combine_notes_ignore</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trees</name><index>[<expr><name>counter</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>trees</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>trees</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>use_default_notes</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable_default_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>show_notes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>use_default_notes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>show_notes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enable_ref_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>show_notes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expand_notes_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>extra_notes_refs</name></name></expr></argument>,
<argument><expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>show_notes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>disable_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>show_notes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>use_default_notes</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extra_notes_refs</name><operator>.</operator><name>strdup_strings</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>extra_notes_refs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extra_notes_refs</name><operator>.</operator><name>strdup_strings</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>show_notes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>display_ref_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>load_config_refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>display_notes_refs</name><operator>.</operator><name>strdup_strings</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>display_notes_trees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>use_default_notes</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>use_default_notes</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>extra_notes_refs</name><operator>.</operator><name>nr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display_notes_refs</name></expr></argument>, <argument><expr><call><name>default_notes_ref</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>display_ref_env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>GIT_NOTES_DISPLAY_REF_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>display_ref_env</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_add_refs_from_colon_sep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display_notes_refs</name></expr></argument>,
<argument><expr><name>display_ref_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>load_config_refs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>load_config_refs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>notes_display_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>load_config_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;opt-&gt;extra_notes_refs</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>string_list_add_refs_by_glob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display_notes_refs</name></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>display_notes_trees</name> <operator>=</operator> <call><name>load_notes_trees</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display_notes_refs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display_notes_refs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>note_oid</name></decl></parameter>, <parameter><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>combine_notes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>combine_notes</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>combine_notes</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator>struct <name>leaf_node</name> <operator>*</operator><operator>)</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>leaf_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>key_oid</name></name></expr></argument>, <argument><expr><name>object_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>val_oid</name></name></expr></argument>, <argument><expr><name>note_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>note_tree_insert</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>PTR_TYPE_NOTE</name></expr></argument>, <argument><expr><name>combine_notes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>object_sha1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>key_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>object_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>.</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_tree_remove</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>.</operator><name>val_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>get_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>leaf_node</name></name> <modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>note_tree_find</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>found</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>found</name><operator>-&gt;</operator><name>val_oid</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>for_each_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>each_note_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>for_each_note_helper</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>write_notes_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_write_stack</name></name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>write_each_note_data</name></name></type> <name>cb_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>root</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>root</name><operator>.</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_data</name><operator>.</operator><name>root</name></name> <operator>=</operator> <operator>&amp;</operator><name>root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_data</name><operator>.</operator><name>nn_list</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_data</name><operator>.</operator><name>nn_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FOR_EACH_NOTE_DONT_UNPACK_SUBTREES</name> <operator>|</operator>
<name>FOR_EACH_NOTE_YIELD_SUBTREES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>for_each_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>write_each_note</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_data</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>write_each_non_note_until</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_data</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>tree_write_stack_finish_subtree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>write_object_file</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>tree_type</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>prune_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>note_delete_list</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>for_each_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prune_notes_helper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTES_PRUNE_VERBOSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>sha1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NOTES_PRUNE_DRYRUN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>sha1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>note_tree_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>prev_non_note</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>first_non_note</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>first_non_note</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>prev_non_note</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>notes_tree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>format_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>utf8</name><index>[]</index></name> <init>= <expr><literal type="string">"utf-8"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>msg_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>linelen</name></decl>, <decl><type ref="prev"/><name>msglen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>default_notes_tree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_notes</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>get_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>object_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>msg</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msglen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_encoding</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>output_encoding</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_encoding_utf8</name><argument_list>(<argument><expr><name>output_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reencoded</name> <init>= <expr><call><name>reencode_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>output_encoding</name></expr></argument>, <argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reencoded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>reencoded</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msglen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>msglen</name> <operator>&amp;&amp;</operator> <name><name>msg</name><index>[<expr><name>msglen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msglen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raw</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>GIT_NOTES_DEFAULT_REF</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\nNotes:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"notes/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\nNotes (%s):\n"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>msg_p</name> <operator>=</operator> <name>msg</name></expr>;</init> <condition><expr><name>msg_p</name> <operator>&lt;</operator> <name>msg</name> <operator>+</operator> <name>msglen</name></expr>;</condition> <incr><expr><name>msg_p</name> <operator>+=</operator> <name>linelen</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>msg_p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>msg_p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>raw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>msg_p</name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>format_display_notes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>display_notes_trees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>display_notes_trees</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>format_note</name><argument_list>(<argument><expr><name><name>display_notes_trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>object_oid</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>,
<argument><expr><name>output_encoding</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>copy_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>from_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>to_obj</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>note</name> <init>= <expr><call><name>get_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>from_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>existing_note</name> <init>= <expr><call><name>get_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>to_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name>existing_note</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>note</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>add_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>to_obj</name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr><name>combine_notes</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>existing_note</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>add_note</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>to_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>, <argument><expr><name>combine_notes</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>expand_notes_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"refs/notes/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"notes/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_insertstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_insertstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"refs/notes/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>expand_loose_notes_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>object</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>expand_notes_ref</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
