<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\transport.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRANSPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter-options.h"</cpp:file></cpp:include>

<struct_decl>struct <name>string_list</name>;</struct_decl>

<struct>struct <name>git_transport_options</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>thin</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>keep</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>followtags</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>check_self_contained_and_connected</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>self_contained_and_connected</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>update_shallow</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>deepen_relative</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>from_promisor</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>no_dependents</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>









<decl_stmt><decl><type><name>unsigned</name></type> <name>connectivity_checked</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>deepen_since</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>deepen_not</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uploadpack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>receivepack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>push_cas_option</name></name> <modifier>*</modifier></type><name>cas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name></type> <name>filter_options</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>negotiation_tips</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>transport_family</name> <block>{
<decl><name>TRANSPORT_FAMILY_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TRANSPORT_FAMILY_IPV4</name></decl>,
<decl><name>TRANSPORT_FAMILY_IPV6</name></decl>
}</block>;</enum>

<struct>struct <name>transport</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>transport_vtable</name></name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>got_remote_refs</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>cannot_reuse</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>cloning</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>stateless_rpc</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>push_options</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>server_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pack_lockfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name></type> <name>verbose</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>progress</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_options</name></name> <modifier>*</modifier></type><name>smart_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>transport_family</name></name></type> <name>family</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_ALL</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_FORCE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_DRY_RUN</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_MIRROR</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_PORCELAIN</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_SET_UPSTREAM</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_RECURSE_SUBMODULES_CHECK</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_PRUNE</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_RECURSE_SUBMODULES_ON_DEMAND</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_NO_HOOK</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_FOLLOW_TAGS</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_CERT_ALWAYS</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_CERT_IF_ASKED</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_ATOMIC</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_PUSH_OPTIONS</name></cpp:macro> <cpp:value>(1&lt;&lt;14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPORT_RECURSE_SUBMODULES_ONLY</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>transport_summary_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> <name>is_transport_allowed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from_user</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>transport_check_allowed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_UPLOADPACK</name></cpp:macro> <cpp:value>"uploadpack"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_RECEIVEPACK</name></cpp:macro> <cpp:value>"receivepack"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_THIN</name></cpp:macro> <cpp:value>"thin"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_CAS</name></cpp:macro> <cpp:value>"cas"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_KEEP</name></cpp:macro> <cpp:value>"keep"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_DEPTH</name></cpp:macro> <cpp:value>"depth"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_DEEPEN_SINCE</name></cpp:macro> <cpp:value>"deepen-since"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_DEEPEN_NOT</name></cpp:macro> <cpp:value>"deepen-not"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_DEEPEN_RELATIVE</name></cpp:macro> <cpp:value>"deepen-relative"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_FOLLOWTAGS</name></cpp:macro> <cpp:value>"followtags"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_UPDATE_SHALLOW</name></cpp:macro> <cpp:value>"updateshallow"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_PUSH_CERT</name></cpp:macro> <cpp:value>"pushcert"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_FROM_PROMISOR</name></cpp:macro> <cpp:value>"from-promisor"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_NO_DEPENDENTS</name></cpp:macro> <cpp:value>"no-dependents"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_LIST_OBJECTS_FILTER</name></cpp:macro> <cpp:value>"filter"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_OPT_ATOMIC</name></cpp:macro> <cpp:value>"atomic"</cpp:value></cpp:define>





<function_decl><type><name>int</name></type> <name>transport_set_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>transport_set_verbosity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force_progress</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REJECT_NON_FF_HEAD</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REJECT_NON_FF_OTHER</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REJECT_ALREADY_EXISTS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REJECT_FETCH_FIRST</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REJECT_NEEDS_FORCE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>transport_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>connection</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type> <name>reject_reasons</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>transport_get_remote_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>ref_prefixes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>transport_fetch_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>transport_unlock_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>transport_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>transport_anonymize_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>transport_take_over</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>transport_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>transport_helper_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bidirectional_transfer_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>transport_update_tracking_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>transport_refs_pushed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>transport_print_push_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>porcelain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>reject_reasons</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
