<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\parse-options.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>disallow_abbreviated_options</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_SHORT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_UNSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>optbug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>short_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"BUG: switch '%c' (--%s) %s"</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>short_name</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"BUG: option '%s' %s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"BUG: switch '%c' %s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>short_name</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>parse_opt_result</name></name></type> <name>get_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_LASTARG_DEFAULT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name><name>p</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s requires a value"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fix_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>file</name> <operator>||</operator> <operator>!</operator><name>prefix</name> <operator>||</operator> <call><name>is_absolute_path</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>prefix_filename</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>parse_opt_result</name></name></type> <name>opt_command_mode_error</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>all_opts</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>that</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>that_name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>that</name> <operator>=</operator> <name>all_opts</name></expr>;</init> <condition><expr><name><name>that</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>that</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>that</name> <operator>==</operator> <name>opt</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>that</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_CMDMODE</name><operator>)</operator> <operator>||</operator>
<name><name>that</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator>
<name><name>that</name><operator>-&gt;</operator><name>defval</name></name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>that</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>that_name</name></expr></argument>, <argument><expr><literal type="string">"--%s"</literal></expr></argument>, <argument><expr><name><name>that</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>that_name</name></expr></argument>, <argument><expr><literal type="string">"-%c"</literal></expr></argument>, <argument><expr><name><name>that</name><operator>-&gt;</operator><name>short_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s is incompatible with %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>that_name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>that_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PARSE_OPT_ERROR</name></expr>;</return>
</block_content>}</block></for>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s : incompatible with something else"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>parse_opt_result</name></name></type> <name>get_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>all_opts</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>unset</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>OPT_UNSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s takes no value"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unset</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NONEG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s isn't available"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OPT_SHORT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NOARG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s takes no value"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_CMDMODE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opt_command_mode_error</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>all_opts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPTION_LOWLEVEL_CALLBACK</name></expr>:</case>
<return>return <expr><call><name><name>opt</name><operator>-&gt;</operator><name>ll_callback</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>OPTION_BIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>|=</operator> <name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OPTION_NEGBIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>|=</operator> <name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OPTION_BITOP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"BITOP can't have unset form"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>opt</name><operator>-&gt;</operator><name>extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>|=</operator> <name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OPTION_COUNTUP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <ternary><condition><expr><name>unset</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OPTION_SET_INT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <ternary><condition><expr><name>unset</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OPTION_STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>get_arg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OPTION_FILENAME</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>get_arg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fix_filename</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>

<case>case <expr><name>OPTION_CALLBACK</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_unset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_unset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NOARG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_unset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_unset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>get_arg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p_unset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_arg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>callback</name></name><operator>)</operator><operator>(</operator><name>opt</name><operator>,</operator> <name>p_arg</name><operator>,</operator> <name>p_unset</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call>(<modifier>*</modifier><name><name>opt</name><operator>-&gt;</operator><name>ll_callback</name></name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>p_arg</name></expr></argument>, <argument><expr><name>p_unset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>
<case>case <expr><name>OPTION_INTEGER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_arg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>OPTION_MAGNITUDE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_arg</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_ulong</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a non-negative integer value"</literal>
<literal type="string">" with an optional k/m/g suffix"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"opt-&gt;type %d should not happen"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>parse_opt_result</name></name></type> <name>parse_short_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>all_opts</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>numopt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>options</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>options</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>short_name</name></name> <operator>==</operator> <operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><call><name>get_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>all_opts</name></expr></argument>, <argument><expr><name>OPT_SHORT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPTION_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>numopt</name> <operator>=</operator> <name>options</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>numopt</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><index>[<expr><name>len</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>+</operator> <name>len</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>numopt</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>numopt</name><operator>-&gt;</operator><name>callback</name></name><operator>)</operator><operator>(</operator><name>numopt</name><operator>,</operator> <name>arg</name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>numopt</name><operator>-&gt;</operator><name>ll_callback</name></name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>numopt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>PARSE_OPT_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>array</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_alias</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>one_opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>another_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>alias_groups</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>one_opt</name><operator>-&gt;</operator><name>long_name</name></name> <operator>||</operator> <operator>!</operator><name><name>another_opt</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>alias_groups</name></name></expr>;</init> <condition><expr><operator>*</operator><name>group</name></expr>;</condition> <incr><expr><name>group</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>has_string</name><argument_list>(<argument><expr><name><name>one_opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>has_string</name><argument_list>(<argument><expr><name><name>another_opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>parse_opt_result</name></name></type> <name>parse_long_opt</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>all_opts</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_end</name> <init>= <expr><call><name>strchrnul</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>abbrev_option</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ambiguous_option</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abbrev_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ambiguous_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>options</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>options</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>long_name</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>long_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>opt_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>long_name</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPTION_ARGUMENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rest</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s takes no value"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>optname</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>options</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>defval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>out</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>cpidx</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>arg</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>PARSE_OPT_DONE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rest</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_KEEP_UNKNOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>long_name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg_end</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>is_abbreviated</name>:</label>
<if_stmt><if>if <condition>(<expr><name>abbrev_option</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_alias</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>abbrev_option</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>ambiguous_option</name> <operator>=</operator> <name>abbrev_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ambiguous_flags</name> <operator>=</operator> <name>abbrev_flags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OPT_UNSET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>arg_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>abbrev_option</name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><name>abbrev_flags</name> <operator>=</operator> <name>flags</name> <operator>^</operator> <name>opt_flags</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NONEG</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><literal type="string">"no-"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>OPT_UNSET</name></expr>;</expr_stmt>
<goto>goto <name>is_abbreviated</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>long_name</name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>long_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opt_flags</name> <operator>|=</operator> <name>OPT_UNSET</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>OPT_UNSET</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>long_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>long_name</name></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_abbreviated</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>rest</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>get_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>all_opts</name></expr></argument>, <argument><expr><name>flags</name> <operator>^</operator> <name>opt_flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>disallow_abbreviated_options</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ambiguous_option</name> <operator>||</operator> <name>abbrev_option</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"disallowed abbreviated or ambiguous option '%.*s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ambiguous_option</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ambiguous option: %s "</literal>
<literal type="string">"(could be --%s%s or --%s%s)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>arg</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>ambiguous_flags</name> <operator>&amp;</operator> <name>OPT_UNSET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"no-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>ambiguous_option</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>abbrev_flags</name> <operator>&amp;</operator> <name>OPT_UNSET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"no-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>abbrev_option</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PARSE_OPT_HELP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>abbrev_option</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>get_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>abbrev_option</name></expr></argument>, <argument><expr><name>all_opts</name></expr></argument>, <argument><expr><name>abbrev_flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>PARSE_OPT_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_nodash_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>all_opts</name> <init>= <expr><name>options</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>options</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>options</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NODASH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>short_name</name></name> <operator>==</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>get_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>all_opts</name></expr></argument>, <argument><expr><name>OPT_SHORT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_typos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"did you mean `--%s` (with two dashes)?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>options</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>options</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"did you mean `--%s` (with two dashes)?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_options_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>short_opts</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>short_opts</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short_opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>opts</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_LASTARG_DEFAULT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>optbug</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"uses incompatible flags "</literal>
<literal type="string">"LASTARG_DEFAULT and OPTARG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>short_name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x7F</literal> <operator>&lt;=</operator> <name><name>opts</name><operator>-&gt;</operator><name>short_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>optbug</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"invalid short name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>short_opts</name><index>[<expr><name><name>opts</name><operator>-&gt;</operator><name>short_name</name></name></expr>]</index></name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>optbug</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"short name already used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NODASH</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NOARG</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NONEG</name><operator>)</operator> <operator>||</operator>
<name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>optbug</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"uses feature "</literal>
<literal type="string">"not supported for dashless options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPTION_COUNTUP</name></expr>:</case>
<case>case <expr><name>OPTION_BIT</name></expr>:</case>
<case>case <expr><name>OPTION_NEGBIT</name></expr>:</case>
<case>case <expr><name>OPTION_SET_INT</name></expr>:</case>
<case>case <expr><name>OPTION_NUMBER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NOARG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>optbug</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"should not accept an argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_CALLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>callback</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ll_callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"OPTION_CALLBACK needs one callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>callback</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>ll_callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"OPTION_CALLBACK can't have two callbacks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_LOWLEVEL_CALLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ll_callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"OPTION_LOWLEVEL_CALLBACK needs a callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"OPTION_LOWLEVEL_CALLBACK needs no high level callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_ALIAS</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"OPT_ALIAS() should not remain at this point. "</literal>
<literal type="string">"Are you using parse_options_step() directly?\n"</literal>
<literal type="string">"That case is not supported yet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<empty_stmt>;</empty_stmt> 
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>argh</name></name> <operator>&amp;&amp;</operator>
<call><name>strcspn</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>argh</name></name></expr></argument>, <argument><expr><literal type="string">" _"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>argh</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>optbug</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"multi-word argh should use dash to separate words"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_options_start_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PARSE_OPT_ONE_SHOT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpidx</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PARSE_OPT_KEEP_ARGV0</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PARSE_OPT_KEEP_UNKNOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PARSE_OPT_STOP_AT_NON_OPTION</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PARSE_OPT_ONE_SHOT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"STOP_AT_NON_OPTION and KEEP_UNKNOWN don't go together"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PARSE_OPT_ONE_SHOT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PARSE_OPT_KEEP_ARGV0</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Can't keep argv0 if you don't have it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>parse_options_check</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_options_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_options_start_1</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_negated_gitcomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_noopts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>printed_dashdash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>opts</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>has_unset_form</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PARSE_OPT_HIDDEN</name> <operator>|</operator> <name>PARSE_OPT_NOCOMPLETE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NONEG</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPTION_STRING</name></expr>:</case>
<case>case <expr><name>OPTION_FILENAME</name></expr>:</case>
<case>case <expr><name>OPTION_INTEGER</name></expr>:</case>
<case>case <expr><name>OPTION_MAGNITUDE</name></expr>:</case>
<case>case <expr><name>OPTION_CALLBACK</name></expr>:</case>
<case>case <expr><name>OPTION_BIT</name></expr>:</case>
<case>case <expr><name>OPTION_NEGBIT</name></expr>:</case>
<case>case <expr><name>OPTION_COUNTUP</name></expr>:</case>
<case>case <expr><name>OPTION_SET_INT</name></expr>:</case>
<expr_stmt><expr><name>has_unset_form</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_unset_form</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nr_noopts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" --%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nr_noopts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nr_noopts</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>printed_dashdash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" --"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>printed_dashdash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" --no-%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nr_noopts</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_gitcomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>original_opts</name> <init>= <expr><name>opts</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr_noopts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>opts</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PARSE_OPT_HIDDEN</name> <operator>|</operator> <name>PARSE_OPT_NOCOMPLETE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPTION_GROUP</name></expr>:</case>
<continue>continue;</continue>
<case>case <expr><name>OPTION_STRING</name></expr>:</case>
<case>case <expr><name>OPTION_FILENAME</name></expr>:</case>
<case>case <expr><name>OPTION_INTEGER</name></expr>:</case>
<case>case <expr><name>OPTION_MAGNITUDE</name></expr>:</case>
<case>case <expr><name>OPTION_CALLBACK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NOARG</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_LASTARG_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="string">"="</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_COMP_ARG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="string">"="</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nr_noopts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" --%s%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>show_negated_gitcomp</name><argument_list>(<argument><expr><name>original_opts</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_negated_gitcomp</name><argument_list>(<argument><expr><name>original_opts</name></expr></argument>, <argument><expr><name>nr_noopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PARSE_OPT_COMPLETE</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>preprocess_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>newopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>, <decl><type ref="prev"/><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr_aliases</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>nr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>OPTION_ALIAS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nr_aliases</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nr_aliases</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>newopt</name></expr></argument>, <argument><expr><name>nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name>newopt</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias_groups</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>nr_aliases</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>alias</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>short_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>OPTION_ALIAS</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>short_name</name> <operator>=</operator> <name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>short_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>long_name</name> <operator>=</operator> <name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>source</name> <operator>=</operator> <name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>long_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"An alias must have long option name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>options</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>OPTION_ALIAS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"No please. Nested aliases are not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newopt</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>options</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newopt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>short_name</name> <operator>=</operator> <name>short_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_name</name> <operator>=</operator> <name>long_name</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>nr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"could not find source option '%s' of alias '%s'"</literal></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias_groups</name><index>[<expr><name>alias</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>newopt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias_groups</name><index>[<expr><name>alias</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>options</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias_groups</name><index>[<expr><name>alias</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alias</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>newopt</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usage_with_options_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>parse_options_step</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>usagestr</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>internal_help</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NO_INTERNAL_HELP</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr><operator>,</operator> <expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_ONE_SHOT</name> <operator>&amp;&amp;</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>!</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_nodash_opt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_STOP_AT_NON_OPTION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSE_OPT_NON_OPTION</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>out</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cpidx</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>internal_help</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>show_usage</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-git-completion-helper"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>show_gitcomp</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>parse_short_opt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PARSE_OPT_ERROR</name></expr>:</case>
<return>return <expr><name>PARSE_OPT_ERROR</name></expr>;</return>
<case>case <expr><name>PARSE_OPT_UNKNOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_typos</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>internal_help</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>show_usage</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>unknown</name>;</goto>
<case>case <expr><name>PARSE_OPT_NON_OPTION</name></expr>:</case>
<case>case <expr><name>PARSE_OPT_HELP</name></expr>:</case>
<case>case <expr><name>PARSE_OPT_COMPLETE</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"parse_short_opt() cannot return these"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>PARSE_OPT_DONE</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_typos</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>parse_short_opt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PARSE_OPT_ERROR</name></expr>:</case>
<return>return <expr><name>PARSE_OPT_ERROR</name></expr>;</return>
<case>case <expr><name>PARSE_OPT_UNKNOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>internal_help</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>show_usage</name>;</goto></block_content></block></if></if_stmt>






<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<goto>goto <name>unknown</name>;</goto>
<case>case <expr><name>PARSE_OPT_NON_OPTION</name></expr>:</case>
<case>case <expr><name>PARSE_OPT_COMPLETE</name></expr>:</case>
<case>case <expr><name>PARSE_OPT_HELP</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"parse_short_opt() cannot return these"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>PARSE_OPT_DONE</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"end-of-options"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_KEEP_DASHDASH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>internal_help</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"help-all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>usage_with_options_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>usagestr</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>internal_help</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>show_usage</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>parse_long_opt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PARSE_OPT_ERROR</name></expr>:</case>
<return>return <expr><name>PARSE_OPT_ERROR</name></expr>;</return>
<case>case <expr><name>PARSE_OPT_UNKNOWN</name></expr>:</case>
<goto>goto <name>unknown</name>;</goto>
<case>case <expr><name>PARSE_OPT_HELP</name></expr>:</case>
<goto>goto <name>show_usage</name>;</goto>
<case>case <expr><name>PARSE_OPT_NON_OPTION</name></expr>:</case>
<case>case <expr><name>PARSE_OPT_COMPLETE</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"parse_long_opt() cannot return these"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>PARSE_OPT_DONE</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<continue>continue;</continue>
<label><name>unknown</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_ONE_SHOT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_KEEP_UNKNOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSE_OPT_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>out</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cpidx</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>PARSE_OPT_DONE</name></expr>;</return>

<label><name>show_usage</name>:</label>
<return>return <expr><call><name>usage_with_options_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>usagestr</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_options_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_ONE_SHOT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MOVE_ARRAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpidx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>out</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cpidx</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>cpidx</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>usagestr</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>real_options</name></decl>;</decl_stmt>

<expr_stmt><expr><name>disallow_abbreviated_options</name> <operator>=</operator>
<call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_DISALLOW_ABBREVIATED_OPTIONS"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>real_options</name> <operator>=</operator> <call><name>preprocess_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>real_options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>options</name> <operator>=</operator> <name>real_options</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>parse_options_start_1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>parse_options_step</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>usagestr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PARSE_OPT_HELP</name></expr>:</case>
<case>case <expr><name>PARSE_OPT_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>PARSE_OPT_COMPLETE</name></expr>:</case>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>PARSE_OPT_NON_OPTION</name></expr>:</case>
<case>case <expr><name>PARSE_OPT_DONE</name></expr>:</case>
<break>break;</break>
<default>default:</default> 
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown option `%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>.</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown switch `%c'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name><name>ctx</name><operator>.</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown non-ascii option in string: `%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ctx</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>usagestr</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>precompose_argv</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>real_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>alias_groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>parse_options_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>usage_argh</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>literal</name> <init>= <expr><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_LITERAL_ARGHELP</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>argh</name></name> <operator>||</operator> <operator>!</operator><operator>!</operator><call><name>strpbrk</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>argh</name></name></expr></argument>, <argument><expr><literal type="string">"()&lt;&gt;[]|"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_OPTARG</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>literal</name></expr> ?</condition><then> <expr><literal type="string">"[=%s]"</literal></expr> </then><else>: <expr><literal type="string">"[=&lt;%s&gt;]"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>literal</name></expr> ?</condition><then> <expr><literal type="string">"[%s]"</literal></expr> </then><else>: <expr><literal type="string">"[&lt;%s&gt;]"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>literal</name></expr> ?</condition><then> <expr><literal type="string">" %s"</literal></expr> </then><else>: <expr><literal type="string">" &lt;%s&gt;"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>utf8_fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>argh</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>argh</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_OPTS_WIDTH</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_GAP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>usage_with_options_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>usagestr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><name>stderr</name></expr> </then><else>: <expr><name>stdout</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_newline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>usagestr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSE_OPT_HELP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_SHELL_EVAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"cat &lt;&lt;\\EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"usage: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><operator>*</operator><name>usagestr</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>usagestr</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>usagestr</name></expr>)</condition><block type="pseudo"><block_content>




<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" or: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><operator>*</operator><name>usagestr</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>*</operator><name>usagestr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>usagestr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><operator>*</operator><name>usagestr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>usagestr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>need_newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPTION_END</name></expr>;</condition> <incr><expr><name>opts</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPTION_GROUP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>opts</name><operator>-&gt;</operator><name>help</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>full</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_HIDDEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_newline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>short_name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NODASH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>short_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"-%c"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>short_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>short_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"--%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPTION_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>utf8_fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-NUM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_LITERAL_ARGHELP</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_NOARG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>usage_argh</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name>USAGE_OPTS_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>USAGE_OPTS_WIDTH</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>USAGE_OPTS_WIDTH</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPTION_ALIAS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>pad</name> <operator>+</operator> <name>USAGE_GAP</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"alias of --%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>opts</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"%*s%s\n"</literal></expr></argument>, <argument><expr><name>pad</name> <operator>+</operator> <name>USAGE_GAP</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSE_OPT_SHELL_EVAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"EOF\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>PARSE_OPT_HELP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>NORETURN</name></type> <name>usage_with_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>usagestr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>usage_with_options_internal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>usagestr</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>NORETURN</name></type> <name>usage_msg_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>usagestr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fatal: %s\n\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>usagestr</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>OPT_SHORT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"switch `%c'"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>short_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>OPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"option `no-%s'"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"option `%s'"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
