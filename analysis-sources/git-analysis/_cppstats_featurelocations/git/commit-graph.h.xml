<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\commit-graph.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMMIT_GRAPH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMIT_GRAPH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_TEST_COMMIT_GRAPH</name></cpp:macro> <cpp:value>"GIT_TEST_COMMIT_GRAPH"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_TEST_COMMIT_GRAPH_DIE_ON_LOAD</name></cpp:macro> <cpp:value>"GIT_TEST_COMMIT_GRAPH_DIE_ON_LOAD"</cpp:value></cpp:define>

<struct_decl>struct <name>commit</name>;</struct_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get_commit_graph_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>open_commit_graph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_file</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> <name>parse_commit_in_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>load_commit_graph_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>get_commit_tree_in_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>commit_graph</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>graph_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>hash_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>num_chunks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_commits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_commits_in_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>base_graph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>chunk_oid_fanout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chunk_oid_lookup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chunk_commit_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chunk_extra_edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chunk_base_graphs</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>load_commit_graph_one_fd_st</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>read_commit_graph_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>parse_commit_graph</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>graph_map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>graph_size</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>generation_numbers_enabled</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>commit_graph_write_flags</name> <block>{
<decl><name>COMMIT_GRAPH_WRITE_APPEND</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>COMMIT_GRAPH_WRITE_PROGRESS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>COMMIT_GRAPH_WRITE_SPLIT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,

<decl><name>COMMIT_GRAPH_WRITE_CHECK_OIDS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>

<struct>struct <name>split_commit_graph_opts</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size_multiple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_commits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>expire_time</name></decl>;</decl_stmt>
}</block>;</struct>







<function_decl><type><name>int</name></type> <name>write_commit_graph_reachable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>commit_graph_write_flags</name></name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>split_commit_graph_opts</name></name> <modifier>*</modifier></type><name>split_opts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>write_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>pack_indexes</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>commit_hex</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>commit_graph_write_flags</name></name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>split_commit_graph_opts</name></name> <modifier>*</modifier></type><name>split_opts</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMIT_GRAPH_VERIFY_SHALLOW</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>verify_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>close_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raw_object_store</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>disable_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
