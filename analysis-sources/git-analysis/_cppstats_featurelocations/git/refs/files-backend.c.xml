<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\refs\files-backend.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ref-cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packed-backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dir-iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../chdir-notify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"worktree.h"</cpp:file></cpp:include>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_IS_PRUNING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_DELETING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_NEEDS_COMMIT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_LOG_ONLY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_UPDATE_VIA_HEAD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_DELETED_LOOSE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<struct>struct <name>ref_lock</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>old_oid</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>files_ref_store</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>store_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gitdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gitcommondir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_cache</name></name> <modifier>*</modifier></type><name>loose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>packed_ref_store</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_loose_ref_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_ref_cache</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>files_ref_store_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gitdir</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>refs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name> <init>= <expr><operator>(</operator>struct <name>ref_store</name> <operator>*</operator><operator>)</operator><name>refs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>base_ref_store_init</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs_be_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>store_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>gitdir</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>gitdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_common_dir_noenv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>gitdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/packed-refs"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name> <operator>=</operator> <call><name>packed_ref_store_create</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>chdir_notify_reparent</name><argument_list>(<argument><expr><literal type="string">"files-backend $GIT_DIR"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>gitdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chdir_notify_reparent</name><argument_list>(<argument><expr><literal type="string">"files-backend $GIT_COMMONDIR"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ref_store</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>files_assert_main_repository</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>refs</name><operator>-&gt;</operator><name>store_flags</name></name> <operator>&amp;</operator> <name>REF_STORE_MAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"operation %s only allowed for main ref store"</literal></expr></argument>, <argument><expr><name>caller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>files_downcast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>required_flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref_store</name><operator>-&gt;</operator><name>be</name></name> <operator>!=</operator> <operator>&amp;</operator><name>refs_be_files</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"ref_store is type \"%s\" not \"files\" in %s"</literal></expr></argument>,
<argument><expr><name><name>ref_store</name><operator>-&gt;</operator><name>be</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>caller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <operator>(</operator>struct <name>files_ref_store</name> <operator>*</operator><operator>)</operator><name>ref_store</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>refs</name><operator>-&gt;</operator><name>store_flags</name></name> <operator>&amp;</operator> <name>required_flags</name><operator>)</operator> <operator>!=</operator> <name>required_flags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"operation %s requires abilities 0x%x, but only have 0x%x"</literal></expr></argument>,
<argument><expr><name>caller</name></expr></argument>, <argument><expr><name>required_flags</name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>store_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>refs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>files_reflog_path_other_worktrees</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>worktree_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_worktree_ref</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>worktree_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>real_ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"refname %s is not a other-worktree ref"</literal></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>worktree_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/worktrees/%.*s/logs/%s"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>,
<argument><expr><name>length</name></expr></argument>, <argument><expr><name>worktree_name</name></expr></argument>, <argument><expr><name>real_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/logs/%s"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>,
<argument><expr><name>real_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>files_reflog_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>ref_type</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_TYPE_PER_WORKTREE</name></expr>:</case>
<case>case <expr><name>REF_TYPE_PSEUDOREF</name></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/logs/%s"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitdir</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_TYPE_OTHER_PSEUDOREF</name></expr>:</case>
<case>case <expr><name>REF_TYPE_MAIN_PSEUDOREF</name></expr>:</case>
<expr_stmt><expr><call><name>files_reflog_path_other_worktrees</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_TYPE_NORMAL</name></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/logs/%s"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown ref type %d of ref %s"</literal></expr></argument>,
<argument><expr><call><name>ref_type</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>files_ref_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>ref_type</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_TYPE_PER_WORKTREE</name></expr>:</case>
<case>case <expr><name>REF_TYPE_PSEUDOREF</name></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitdir</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_TYPE_MAIN_PSEUDOREF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="string">"main-worktree/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"ref %s is not a main pseudoref"</literal></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>REF_TYPE_OTHER_PSEUDOREF</name></expr>:</case>
<case>case <expr><name>REF_TYPE_NORMAL</name></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown ref type %d of ref %s"</literal></expr></argument>,
<argument><expr><call><name>ref_type</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>add_per_worktree_entries_to_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>prefixes</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"refs/bisect/"</literal></expr>, <expr><literal type="string">"refs/worktree/"</literal></expr>, <expr><literal type="string">"refs/rewritten/"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ip</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ip</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>prefixes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name><name>prefixes</name><index>[<expr><name>ip</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>child_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>search_ref_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>child_entry</name> <operator>=</operator> <call><name>create_dir_entry</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_entry_to_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>child_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>loose_fill_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_READ</name></expr></argument>, <argument><expr><literal type="string">"fill_ref_dir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirnamelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>refname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_baselen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path_baselen</name> <operator>=</operator> <name><name>path</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>, <argument><expr><name>dirnamelen</name> <operator>+</operator> <literal type="number">257</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>dirnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ends_with</name><argument_list>(<argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".lock"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>, <argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_entry_to_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>,
<argument><expr><call><name>create_dir_entry</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>refname</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>refname</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refs_resolve_ref_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><name><name>refname</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name>RESOLVE_REF_READING</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>REF_ISBROKEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>REF_ISBROKEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>refname</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name>REFNAME_ALLOW_ONELEVEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refname_is_safe</name><argument_list>(<argument><expr><name><name>refname</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"loose refname is dangerous: %s"</literal></expr></argument>, <argument><expr><name><name>refname</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>REF_BAD_NAME</name> <operator>|</operator> <name>REF_ISBROKEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add_entry_to_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>,
<argument><expr><call><name>create_ref_entry</name><argument_list>(<argument><expr><name><name>refname</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>, <argument><expr><name>dirnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>path_baselen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_per_worktree_entries_to_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_cache</name></name> <modifier>*</modifier></type><name>get_loose_ref_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>refs</name><operator>-&gt;</operator><name>loose</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name></name> <operator>=</operator> <call><name>create_ref_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>loose_fill_ref_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REF_INCOMPLETE</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>add_entry_to_dir</name><argument_list>(<argument><expr><call><name>get_ref_dir</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>create_dir_entry</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name></name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>refs</name><operator>-&gt;</operator><name>loose</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_read_raw_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>referent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_READ</name></expr></argument>, <argument><expr><literal type="string">"read_raw_ref"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb_contents</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb_path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining_retries</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb_path</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>sb_path</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<label><name>stat_ref</name>:</label>













<if_stmt><if>if <condition>(<expr><name>remaining_retries</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>refs_read_raw_ref</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>referent</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strbuf_readlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_contents</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>stat_ref</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>sb_contents</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>sb_contents</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_contents</name></expr></argument>, <argument><expr><name>referent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>|=</operator> <name>REF_ISSYMREF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>refs_read_raw_ref</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>referent</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>stat_ref</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strbuf_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_contents</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_rtrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>sb_contents</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ref:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>referent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>referent</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>|=</operator> <name>REF_ISSYMREF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>|=</operator> <name>REF_ISBROKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlock_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>int</name></type> <name>lock_raw_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mustexist</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>extras</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>skip</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lock_p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>referent</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>ref_file</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attempts_remaining</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>TRANSACTION_GENERIC_ERROR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_assert_main_repository</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="string">"lock_raw_ref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>lock_p</name> <operator>=</operator> <name>lock</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_file</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
<switch>switch <condition>(<expr><call><name>safe_create_leading_directories</name><argument_list>(<argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SCLD_OK</name></expr>:</case>
<break>break;</break> 
<case>case <expr><name>SCLD_EXISTS</name></expr>:</case>








<if_stmt><if>if <condition>(<expr><call><name>refs_verify_refname_available</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>extras</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mustexist</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to resolve reference '%s'"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_NAME_CONFLICT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to create lock file %s.lock; "</literal>
<literal type="string">"non-directory in the way"</literal></expr></argument>,
<argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>error_return</name>;</goto>
<case>case <expr><name>SCLD_VANISHED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>attempts_remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

<default>default:</default>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to create directory for %s"</literal></expr></argument>,
<argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>hold_lock_file_for_update_timeout</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>, <argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>LOCK_NO_DEREF</name></expr></argument>,
<argument><expr><call><name>get_files_ref_lock_timeout_ms</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>attempts_remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>unable_to_lock_message</name><argument_list>(<argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>files_read_raw_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>referent</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mustexist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to resolve reference '%s'"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
















</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>mustexist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to resolve reference '%s'"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>remove_dir_recursively</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_file</name></expr></argument>,
<argument><expr><name>REMOVE_DIR_EMPTY_ONLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>refs_verify_refname_available</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>extras</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_NAME_CONFLICT</name></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"there is a non-empty directory '%s' "</literal>
<literal type="string">"blocking reference '%s'"</literal></expr></argument>,
<argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>type</name> <operator>&amp;</operator> <name>REF_ISBROKEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to resolve reference '%s': "</literal>
<literal type="string">"reference broken"</literal></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to resolve reference '%s': %s"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>refs_verify_refname_available</name><argument_list>(
<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>extras</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

<label><name>error_return</name>:</label>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lock_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>files_ref_iterator</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>files_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DO_FOR_EACH_PER_WORKTREE_ONLY</name> <operator>&amp;&amp;</operator>
<call><name>ref_type</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REF_TYPE_PER_WORKTREE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DO_FOR_EACH_INCLUDE_BROKEN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ref_resolves_to_object</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>refname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<return>return <expr><name>ITER_OK</name></expr>;</return>
</block_content>}</block></while>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ITER_DONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ITER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>files_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ref_iterator_peel</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>, <argument><expr><name>peeled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>files_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>ITER_DONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_free</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator_vtable</name></name></type> <name>files_ref_iterator_vtable</name> <init>= <expr><block>{
<expr><name>files_ref_iterator_advance</name></expr>,
<expr><name>files_ref_iterator_peel</name></expr>,
<expr><name>files_ref_iterator_abort</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>files_ref_iterator_begin</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>loose_iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>packed_iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>overlay_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>required_flags</name> <init>= <expr><name>REF_STORE_READ</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DO_FOR_EACH_INCLUDE_BROKEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>required_flags</name> <operator>|=</operator> <name>REF_STORE_ODB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>required_flags</name></expr></argument>, <argument><expr><literal type="string">"ref_iterator_begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


















<expr_stmt><expr><name>loose_iter</name> <operator>=</operator> <call><name>cache_ref_iterator_begin</name><argument_list>(<argument><expr><call><name>get_loose_ref_cache</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><name>packed_iter</name> <operator>=</operator> <call><name>refs_ref_iterator_begin</name><argument_list>(
<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>DO_FOR_EACH_INCLUDE_BROKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>overlay_iter</name> <operator>=</operator> <call><name>overlay_ref_iterator_begin</name><argument_list>(<argument><expr><name>loose_iter</name></expr></argument>, <argument><expr><name>packed_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_iterator</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>base_ref_iterator_init</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files_ref_iterator_vtable</name></expr></argument>,
<argument><expr><name><name>overlay_iter</name><operator>-&gt;</operator><name>ordered</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name> <operator>=</operator> <name>overlay_iter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<return>return <expr><name>ref_iterator</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mustexist</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>refs_read_ref_full</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>mustexist</name></expr> ?</condition><then> <expr><name>RESOLVE_REF_READING</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_oid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"can't verify ref '%s'"</literal></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_oid</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>old_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"ref '%s' is at %s but expected %s"</literal></expr></argument>,
<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_empty_directories</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<return>return <expr><call><name>remove_dir_recursively</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>REMOVE_DIR_EMPTY_ONLY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_reflock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>hold_lock_file_for_update_timeout</name><argument_list>(
<argument><expr><name>lk</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>LOCK_NO_DEREF</name></expr></argument>,
<argument><expr><call><name>get_files_ref_lock_timeout_ms</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock_ref_oid_basic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>extras</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>skip</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>ref_file</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mustexist</name> <init>= <expr><operator>(</operator><name>old_oid</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resolve_flags</name> <init>= <expr><name>RESOLVE_REF_NO_RECURSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resolved</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_assert_main_repository</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="string">"lock_ref_oid_basic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ref_lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mustexist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>resolve_flags</name> <operator>|=</operator> <name>RESOLVE_REF_READING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REF_DELETING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>resolve_flags</name> <operator>|=</operator> <name>RESOLVE_REF_ALLOW_BAD_NAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_file</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resolved</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>refs_resolve_ref_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>resolve_flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resolved</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>remove_empty_directories</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refs_verify_refname_available</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>extras</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"there are still refs under '%s'"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>resolved</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>refs_resolve_ref_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>resolve_flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resolved</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last_errno</name> <operator>!=</operator> <name>ENOTDIR</name> <operator>||</operator>
<operator>!</operator><call><name>refs_verify_refname_available</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>extras</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to resolve reference '%s': %s"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>last_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>refs_verify_refname_available</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>extras</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_errno</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>raceproof_create_file</name><argument_list>(<argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>create_reflock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unable_to_lock_message</name><argument_list>(<argument><expr><name><name>ref_file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>verify_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>mustexist</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>error_return</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>out</name>;</goto>

<label><name>error_return</name>:</label>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>last_errno</name></expr>;</expr_stmt>
<return>return <expr><name>lock</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ref_to_prune</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_to_prune</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <block>{
<decl><name>REMOVE_EMPTY_PARENTS_REF</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>REMOVE_EMPTY_PARENTS_REFLOG</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>
}</block>;</enum>







<function><type><specifier>static</specifier> <name>void</name></type> <name>try_remove_empty_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REMOVE_EMPTY_PARENTS_REF</name> <operator>|</operator> <name>REMOVE_EMPTY_PARENTS_REFLOG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>q</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REMOVE_EMPTY_PARENTS_REF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>rmdir</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>REMOVE_EMPTY_PARENTS_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REMOVE_EMPTY_PARENTS_REFLOG</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>rmdir</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>REMOVE_EMPTY_PARENTS_REFLOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>prune_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_to_prune</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name>ref_store_transaction_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transaction</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ref_transaction_add_update</name><argument_list>(
<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>REF_NO_DEREF</name> <operator>|</operator> <name>REF_HAVE_NEW</name> <operator>|</operator> <name>REF_HAVE_OLD</name> <operator>|</operator> <name>REF_IS_PRUNING</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>prune_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_to_prune</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>refs_to_prune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>refs_to_prune</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_to_prune</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>*</operator><name>refs_to_prune</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>refs_to_prune</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prune_ref</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>should_pack_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ref_flags</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pack_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ref_type</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REF_TYPE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pack_flags</name> <operator>&amp;</operator> <name>PACK_REFS_ALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ref_flags</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ref_resolves_to_object</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>ref_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_pack_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name> <operator>|</operator> <name>REF_STORE_ODB</name></expr></argument>,
<argument><expr><literal type="string">"pack_refs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_to_prune</name></name> <modifier>*</modifier></type><name>refs_to_prune</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl>;</decl_stmt>

<expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name>ref_store_transaction_begin</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transaction</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>packed_refs_lock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>cache_ref_iterator_begin</name><argument_list>(<argument><expr><call><name>get_loose_ref_cache</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>should_pack_ref</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_update</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>REF_NO_DEREF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"failure preparing to create packed reference %s: %s"</literal></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PACK_REFS_PRUNE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_to_prune</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FLEX_ALLOC_STR</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>refs_to_prune</name></expr>;</expr_stmt>
<expr_stmt><expr><name>refs_to_prune</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>!=</operator> <name>ITER_DONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"error while iterating over references"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to write new packed-refs: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packed_refs_unlock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prune_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs_to_prune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_delete_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>refnames</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"delete_refs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>refnames</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>packed_refs_lock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>refs_delete_refs</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>refnames</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packed_refs_unlock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>packed_refs_unlock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>refnames</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name> <init>= <expr><name><name>refnames</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>refs_delete_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not remove reference %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>

<label><name>error</name>:</label>






<if_stmt><if>if <condition>(<expr><name><name>refnames</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not delete reference %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>refnames</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not delete references: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_RENAMED_LOG</name></cpp:macro> <cpp:value>"refs/.tmp-renamed-log"</cpp:value></cpp:define>

<struct>struct <name>rename_cb</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp_renamed_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>true_errno</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rename_tmp_log_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rename_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>tmp_renamed_log</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>true_errno</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rename_tmp_log</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newrefname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tmp</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rename_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>TMP_RENAMED_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>tmp_renamed_log</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raceproof_create_file</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>rename_tmp_log_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"directory not empty: %s"</literal></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to move logfile %s to %s: %s"</literal></expr></argument>,
<argument><expr><name><name>tmp</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>true_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>write_ref_to_lockfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>commit_ref_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_copy_or_rename_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldrefname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newrefname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"rename_ref"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>orig_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>logmoved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>loginfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb_oldref</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb_newref</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tmp_renamed_log</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb_oldref</name></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb_newref</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_renamed_log</name></expr></argument>, <argument><expr><name>TMP_RENAMED_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name> <operator>=</operator> <operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name><name>sb_oldref</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>log</name> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>loginfo</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"reflog for %s is a symlink"</literal></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refs_resolve_ref_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>,
<argument><expr><name>RESOLVE_REF_READING</name> <operator>|</operator> <name>RESOLVE_REF_NO_RECURSE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>orig_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"refname %s not found"</literal></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"refname %s is a symbolic ref, copying it is not supported"</literal></expr></argument>,
<argument><expr><name>oldrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"refname %s is a symbolic ref, renaming it is not supported"</literal></expr></argument>,
<argument><expr><name>oldrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refs_rename_ref_available</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name> <operator>&amp;&amp;</operator> <name>log</name> <operator>&amp;&amp;</operator> <call><name>rename</name><argument_list>(<argument><expr><name><name>sb_oldref</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>tmp_renamed_log</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to move logfile logs/%s to logs/"</literal><name>TMP_RENAMED_LOG</name><literal type="string">": %s"</literal></expr></argument>,
<argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>&amp;&amp;</operator> <name>log</name> <operator>&amp;&amp;</operator> <call><name>copy_file</name><argument_list>(<argument><expr><name><name>tmp_renamed_log</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb_oldref</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to copy logfile logs/%s to logs/"</literal><name>TMP_RENAMED_LOG</name><literal type="string">": %s"</literal></expr></argument>,
<argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name> <operator>&amp;&amp;</operator> <call><name>refs_delete_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>orig_oid</name></expr></argument>, <argument><expr><name>REF_NO_DEREF</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to delete old %s"</literal></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rollback</name>;</goto>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>refs_read_ref_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>,
<argument><expr><name>RESOLVE_REF_READING</name> <operator>|</operator> <name>RESOLVE_REF_NO_RECURSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>refs_delete_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REF_NO_DEREF</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>remove_empty_directories</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Directory not empty: %s"</literal></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rollback</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to delete existing %s"</literal></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rollback</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>log</name> <operator>&amp;&amp;</operator> <call><name>rename_tmp_log</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>rollback</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>logmoved</name> <operator>=</operator> <name>log</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>lock_ref_oid_basic</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>REF_NO_DEREF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to copy '%s' to '%s': %s"</literal></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to rename '%s' to '%s': %s"</literal></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rollback</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_ref_to_lockfile</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>commit_ref_update</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_oid</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to write current sha1 into %s: %s"</literal></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rollback</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

<label><name>rollback</name>:</label>
<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>lock_ref_oid_basic</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>REF_NO_DEREF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to lock %s for rollback: %s"</literal></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rollbacklog</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>log_all_ref_updates</name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_all_ref_updates</name> <operator>=</operator> <name>LOG_REFS_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_ref_to_lockfile</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>commit_ref_update</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to write current sha1 into %s: %s"</literal></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>log_all_ref_updates</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

<label><name>rollbacklog</name>:</label>
<if_stmt><if>if <condition>(<expr><name>logmoved</name> <operator>&amp;&amp;</operator> <call><name>rename</name><argument_list>(<argument><expr><name><name>sb_newref</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb_oldref</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to restore logfile %s from %s: %s"</literal></expr></argument>,
<argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><name>newrefname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>logmoved</name> <operator>&amp;&amp;</operator> <name>log</name> <operator>&amp;&amp;</operator>
<call><name>rename</name><argument_list>(<argument><expr><name><name>tmp_renamed_log</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb_oldref</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to restore logfile %s from logs/"</literal><name>TMP_RENAMED_LOG</name><literal type="string">": %s"</literal></expr></argument>,
<argument><expr><name>oldrefname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_newref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_oldref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_renamed_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_rename_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldrefname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newrefname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>files_copy_or_rename_ref</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>,
<argument><expr><name>newrefname</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_copy_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldrefname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newrefname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>files_copy_or_rename_ref</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>oldrefname</name></expr></argument>,
<argument><expr><name>newrefname</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>close_ref_gently</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>close_lock_file_gently</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>get_locked_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb_path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_attach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>remove_empty_directories</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_or_create_logfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_APPEND</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>log_ref_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_create</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>logfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>logfile_sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>logfile</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>logfile_sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>logfile</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logfile_sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>force_create</name> <operator>||</operator> <call><name>should_autocreate_reflog</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>raceproof_create_file</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><name>open_or_create_logfile</name></expr></argument>, <argument><expr><name>logfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to create directory for '%s': "</literal>
<literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>logfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"there are still logs under '%s'"</literal></expr></argument>,
<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to append to '%s': %s"</literal></expr></argument>,
<argument><expr><name>logfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>logfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><name>O_APPEND</name> <operator>|</operator> <name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>logfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition> <block>{<block_content>






<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to append to '%s': %s"</literal></expr></argument>,
<argument><expr><name>logfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>logfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adjust_shared_perm</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_create_reflog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_create</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"create_reflog"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>log_ref_setup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>force_create</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_ref_write_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>committer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>committer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_reflog_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_log_ref_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>logfd</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_all_ref_updates</name> <operator>==</operator> <name>LOG_REFS_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>log_all_ref_updates</name> <operator>=</operator> <ternary><condition><expr><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>LOG_REFS_NONE</name></expr> </then><else>: <expr><name>LOG_REFS_NORMAL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>log_ref_setup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><name>flags</name> <operator>&amp;</operator> <name>REF_FORCE_CREATE_REFLOG</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>logfd</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>logfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>log_ref_write_fd</name><argument_list>(<argument><expr><name>logfd</name></expr></argument>, <argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>,
<argument><expr><call><name>git_committer_info</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to append to '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>save_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>logfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>logfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to append to '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>save_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>write_ref_to_lockfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>term</name> <init>= <expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"trying to write ref '%s' with nonexistent object %s"</literal></expr></argument>,
<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name> <operator>&amp;&amp;</operator> <call><name>is_branch</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"trying to write non-commit object %s to branch '%s'"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>get_lock_file_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>close_ref_gently</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"couldn't write '%s'"</literal></expr></argument>, <argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_ref_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>files_assert_main_repository</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="string">"commit_ref_update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_loose_ref_cache</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>files_log_ref_write</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>,
<argument><expr><name>logmsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_msg</name> <init>= <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot update the ref '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name>old_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>












<decl_stmt><decl><type><name>int</name></type> <name>head_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_ref</name></decl>;</decl_stmt>

<expr_stmt><expr><name>head_ref</name> <operator>=</operator> <call><name>refs_resolve_ref_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>,
<argument><expr><name>RESOLVE_REF_READING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>head_ref</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>head_flag</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>head_ref</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>log_err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>files_log_ref_write</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>,
<argument><expr><name>logmsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>log_err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>commit_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"couldn't set '%s'"</literal></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_ref_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SYMLINK_HEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref_path</name> <init>= <expr><call><name>get_locked_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>ref_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>symlink</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>ref_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ref_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no symlink - falling back to symbolic ref\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_symref_reflog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>new_oid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>logmsg</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>refs_read_ref_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>RESOLVE_REF_READING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>files_log_ref_write</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>new_oid</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_symref_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prefer_symlink_refs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>create_ref_symlink</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_symref_reflog</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fdopen_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to fdopen %s: %s"</literal></expr></argument>,
<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>lk</name><operator>.</operator><name>tempfile</name><operator>-&gt;</operator><name>filename</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_symref_reflog</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>lk</name><operator>.</operator><name>tempfile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"ref: %s\n"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>commit_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to write symref for %s: %s"</literal></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_create_symref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"create_symref"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>lock_ref_oid_basic</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REF_NO_DEREF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_symref_locked</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_reflog_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_READ</name></expr></argument>, <argument><expr><literal type="string">"reflog_exists"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_delete_reflog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"delete_reflog"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>remove_path</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_one_reflog_ent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>each_reflog_ent_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>ooid</name></decl>, <decl><type ref="prev"/><name>noid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>email_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>||</operator>
<call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ooid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator>
<call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>email_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<name><name>email_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>timestamp</name> <operator>=</operator> <call><name>parse_timestamp</name><argument_list>(<argument><expr><name>email_end</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>!</operator><name>message</name> <operator>||</operator> <name><name>message</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator>
<operator>(</operator><name><name>message</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>message</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator>
<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>message</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>message</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>message</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>message</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>email_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>message</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>message</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>message</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>message</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>fn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ooid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_beginning_of_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bob</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>bob</name> <operator>&lt;</operator> <name>scan</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>scan</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while> 




<return>return <expr><name>scan</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_for_each_reflog_ent_reverse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>each_reflog_ent_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_READ</name></expr></argument>,
<argument><expr><literal type="string">"for_each_reflog_ent_reverse"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>at_tail</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>logfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>logfp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>logfp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot seek back reflog for %s: %s"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>logfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scanp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cnt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>pos</name><operator>)</operator></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name>pos</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>logfp</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <name>cnt</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot seek back reflog for %s: %s"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>logfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot read %d bytes from reflog for %s: %s"</literal></expr></argument>,
<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scanp</name> <operator>=</operator> <name>endp</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>at_tail</name> <operator>&amp;&amp;</operator> <name><name>scanp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scanp</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>at_tail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>scanp</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>find_beginning_of_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>scanp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>strbuf_splice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <operator>(</operator><name>bp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scanp</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_one_reflog_ent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>strbuf_splice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_one_reflog_ent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>












<expr_stmt><expr><call><name>strbuf_splice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"reverse reflog parser had leftover data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_for_each_reflog_ent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>each_reflog_ent_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_READ</name></expr></argument>,
<argument><expr><literal type="string">"for_each_reflog_ent"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>logfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>logfp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strbuf_getwholeline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>logfp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_one_reflog_ent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>files_reflog_iterator</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator</name></name> <modifier>*</modifier></type><name>dir_iterator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_reflog_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_reflog_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>files_reflog_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator</name></name> <modifier>*</modifier></type><name>diter</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>dir_iterator</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>dir_iterator_advance</name><argument_list>(<argument><expr><name>diter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>diter</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>diter</name><operator>-&gt;</operator><name>basename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ends_with</name><argument_list>(<argument><expr><name><name>diter</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><literal type="string">".lock"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>refs_read_ref_full</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ref_store</name></name></expr></argument>,
<argument><expr><name><name>diter</name><operator>-&gt;</operator><name>relative_path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"bad ref for %s"</literal></expr></argument>, <argument><expr><name><name>diter</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name> <operator>=</operator> <name><name>diter</name><operator>-&gt;</operator><name>relative_path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>ITER_OK</name></expr>;</return>
</block_content>}</block></while>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dir_iterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ITER_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ITER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_reflog_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"ref_iterator_peel() called for reflog_iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_reflog_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_reflog_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>files_reflog_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>ITER_DONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>dir_iterator</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>dir_iterator_abort</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>dir_iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_free</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator_vtable</name></name></type> <name>files_reflog_iterator_vtable</name> <init>= <expr><block>{
<expr><name>files_reflog_iterator_advance</name></expr>,
<expr><name>files_reflog_iterator_peel</name></expr>,
<expr><name>files_reflog_iterator_abort</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>reflog_iterator_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gitdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_iterator</name></name> <modifier>*</modifier></type><name>diter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files_reflog_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s/logs"</literal></expr></argument>, <argument><expr><name>gitdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diter</name> <operator>=</operator> <call><name>dir_iterator_begin</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>empty_ref_iterator_begin</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_iterator</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_init</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files_reflog_iterator_vtable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dir_iterator</name></name> <operator>=</operator> <name>diter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ref_store</name></name> <operator>=</operator> <name>ref_store</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ref_iterator</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>iterator_selection</name></name></type> <name>reflog_iterator_select</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter_worktree</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter_common</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iter_worktree</name></expr>)</condition> <block>{<block_content>





<return>return <expr><name>ITER_SELECT_0</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>iter_common</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ref_type</name><argument_list>(<argument><expr><name><name>iter_common</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REF_TYPE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ITER_SELECT_1</name></expr>;</return></block_content></block></if></if_stmt>





<return>return <expr><name>ITER_SKIP_1</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>ITER_DONE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>files_reflog_iterator_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_READ</name></expr></argument>,
<argument><expr><literal type="string">"reflog_iterator_begin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitdir</name></name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>reflog_iterator_begin</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>merge_ref_iterator_begin</name><argument_list>(
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>reflog_iterator_begin</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitdir</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>reflog_iterator_begin</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>gitcommondir</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reflog_iterator_select</name></expr></argument>, <argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>split_head_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_ref</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>affected_refnames</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>new_update</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_LOG_ONLY</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_IS_PRUNING</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_UPDATE_VIA_HEAD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name>head_ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>string_list_has_string</name><argument_list>(<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"multiple updates for 'HEAD' (including one "</literal>
<literal type="string">"via its referent '%s') are not allowed"</literal></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRANSACTION_NAME_CONFLICT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_update</name> <operator>=</operator> <call><name>ref_transaction_add_update</name><argument_list>(
<argument><expr><name>transaction</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>|</operator> <name>REF_LOG_ONLY</name> <operator>|</operator> <name>REF_NO_DEREF</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>new_update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"%s unexpectedly not 'HEAD'"</literal></expr></argument>, <argument><expr><name><name>new_update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><name><name>new_update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>new_update</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>split_symref_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>referent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>affected_refnames</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>new_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_flags</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><call><name>string_list_has_string</name><argument_list>(<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><name>referent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"multiple updates for '%s' (including one "</literal>
<literal type="string">"via symref '%s') are not allowed"</literal></expr></argument>,
<argument><expr><name>referent</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRANSACTION_NAME_CONFLICT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_flags</name> <operator>=</operator> <name><name>update</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>new_flags</name> <operator>|=</operator> <name>REF_UPDATE_VIA_HEAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_update</name> <operator>=</operator> <call><name>ref_transaction_add_update</name><argument_list>(
<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>referent</name></expr></argument>, <argument><expr><name>new_flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_update</name><operator>-&gt;</operator><name>parent_update</name></name> <operator>=</operator> <name>update</name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REF_LOG_ONLY</name> <operator>|</operator> <name>REF_NO_DEREF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REF_HAVE_OLD</name></expr>;</expr_stmt>








<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><name><name>new_update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"%s unexpectedly found in affected_refnames"</literal></expr></argument>,
<argument><expr><name><name>new_update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>new_update</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>original_update_refname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>parent_update</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>update</name> <operator>=</operator> <name><name>update</name><operator>-&gt;</operator><name>parent_update</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>check_old_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_OLD</name><operator>)</operator> <operator>||</operator>
<call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot lock ref '%s': "</literal>
<literal type="string">"reference already exists"</literal></expr></argument>,
<argument><expr><call><name>original_update_refname</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot lock ref '%s': "</literal>
<literal type="string">"reference is missing but expected %s"</literal></expr></argument>,
<argument><expr><call><name>original_update_refname</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot lock ref '%s': "</literal>
<literal type="string">"is at %s but expected %s"</literal></expr></argument>,
<argument><expr><call><name>original_update_refname</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>lock_ref_for_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_ref</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>affected_refnames</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>referent</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mustexist</name> <init>= <expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_OLD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_assert_main_repository</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="string">"lock_ref_for_update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_NEW</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REF_DELETING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>head_ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>split_head_update</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>head_ref</name></expr></argument>,
<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lock_raw_ref</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name>mustexist</name></expr></argument>,
<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>referent</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reason</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot lock ref '%s': %s"</literal></expr></argument>,
<argument><expr><call><name>original_update_refname</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>REF_ISSYMREF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_NO_DEREF</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>refs_read_ref_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,
<argument><expr><name><name>referent</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_OLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot lock ref '%s': "</literal>
<literal type="string">"error reading reference"</literal></expr></argument>,
<argument><expr><call><name>original_update_refname</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>check_old_oid</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>split_symref_update</name><argument_list>(<argument><expr><name>update</name></expr></argument>,
<argument><expr><name><name>referent</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>,
<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>parent_update</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_old_oid</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init><expr><name>parent_update</name> <operator>=</operator> <name><name>update</name><operator>-&gt;</operator><name>parent_update</name></name></expr>;</init>
<condition><expr><name>parent_update</name></expr>;</condition>
<incr><expr><name>parent_update</name> <operator>=</operator> <name><name>parent_update</name><operator>-&gt;</operator><name>parent_update</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>parent_lock</name> <init>= <expr><name><name>parent_update</name><operator>-&gt;</operator><name>backend_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent_lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_NEW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_DELETING</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_LOG_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>write_ref_to_lockfile</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>write_err</name> <init>= <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><literal type="string">"cannot update ref '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name>write_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>write_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REF_NEEDS_COMMIT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_NEEDS_COMMIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>close_ref_gently</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"couldn't close '%s.lock'"</literal></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>referent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>files_transaction_backend_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>packed_transaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packed_refs_locked</name></decl>;</decl_stmt>
}</block>;</struct>





<function><type><specifier>static</specifier> <name>void</name></type> <name>files_transaction_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files_transaction_backend_data</name></name> <modifier>*</modifier></type><name>backend_data</name> <init>=
<expr><name><name>transaction</name><operator>-&gt;</operator><name>backend_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_transaction</name></name> <operator>&amp;&amp;</operator>
<call><name>ref_transaction_abort</name><argument_list>(<argument><expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_transaction</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"error aborting transaction: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_refs_locked</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packed_refs_unlock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>backend_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>REF_TRANSACTION_CLOSED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_transaction_prepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>,
<argument><expr><literal type="string">"ref_transaction_prepare"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>affected_refnames</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>head_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>head_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files_transaction_backend_data</name></name> <modifier>*</modifier></type><name>backend_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>packed_transaction</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>backend_data</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>backend_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>backend_data</name></expr>;</expr_stmt>









<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name> <init>=
<expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_IS_PRUNING</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_NO_DEREF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"REF_IS_PRUNING set without REF_NO_DEREF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>update</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_update_reject_duplicates</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>



















<expr_stmt><expr><name>head_ref</name> <operator>=</operator> <call><name>refs_resolve_refdup</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>,
<argument><expr><name>RESOLVE_REF_NO_RECURSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>head_ref</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>head_type</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>head_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>









<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lock_ref_for_update</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>,
<argument><expr><name>head_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_DELETING</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_LOG_ONLY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_IS_PRUNING</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packed_transaction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packed_transaction</name> <operator>=</operator> <call><name>ref_store_transaction_begin</name><argument_list>(
<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packed_transaction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_transaction</name></name> <operator>=</operator>
<name>packed_transaction</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ref_transaction_add_update</name><argument_list>(
<argument><expr><name>packed_transaction</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><name>REF_HAVE_NEW</name> <operator>|</operator> <name>REF_NO_DEREF</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>packed_transaction</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>packed_refs_lock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_refs_locked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_packed_transaction_needed</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>,
<argument><expr><name>packed_transaction</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ref_transaction_prepare</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_transaction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>










<expr_stmt><expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_transaction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_abort</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>head_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>files_transaction_cleanup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>REF_TRANSACTION_PREPARED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_transaction_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ref_transaction_finish"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files_transaction_backend_data</name></name> <modifier>*</modifier></type><name>backend_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>packed_transaction</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>REF_TRANSACTION_CLOSED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>backend_data</name> <operator>=</operator> <name><name>transaction</name><operator>-&gt;</operator><name>backend_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>packed_transaction</name> <operator>=</operator> <name><name>backend_data</name><operator>-&gt;</operator><name>packed_transaction</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_NEEDS_COMMIT</name> <operator>||</operator>
<name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_LOG_ONLY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>files_log_ref_write</name><argument_list>(<argument><expr><name>refs</name></expr></argument>,
<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_msg</name> <init>= <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot update the ref '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name>old_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_NEEDS_COMMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clear_loose_ref_cache</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>commit_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"couldn't set '%s'"</literal></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>









<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_DELETING</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_LOG_ONLY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_IS_PRUNING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>try_remove_empty_parents</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><name>REMOVE_EMPTY_PARENTS_REFLOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>







<if_stmt><if>if <condition>(<expr><name>packed_transaction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packed_transaction</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend_data</name><operator>-&gt;</operator><name>packed_transaction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name><name>update</name><operator>-&gt;</operator><name>backend_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_DELETING</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_LOG_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>REF_ISPACKED</name><operator>)</operator> <operator>||</operator>
<name><name>update</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>REF_ISSYMREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlink_or_msg</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REF_DELETED_LOOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>clear_loose_ref_cache</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>files_transaction_cleanup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_DELETED_LOOSE</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>try_remove_empty_parents</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><name>REMOVE_EMPTY_PARENTS_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_transaction_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ref_transaction_abort"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>files_transaction_cleanup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ref_present</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>affected_refnames</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>string_list_has_string</name><argument_list>(<argument><expr><name>affected_refnames</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_initial_transaction_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>,
<argument><expr><literal type="string">"initial_ref_transaction_commit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>affected_refnames</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>packed_transaction</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transaction</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>REF_TRANSACTION_OPEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"commit called for transaction that is not open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>,
<argument><expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ref_update_reject_duplicates</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><call><name>refs_for_each_rawref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>ref_present</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"initial ref transaction called with existing refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>packed_transaction</name> <operator>=</operator> <call><name>ref_store_transaction_begin</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packed_transaction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_OLD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"initial ref transaction with old_sha1 set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>refs_verify_refname_available</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_NAME_CONFLICT</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>ref_transaction_add_update</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>REF_HAVE_OLD</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>packed_refs_lock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>initial_ref_transaction_commit</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRANSACTION_GENERIC_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>packed_refs_unlock</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>packed_ref_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<if_stmt><if>if <condition>(<expr><name>packed_transaction</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>packed_transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>REF_TRANSACTION_CLOSED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affected_refnames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>expire_reflog_cb</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reflog_expiry_should_prune_fn</name> <modifier>*</modifier></type><name>should_prune_fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>policy_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>newlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>last_kept_oid</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>expire_reflog_ent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>ooid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>noid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>email</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>expire_reflog_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>expire_reflog_policy_cb</name></name> <modifier>*</modifier></type><name>policy_cb</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>policy_cb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXPIRE_REFLOGS_REWRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ooid</name> <operator>=</operator> <operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>last_kept_oid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>cb</name><operator>-&gt;</operator><name>should_prune_fn</name></name>)<argument_list>(<argument><expr><name>ooid</name></expr></argument>, <argument><expr><name>noid</name></expr></argument>, <argument><expr><name>email</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>,
<argument><expr><name>message</name></expr></argument>, <argument><expr><name>policy_cb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>newlog</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"would prune %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXPIRE_REFLOGS_VERBOSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"prune %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>newlog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>newlog</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s %s %"</literal><name>PRItime</name><literal type="string">" %+05d\t%s"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>ooid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>noid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>email</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>last_kept_oid</name></name></expr></argument>, <argument><expr><name>noid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXPIRE_REFLOGS_VERBOSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"keep %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_reflog_expire</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_prepare_fn</name></type> <name>prepare_fn</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_should_prune_fn</name></type> <name>should_prune_fn</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_cleanup_fn</name></type> <name>cleanup_fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>policy_cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"reflog_expire"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>reflog_lock</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>expire_reflog_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>log_file_sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>policy_cb</name></name> <operator>=</operator> <name>policy_cb_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>should_prune_fn</name></name> <operator>=</operator> <name>should_prune_fn</name></expr>;</expr_stmt>






<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>lock_ref_oid_basic</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REF_NO_DEREF</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot lock ref '%s': %s"</literal></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refs_reflog_exists</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>files_reflog_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_file_sb</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_file</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_file_sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EXPIRE_REFLOGS_DRY_RUN</name><operator>)</operator></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>, <argument><expr><name>log_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unable_to_lock_message</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>newlog</name></name> <operator>=</operator> <call><name>fdopen_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>.</operator><name>newlog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot fdopen %s (%s)"</literal></expr></argument>,
<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failure</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>prepare_fn</name>)<argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>cb</name><operator>.</operator><name>policy_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refs_for_each_reflog_ent</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>expire_reflog_ent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>cleanup_fn</name>)<argument_list>(<argument><expr><name><name>cb</name><operator>.</operator><name>policy_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EXPIRE_REFLOGS_DRY_RUN</name><operator>)</operator></expr>)</condition> <block>{<block_content>







<decl_stmt><decl><type><name>int</name></type> <name>update</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EXPIRE_REFLOGS_UPDATE_REF</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>.</operator><name>last_kept_oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close_lock_file_gently</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"couldn't write %s: %s"</literal></expr></argument>, <argument><expr><name>log_file</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>update</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>write_in_full</name><argument_list>(<argument><expr><call><name>get_lock_file_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>.</operator><name>last_kept_oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>write_str_in_full</name><argument_list>(<argument><expr><call><name>get_lock_file_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>close_ref_gently</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"couldn't write %s"</literal></expr></argument>,
<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to write reflog '%s' (%s)"</literal></expr></argument>,
<argument><expr><name>log_file</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>update</name> <operator>&amp;&amp;</operator> <call><name>commit_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"couldn't set %s"</literal></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>

<label><name>failure</name>:</label>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reflog_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlock_ref</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>files_init_db</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>files_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>files_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"init_db"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"refs/heads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>safe_create_dir</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>files_ref_path</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"refs/tags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>safe_create_dir</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_storage_be</name></name></type> <name>refs_be_files</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><literal type="string">"files"</literal></expr>,
<expr><name>files_ref_store_create</name></expr>,
<expr><name>files_init_db</name></expr>,
<expr><name>files_transaction_prepare</name></expr>,
<expr><name>files_transaction_finish</name></expr>,
<expr><name>files_transaction_abort</name></expr>,
<expr><name>files_initial_transaction_commit</name></expr>,

<expr><name>files_pack_refs</name></expr>,
<expr><name>files_create_symref</name></expr>,
<expr><name>files_delete_refs</name></expr>,
<expr><name>files_rename_ref</name></expr>,
<expr><name>files_copy_ref</name></expr>,

<expr><name>files_ref_iterator_begin</name></expr>,
<expr><name>files_read_raw_ref</name></expr>,

<expr><name>files_reflog_iterator_begin</name></expr>,
<expr><name>files_for_each_reflog_ent</name></expr>,
<expr><name>files_for_each_reflog_ent_reverse</name></expr>,
<expr><name>files_reflog_exists</name></expr>,
<expr><name>files_create_reflog</name></expr>,
<expr><name>files_delete_reflog</name></expr>,
<expr><name>files_reflog_expire</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
