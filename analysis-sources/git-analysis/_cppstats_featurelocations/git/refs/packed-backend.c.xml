<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\refs\packed-backend.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packed-backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../chdir-notify.h"</cpp:file></cpp:include>

<enum>enum <name>mmap_strategy</name> <block>{



<decl><name>MMAP_NONE</name></decl>,







<decl><name>MMAP_TEMPORARY</name></decl>,





<decl><name>MMAP_OK</name></decl>
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>mmap_strategy</name></name></type> <name>mmap_strategy</name> <init>= <expr><name>MMAP_NONE</name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MMAP_PREVENTS_DELETE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>mmap_strategy</name></name></type> <name>mmap_strategy</name> <init>= <expr><name>MMAP_TEMPORARY</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>mmap_strategy</name></name></type> <name>mmap_strategy</name> <init>= <expr><name>MMAP_OK</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>packed_ref_store</name>;</struct_decl>





















<struct>struct <name>snapshot</name> <block>{




<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>mmapped</name></decl>;</decl_stmt>
















<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eof</name></decl>;</decl_stmt>






<enum>enum <block>{ <decl><name>PEELED_NONE</name></decl>, <decl><name>PEELED_TAGS</name></decl>, <decl><name>PEELED_FULLY</name></decl> }</block> <decl><name>peeled</name></decl>;</enum>







<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>referrers</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>stat_validity</name></name></type> <name>validity</name></decl>;</decl_stmt>
}</block>;</struct>
















<struct>struct <name>packed_ref_store</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>store_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>void</name></type> <name>acquire_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>referrers</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_snapshot_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>mmapped</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"error ummapping packed-refs file %s"</literal></expr></argument>,
<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>mmapped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>release_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name><name>snapshot</name><operator>-&gt;</operator><name>referrers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stat_validity_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>validity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_snapshot_buffer</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>packed_ref_store_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>store_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>refs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name> <init>= <expr><operator>(</operator>struct <name>ref_store</name> <operator>*</operator><operator>)</operator><name>refs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>base_ref_store_init</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs_be_packed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>store_flags</name></name> <operator>=</operator> <name>store_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chdir_notify_reparent</name><argument_list>(<argument><expr><literal type="string">"packed-refs"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ref_store</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>packed_downcast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>required_flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref_store</name><operator>-&gt;</operator><name>be</name></name> <operator>!=</operator> <operator>&amp;</operator><name>refs_be_packed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"ref_store is type \"%s\" not \"packed\" in %s"</literal></expr></argument>,
<argument><expr><name><name>ref_store</name><operator>-&gt;</operator><name>be</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>caller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <operator>(</operator>struct <name>packed_ref_store</name> <operator>*</operator><operator>)</operator><name>ref_store</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>refs</name><operator>-&gt;</operator><name>store_flags</name></name> <operator>&amp;</operator> <name>required_flags</name><operator>)</operator> <operator>!=</operator> <name>required_flags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unallowed operation (%s), requires %x, has %x\n"</literal></expr></argument>,
<argument><expr><name>caller</name></expr></argument>, <argument><expr><name>required_flags</name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>store_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>refs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name> <init>= <expr><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>release_snapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NORETURN</name> <name>void</name></type> <name>die_unterminated_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unterminated line in %s: %.*s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unterminated line in %s: %.75s..."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NORETURN</name> <name>void</name></type> <name>die_invalid_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_unterminated_line</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>eol</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unexpected line in %s: %.*s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>eol</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unexpected line in %s: %.75s..."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<struct>struct <name>snapshot_record</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_packed_ref_records</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>snapshot_record</name></name> <modifier>*</modifier></type><name>e1</name> <init>= <expr><name>v1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><name><name>e1</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r2</name> <init>= <expr><name><name>e2</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>r2</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r1</name> <operator>!=</operator> <operator>*</operator><name>r2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r2</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>r1</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>r2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_record_to_refname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><name>rec</name> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r2</name> <init>= <expr><name>refname</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>r2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>r2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>r1</name> <operator>!=</operator> <operator>*</operator><name>r2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>r1</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>r2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snapshot_record</name></name> <modifier>*</modifier></type><name>records</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sorted</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eof</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>eof</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>eof</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>records</name></expr></argument>, <argument><expr><name>len</name> <operator>/</operator> <literal type="number">80</literal> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>eof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>eof</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unterminated line found in packed-refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>-</operator> <name>pos</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_invalid_line</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>eof</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>eol</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>&lt;</operator> <name>eof</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>eol</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>peeled_start</name> <init>= <expr><name>eol</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>peeled_start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>eof</name> <operator>-</operator> <name>peeled_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unterminated peeled line found in packed-refs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>eol</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>records</name></expr></argument>, <argument><expr><name>nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>records</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>records</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>eol</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sorted</name> <operator>&amp;&amp;</operator>
<name>nr</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>cmp_packed_ref_records</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>records</name><index>[<expr><name>nr</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>records</name><index>[<expr><name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sorted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>eol</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>sorted</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>records</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><name>cmp_packed_ref_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>new_buffer</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dst</name> <operator>=</operator> <name>new_buffer</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>records</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>records</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>records</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name>clear_snapshot_buffer</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>new_buffer</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_start_of_record</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_end_of_record</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>++</operator><name>p</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>void</name></type> <name>verify_buffer_safe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eof</name> <init>= <expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>eof</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_line</name> <operator>=</operator> <call><name>find_start_of_record</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>eof</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>eof</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>eof</name> <operator>-</operator> <name>last_line</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_invalid_line</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name>last_line</name></expr></argument>, <argument><expr><name>eof</name> <operator>-</operator> <name>last_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_FILE_SIZE</name></cpp:macro> <cpp:value>(32*1024)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>int</name></type> <name>load_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>







<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"couldn't read %s"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stat_validity_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>validity</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"couldn't stat %s"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>xsize_t</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mmap_strategy</name> <operator>==</operator> <name>MMAP_NONE</name> <operator>||</operator> <name>size</name> <operator>&lt;=</operator> <name>SMALL_FILE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>bytes_read</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"couldn't read %s"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>mmapped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>xmmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>mmapped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_reference_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mustexist</name></decl></parameter>)</parameter_list>
<block>{<block_content>














<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lo</name> <init>= <expr><name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>lo</name> <operator>!=</operator> <name>hi</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>find_start_of_record</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>cmp_record_to_refname</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>find_end_of_record</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>rec</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mustexist</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>lo</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


































<function><type><specifier>static</specifier> <name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>create_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>snapshot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sorted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <name>refs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acquire_snapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>peeled</name></name> <operator>=</operator> <name>PEELED_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>load_contents</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>snapshot</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>traits</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>,
<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_unterminated_line</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>eol</name> <operator>-</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"#pack-refs with:"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_invalid_line</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_split_in_place</name><argument_list>(<argument><expr><operator>&amp;</operator><name>traits</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unsorted_string_list_has_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>traits</name></expr></argument>, <argument><expr><literal type="string">"fully-peeled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>peeled</name></name> <operator>=</operator> <name>PEELED_FULLY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>unsorted_string_list_has_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>traits</name></expr></argument>, <argument><expr><literal type="string">"peeled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>peeled</name></name> <operator>=</operator> <name>PEELED_TAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sorted</name> <operator>=</operator> <call><name>unsorted_string_list_has_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>traits</name></expr></argument>, <argument><expr><literal type="string">"sorted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>traits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>verify_buffer_safe</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sorted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sort_snapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>verify_buffer_safe</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mmap_strategy</name> <operator>!=</operator> <name>MMAP_OK</name> <operator>&amp;&amp;</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>mmapped</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_copy</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf_copy</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_snapshot_buffer</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>buf_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>buf_copy</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>snapshot</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>validate_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>stat_validity_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name><operator>-&gt;</operator><name>validity</name></name></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>get_snapshot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>validate_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <call><name>create_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>refs</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_read_raw_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>referent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>packed_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_READ</name></expr></argument>, <argument><expr><literal type="string">"read_raw_ref"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name> <init>= <expr><call><name>get_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>find_reference_location</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_invalid_line</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>REF_ISPACKED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_KNOWS_PEELED</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>




<struct>struct <name>packed_ref_iterator</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eof</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>, <decl><type ref="prev"/><name>peeled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>refname_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>








<function><type><specifier>static</specifier> <name>int</name></type> <name>next_record</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>refname_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ITER_DONE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>REF_ISPACKED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>||</operator>
<call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_invalid_line</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_unterminated_line</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>refname_buf</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>eol</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>refname_buf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name></expr></argument>, <argument><expr><name>REFNAME_ALLOW_ONELEVEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refname_is_safe</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"packed refname is dangerous: %s"</literal></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REF_BAD_NAME</name> <operator>|</operator> <name>REF_ISBROKEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>snapshot</name><operator>-&gt;</operator><name>peeled</name></name> <operator>==</operator> <name>PEELED_FULLY</name> <operator>||</operator>
<operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>snapshot</name><operator>-&gt;</operator><name>peeled</name></name> <operator>==</operator> <name>PEELED_TAGS</name> <operator>&amp;&amp;</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REF_KNOWS_PEELED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>peeled</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_invalid_line</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>snapshot</name><operator>-&gt;</operator><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_ISBROKEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>peeled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REF_KNOWS_PEELED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REF_KNOWS_PEELED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>peeled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ITER_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>packed_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>next_record</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DO_FOR_EACH_PER_WORKTREE_ONLY</name> <operator>&amp;&amp;</operator>
<call><name>ref_type</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REF_TYPE_PER_WORKTREE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DO_FOR_EACH_INCLUDE_BROKEN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ref_resolves_to_object</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><name>ITER_OK</name></expr>;</return>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ITER_DONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ITER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>packed_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_KNOWS_PEELED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>peeled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>peeled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>peeled</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>REF_ISBROKEN</name> <operator>|</operator> <name>REF_ISSYMREF</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>!</operator><operator>!</operator><call><name>peel_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>peeled</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=
<expr><operator>(</operator>struct <name>packed_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>ITER_DONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>refname_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>release_snapshot</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>base_ref_iterator_free</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator_vtable</name></name></type> <name>packed_ref_iterator_vtable</name> <init>= <expr><block>{
<expr><name>packed_ref_iterator_advance</name></expr>,
<expr><name>packed_ref_iterator_peel</name></expr>,
<expr><name>packed_ref_iterator_abort</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>packed_ref_iterator_begin</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>snapshot</name></name> <modifier>*</modifier></type><name>snapshot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>required_flags</name> <init>= <expr><name>REF_STORE_READ</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DO_FOR_EACH_INCLUDE_BROKEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>required_flags</name> <operator>|=</operator> <name>REF_STORE_ODB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>packed_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>required_flags</name></expr></argument>, <argument><expr><literal type="string">"ref_iterator_begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>get_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>find_reference_location</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>empty_ref_iterator_begin</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_iterator</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>base_ref_iterator_init</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packed_ref_iterator_vtable</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acquire_snapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>eof</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>refname_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ref_iterator</name> <operator>=</operator> <call><name>prefix_ref_iterator_begin</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ref_iterator</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>write_packed_entry</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>peeled</name> <operator>&amp;&amp;</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><literal type="string">"^%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>peeled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>packed_refs_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>packed_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name> <operator>|</operator> <name>REF_STORE_MAIN</name></expr></argument>,
<argument><expr><literal type="string">"packed_refs_lock"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timeout_configured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timeout_value</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timeout_configured</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"core.packedrefstimeout"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timeout_configured</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>hold_lock_file_for_update_timeout</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>timeout_value</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unable_to_lock_message</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close_lock_file_gently</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to close %s: %s"</literal></expr></argument>, <argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


















<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>get_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>packed_refs_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>packed_downcast</name><argument_list>(
<argument><expr><name>ref_store</name></expr></argument>,
<argument><expr><name>REF_STORE_READ</name> <operator>|</operator> <name>REF_STORE_WRITE</name></expr></argument>,
<argument><expr><literal type="string">"packed_refs_unlock"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"packed_refs_unlock() called when not locked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>packed_refs_is_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>packed_downcast</name><argument_list>(
<argument><expr><name>ref_store</name></expr></argument>,
<argument><expr><name>REF_STORE_READ</name> <operator>|</operator> <name>REF_STORE_WRITE</name></expr></argument>,
<argument><expr><literal type="string">"packed_refs_is_locked"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>PACKED_REFS_HEADER</name><index>[]</index></name> <init>=
<expr><literal type="string">"#pack-refs with: peeled fully-peeled sorted \n"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_init_db</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>write_with_updates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>updates</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>packed_refs_path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"write_with_updates() called while unlocked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>packed_refs_path</name> <operator>=</operator> <call><name>get_locked_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s.new"</literal></expr></argument>, <argument><expr><name>packed_refs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>packed_refs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name> <operator>=</operator> <call><name>create_tempfile</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to create file %s: %s"</literal></expr></argument>,
<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fdopen_tempfile</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to fdopen packed-refs tempfile: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>PACKED_REFS_HEADER</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>








<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>packed_ref_iterator_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name>DO_FOR_EACH_INCLUDE_BROKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ITER_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>iter</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name><name>updates</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>updates</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>update</name> <operator>=</operator> <name><name>updates</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_OLD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot update ref '%s': "</literal>
<literal type="string">"reference already exists"</literal></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot update ref '%s': "</literal>
<literal type="string">"is at %s but expected %s"</literal></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_NEW</name><operator>)</operator></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ITER_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_OLD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"cannot update ref '%s': "</literal>
<literal type="string">"reference is missing but expected %s"</literal></expr></argument>,
<argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>peeled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>peel_error</name> <init>= <expr><call><name>ref_iterator_peel</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peeled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_packed_entry</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>peel_error</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>peeled</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ITER_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>peeled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>peel_error</name> <init>= <expr><call><name>peel_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>peeled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_packed_entry</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>peel_error</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>peeled</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>!=</operator> <name>ITER_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to write packed-refs file: "</literal>
<literal type="string">"error iterating over old contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close_tempfile_gently</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"error closing file %s: %s"</literal></expr></argument>,
<argument><expr><call><name>get_tempfile_path</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>write_error</name>:</label>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"error writing to %s: %s"</literal></expr></argument>,
<argument><expr><call><name>get_tempfile_path</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>iter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>delete_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_packed_transaction_needed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>packed_downcast</name><argument_list>(
<argument><expr><name>ref_store</name></expr></argument>,
<argument><expr><name>REF_STORE_READ</name></expr></argument>,
<argument><expr><literal type="string">"is_packed_transaction_needed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>referent</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"is_packed_transaction_needed() called while unlocked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

































<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_OLD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_NEW</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>








<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REF_HAVE_NEW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>




<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refs_read_raw_ref</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>referent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>referent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>packed_transaction_backend_data</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>own_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>updates</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packed_transaction_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_transaction_backend_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>backend_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>updates</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_tempfile_active</name><argument_list>(<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delete_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>own_lock</name></name> <operator>&amp;&amp;</operator> <call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packed_refs_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>own_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>REF_TRANSACTION_CLOSED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_transaction_prepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>packed_downcast</name><argument_list>(
<argument><expr><name>ref_store</name></expr></argument>,
<argument><expr><name>REF_STORE_READ</name> <operator>|</operator> <name>REF_STORE_WRITE</name> <operator>|</operator> <name>REF_STORE_ODB</name></expr></argument>,
<argument><expr><literal type="string">"ref_transaction_prepare"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_transaction_backend_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>TRANSACTION_GENERIC_ERROR</name></expr></init></decl>;</decl_stmt>










<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>updates</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>backend_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>transaction</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name><name>transaction</name><operator>-&gt;</operator><name>updates</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name> <init>=
<expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>updates</name></name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>update</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ref_update_reject_duplicates</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>updates</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>packed_refs_lock</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>own_lock</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_with_updates</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>updates</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transaction</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>REF_TRANSACTION_PREPARED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failure</name>:</label>
<expr_stmt><expr><call><name>packed_transaction_cleanup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_transaction_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>packed_downcast</name><argument_list>(
<argument><expr><name>ref_store</name></expr></argument>,
<argument><expr><name>REF_STORE_READ</name> <operator>|</operator> <name>REF_STORE_WRITE</name> <operator>|</operator> <name>REF_STORE_ODB</name></expr></argument>,
<argument><expr><literal type="string">"ref_transaction_abort"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packed_transaction_cleanup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_transaction_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><call><name>packed_downcast</name><argument_list>(
<argument><expr><name>ref_store</name></expr></argument>,
<argument><expr><name>REF_STORE_READ</name> <operator>|</operator> <name>REF_STORE_WRITE</name> <operator>|</operator> <name>REF_STORE_ODB</name></expr></argument>,
<argument><expr><literal type="string">"ref_transaction_finish"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>TRANSACTION_GENERIC_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>packed_refs_path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_snapshot</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>packed_refs_path</name> <operator>=</operator> <call><name>get_locked_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rename_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>, <argument><expr><name>packed_refs_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"error replacing %s: %s"</literal></expr></argument>,
<argument><expr><name><name>refs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>packed_refs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packed_transaction_cleanup</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_initial_transaction_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_delete_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>refnames</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_ref_store</name></name> <modifier>*</modifier></type><name>refs</name> <init>=
<expr><call><name>packed_downcast</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><name>REF_STORE_WRITE</name></expr></argument>, <argument><expr><literal type="string">"delete_refs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>refs</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>refnames</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name>ref_store_transaction_begin</name><argument_list>(<argument><expr><name>ref_store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transaction</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>refnames</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ref_transaction_delete</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not delete reference %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>refnames</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not delete reference %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>refnames</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not delete references: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_pack_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_create_symref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"packed reference store does not support symrefs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_rename_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldrefname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newrefname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"packed reference store does not support renaming references"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_copy_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldrefname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newrefname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"packed reference store does not support copying references"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>packed_reflog_iterator_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>empty_ref_iterator_begin</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_for_each_reflog_ent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>each_reflog_ent_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_for_each_reflog_ent_reverse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>each_reflog_ent_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_reflog_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_create_reflog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_create</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"packed reference store does not support reflogs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_delete_reflog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_reflog_expire</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_prepare_fn</name></type> <name>prepare_fn</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_should_prune_fn</name></type> <name>should_prune_fn</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_cleanup_fn</name></type> <name>cleanup_fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>policy_cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_storage_be</name></name></type> <name>refs_be_packed</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><literal type="string">"packed"</literal></expr>,
<expr><name>packed_ref_store_create</name></expr>,
<expr><name>packed_init_db</name></expr>,
<expr><name>packed_transaction_prepare</name></expr>,
<expr><name>packed_transaction_finish</name></expr>,
<expr><name>packed_transaction_abort</name></expr>,
<expr><name>packed_initial_transaction_commit</name></expr>,

<expr><name>packed_pack_refs</name></expr>,
<expr><name>packed_create_symref</name></expr>,
<expr><name>packed_delete_refs</name></expr>,
<expr><name>packed_rename_ref</name></expr>,
<expr><name>packed_copy_ref</name></expr>,

<expr><name>packed_ref_iterator_begin</name></expr>,
<expr><name>packed_read_raw_ref</name></expr>,

<expr><name>packed_reflog_iterator_begin</name></expr>,
<expr><name>packed_for_each_reflog_ent</name></expr>,
<expr><name>packed_for_each_reflog_ent_reverse</name></expr>,
<expr><name>packed_reflog_exists</name></expr>,
<expr><name>packed_create_reflog</name></expr>,
<expr><name>packed_delete_reflog</name></expr>,
<expr><name>packed_reflog_expire</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
