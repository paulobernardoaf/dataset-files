<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\refs\refs-internal.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REFS_REFS_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFS_REFS_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iterator.h"</cpp:file></cpp:include>

<struct_decl>struct <name>ref_transaction</name>;</struct_decl>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_HAVE_NEW</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_HAVE_OLD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>





<function_decl><type><name>long</name></type> <name>get_files_ref_lock_timeout_ms</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>int</name></type> <name>refname_is_safe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>ref_resolves_to_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>peel_status</name> <block>{

<decl><name>PEEL_PEELED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,






<decl><name>PEEL_INVALID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,


<decl><name>PEEL_NON_TAG</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,


<decl><name>PEEL_IS_SYMREF</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,






<decl><name>PEEL_BROKEN</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>








<function_decl><type><name><name>enum</name> <name>peel_status</name></name></type> <name>peel_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>copy_reflog_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>








<struct>struct <name>ref_update</name> <block>{




<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>new_oid</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>old_oid</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>backend_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>parent_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>refname</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>refs_read_raw_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>referent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>ref_update_reject_duplicates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>refnames</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier></type><name>ref_transaction_add_update</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>




















<enum>enum <name>ref_transaction_state</name> <block>{
<decl><name>REF_TRANSACTION_OPEN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>REF_TRANSACTION_PREPARED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>REF_TRANSACTION_CLOSED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>






<struct>struct <name>ref_transaction</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_update</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>updates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ref_transaction_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>backend_data</name></decl>;</decl_stmt>
}</block>;</struct>











<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_descendant_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>extras</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>skip</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> <name>refs_rename_ref_available</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_refname</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMREF_MAXDEPTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_FOR_EACH_INCLUDE_BROKEN</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

















































<struct>struct <name>ref_iterator</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator_vtable</name></name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ordered</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>









<function_decl><type><name>int</name></type> <name>ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>empty_ref_iterator_begin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>is_empty_ref_iterator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>refs_ref_iterator_begin</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>













<typedef>typedef <function_decl><type><name><name>enum</name> <name>iterator_selection</name></name></type> <name>ref_iterator_select_fn</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter1</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>








<function_decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>merge_ref_iterator_begin</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>ordered</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter1</name></decl></parameter>,
<parameter><decl><type><name>ref_iterator_select_fn</name> <modifier>*</modifier></type><name>select</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>overlay_ref_iterator_begin</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>front</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>back</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>prefix_ref_iterator_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trim</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>base_ref_iterator_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_iterator_vtable</name></name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ordered</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>base_ref_iterator_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_iterator_advance_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_iterator_peel_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>;</function_decl></typedef>






<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_iterator_abort_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>ref_iterator_vtable</name> <block>{
<decl_stmt><decl><type><name>ref_iterator_advance_fn</name> <modifier>*</modifier></type><name>advance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ref_iterator_peel_fn</name> <modifier>*</modifier></type><name>peel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ref_iterator_abort_fn</name> <modifier>*</modifier></type><name>abort</name></decl>;</decl_stmt>
}</block>;</struct>












<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>current_ref_iter</name></decl>;</decl_stmt>










<function_decl><type><name>int</name></type> <name>do_for_each_repo_ref_iterator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
<parameter><decl><type><name>each_repo_ref_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_FOR_EACH_PER_WORKTREE_ONLY</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<struct_decl>struct <name>ref_store</name>;</struct_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_STORE_READ</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_STORE_WRITE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_STORE_ODB</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_STORE_MAIN</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_STORE_ALL_CAPS</name></cpp:macro> <cpp:value>(REF_STORE_READ | REF_STORE_WRITE | REF_STORE_ODB | REF_STORE_MAIN)</cpp:value></cpp:define>









<typedef>typedef <function_decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store_init_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gitdir</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_init_db_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_transaction_prepare_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_transaction_finish_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_transaction_abort_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>ref_transaction_commit_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>pack_refs_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>create_symref_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref_target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refs_heads_master</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>delete_refs_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>refnames</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>rename_ref_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newref</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>copy_ref_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newref</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>








<typedef>typedef <function_decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator_begin_fn</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<typedef>typedef <function_decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>reflog_iterator_begin_fn</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>for_each_reflog_ent_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>each_reflog_ent_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>for_each_reflog_ent_reverse_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>each_reflog_ent_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>reflog_exists_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>create_reflog_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force_create</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>delete_reflog_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>reflog_expire_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_prepare_fn</name></type> <name>prepare_fn</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_should_prune_fn</name></type> <name>should_prune_fn</name></decl></parameter>,
<parameter><decl><type><name>reflog_expiry_cleanup_fn</name></type> <name>cleanup_fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>policy_cb_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







































<typedef>typedef <function_decl><type><name>int</name></type> <name>read_raw_ref_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>ref_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>referent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>ref_storage_be</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref_storage_be</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ref_store_init_fn</name> <modifier>*</modifier></type><name>init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ref_init_db_fn</name> <modifier>*</modifier></type><name>init_db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ref_transaction_prepare_fn</name> <modifier>*</modifier></type><name>transaction_prepare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ref_transaction_finish_fn</name> <modifier>*</modifier></type><name>transaction_finish</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ref_transaction_abort_fn</name> <modifier>*</modifier></type><name>transaction_abort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ref_transaction_commit_fn</name> <modifier>*</modifier></type><name>initial_transaction_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pack_refs_fn</name> <modifier>*</modifier></type><name>pack_refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>create_symref_fn</name> <modifier>*</modifier></type><name>create_symref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>delete_refs_fn</name> <modifier>*</modifier></type><name>delete_refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rename_ref_fn</name> <modifier>*</modifier></type><name>rename_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>copy_ref_fn</name> <modifier>*</modifier></type><name>copy_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ref_iterator_begin_fn</name> <modifier>*</modifier></type><name>iterator_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>read_raw_ref_fn</name> <modifier>*</modifier></type><name>read_raw_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>reflog_iterator_begin_fn</name> <modifier>*</modifier></type><name>reflog_iterator_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>for_each_reflog_ent_fn</name> <modifier>*</modifier></type><name>for_each_reflog_ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>for_each_reflog_ent_reverse_fn</name> <modifier>*</modifier></type><name>for_each_reflog_ent_reverse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reflog_exists_fn</name> <modifier>*</modifier></type><name>reflog_exists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>create_reflog_fn</name> <modifier>*</modifier></type><name>create_reflog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>delete_reflog_fn</name> <modifier>*</modifier></type><name>delete_reflog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reflog_expire_fn</name> <modifier>*</modifier></type><name>reflog_expire</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ref_storage_be</name></name></type> <name>refs_be_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ref_storage_be</name></name></type> <name>refs_be_packed</name></decl>;</decl_stmt>






<struct>struct <name>ref_store</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_storage_be</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
}</block>;</struct>





<function_decl><type><name>void</name></type> <name>base_ref_store_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_storage_be</name></name> <modifier>*</modifier></type><name>be</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
