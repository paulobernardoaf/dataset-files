<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\vcs-svn\svndump.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fast_export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line_buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svndump.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>constcmp</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcmp(s, ref, sizeof(ref) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPORT_FILENO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEACT_REPLACE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEACT_DELETE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEACT_ADD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEACT_CHANGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODEACT_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_CTX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV_CTX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_CTX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNODE_CTX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_RFC2822_LEN</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>line_buffer</name></name></type> <name>input</name> <init>= <expr><name>LINE_BUFFER_INIT</name></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>action</name></decl>, <decl><type ref="prev"/><name>srcRev</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>prop_length</name></decl>, <decl><type ref="prev"/><name>text_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>text_delta</name></decl>, <decl><type ref="prev"/><name>prop_delta</name></decl>;</decl_stmt>
}</block> <decl><name>node_ctx</name></decl>;</struct>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>log</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>note</name></decl>;</decl_stmt>
}</block> <decl><name>rev_ctx</name></decl>;</struct>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>uuid</name></decl>, <decl><type ref="prev"/><name>url</name></decl>;</decl_stmt>
}</block> <decl><name>dump_ctx</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_node_ctx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>prop_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>text_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>srcRev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>dst</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>text_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>prop_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_rev_ctx</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>revision</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rev_ctx</name><operator>.</operator><name>revision</name></name> <operator>=</operator> <name>revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev_ctx</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_dump_ctx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>url</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dump_ctx</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_property</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>key_buf</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>type_set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>key_buf</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name> <init>= <expr><name><name>key_buf</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>keylen</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"svn:log"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"svn:log"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: unsets svn:log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"svn:author"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"svn:author"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>author</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"svn:date"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"svn:date"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: unsets svn:date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_date_basic</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"invalid timestamp: %s"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"svn:executable"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"svn:special"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"svn:executable"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>constcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"svn:executable"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"svn:special"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>constcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"svn:special"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>type_set</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: sets type twice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>type_set</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>keylen</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"svn:executable"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><operator>(</operator><name>S_IFREG</name> <operator>|</operator> <literal type="number">0755</literal><operator>)</operator></expr> </then><else>:
<expr><name>S_IFLNK</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>die_short_read</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>buffer_ferror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"error reading dump file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_props</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>key</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>val</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>












<decl_stmt><decl><type><name>uint32_t</name></type> <name>type_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>buffer_read_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"PROPS-END"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>type</name> <init>= <expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name> <operator>||</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid property line: %s"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>buffer_read_binary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_short_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>buffer_read_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_short_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: expected newline after %s"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><call><name>handle_property</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><call><name>handle_property</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<default>default:</default>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid property line: %s"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_node</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>type</name> <init>= <expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>have_props</name> <init>= <expr><name><name>node_ctx</name><operator>.</operator><name>prop_length</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>have_text</name> <init>= <expr><name><name>node_ctx</name><operator>.</operator><name>text_length</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>empty_blob</name> <init>= <expr><literal type="string">"::empty::"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>old_mode</name> <init>= <expr><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>NODEACT_DELETE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>have_text</name> <operator>||</operator> <name>have_props</name> <operator>||</operator> <name><name>node_ctx</name><operator>.</operator><name>srcRev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: deletion node has "</literal>
<literal type="string">"copyfrom info, text, or properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fast_export_delete</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>NODEACT_REPLACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fast_export_delete</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_ADD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>srcRev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fast_export_copy</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>srcRev</name></name></expr></argument>, <argument><expr><name><name>node_ctx</name><operator>.</operator><name>src</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>NODEACT_ADD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_CHANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>have_text</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: directories cannot have text attached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>NODEACT_CHANGE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: root of tree is not a regular file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>old_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>NODEACT_CHANGE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mode</name></decl>;</decl_stmt>
<expr_stmt><expr><name>old_data</name> <operator>=</operator> <call><name>fast_export_read_path</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>S_IFDIR</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: cannot modify a directory into a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>S_IFDIR</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: cannot modify a file into a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>NODEACT_ADD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>have_text</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_data</name> <operator>=</operator> <name>empty_blob</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: adds node without text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: Node-path block lacks Node-action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>have_props</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node_ctx</name><operator>.</operator><name>prop_delta</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node_ctx</name><operator>.</operator><name>prop_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_props</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>S_IFDIR</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_data</name> <operator>==</operator> <name>empty_blob</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_text</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fast_export_modify</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>old_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node_ctx</name><operator>.</operator><name>text_delta</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fast_export_modify</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"inline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fast_export_data</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>node_ctx</name><operator>.</operator><name>text_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fast_export_modify</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>dst</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"inline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fast_export_blob_delta</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>old_mode</name></expr></argument>, <argument><expr><name>old_data</name></expr></argument>,
<argument><expr><name><name>node_ctx</name><operator>.</operator><name>text_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>begin_revision</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rev_ctx</name><operator>.</operator><name>revision</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fast_export_begin_commit</name><argument_list>(<argument><expr><name><name>rev_ctx</name><operator>.</operator><name>revision</name></name></expr></argument>, <argument><expr><name><name>rev_ctx</name><operator>.</operator><name>author</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><name><name>dump_ctx</name><operator>.</operator><name>uuid</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>dump_ctx</name><operator>.</operator><name>url</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>rev_ctx</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>remote_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end_revision</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>note_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>mark</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rev_ctx</name><operator>.</operator><name>revision</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fast_export_end_commit</name><argument_list>(<argument><expr><name><name>rev_ctx</name><operator>.</operator><name>revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fast_export_begin_note</name><argument_list>(<argument><expr><name><name>rev_ctx</name><operator>.</operator><name>revision</name></name></expr></argument>, <argument><expr><literal type="string">"remote-svn"</literal></expr></argument>,
<argument><expr><literal type="string">"Note created by remote-svn."</literal></expr></argument>, <argument><expr><name><name>rev_ctx</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>note_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>, <argument><expr><literal type="string">":%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>rev_ctx</name><operator>.</operator><name>revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fast_export_note</name><argument_list>(<argument><expr><name><name>mark</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"inline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fast_export_buf_to_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>svndump_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local_ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>notes_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>active_ctx</name> <init>= <expr><name>DUMP_CTX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>reset_dump_ctx</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>buffer_read_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>val</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"SVN-fs-dump-format-version"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"SVN-fs-dump-format-version"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dump_ctx</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dump_ctx</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"expected svn dump format version &lt;= 3, found %"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name><name>dump_ctx</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"UUID"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"UUID"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>uuid</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Revision-number"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Revision-number"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>NODE_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_node</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>REV_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>begin_revision</name><argument_list>(<argument><expr><name>local_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>!=</operator> <name>DUMP_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_revision</name><argument_list>(<argument><expr><name>notes_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>active_ctx</name> <operator>=</operator> <name>REV_CTX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_rev_ctx</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Node-path"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Node-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Node-"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>NODE_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_node</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>REV_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>begin_revision</name><argument_list>(<argument><expr><name>local_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>active_ctx</name> <operator>=</operator> <name>NODE_CTX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_node_ctx</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Node-"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>S_IFDIR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown node-kind: %s\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Node-action"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Node-action"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_DELETE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_ADD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"change"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_CHANGE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_REPLACE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown node-action: %s\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>NODEACT_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Node-copyfrom-path"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Node-copyfrom-path"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Node-copyfrom-rev"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Node-copyfrom-rev"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>srcRev</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Text-content-length"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Text"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Prop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"-content-length"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strtoumax</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: non-numeric length %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>maximum_signed_value_of_type</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unrepresentable length in dump: %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>text_length</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>prop_length</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Text-delta"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Text-delta"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>text_delta</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Prop-delta"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node_ctx</name><operator>.</operator><name>prop_delta</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Content-length"</literal></expr></argument>)</argument_list></sizeof></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>constcmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"Content-length"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>buffer_read_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_short_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid dump: expected blank line after content length header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>REV_CTX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_props</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>NODE_CTX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_node</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>active_ctx</name> <operator>=</operator> <name>INTERNODE_CTX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unexpected content length header: %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buffer_skip_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_short_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>buffer_ferror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_short_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>NODE_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_node</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>==</operator> <name>REV_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>begin_revision</name><argument_list>(<argument><expr><name>local_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active_ctx</name> <operator>!=</operator> <name>DUMP_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_revision</name><argument_list>(<argument><expr><name>notes_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>report_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fast_export_init</name><argument_list>(<argument><expr><name>report_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>uuid</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>author</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>dst</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_dump_ctx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_rev_ctx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_node_ctx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>svndump_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>buffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"cannot open %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>filename</name></expr> ?</condition><then> <expr><name>filename</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>REPORT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>svndump_init_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>back_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>buffer_fdinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><call><name>xdup</name><argument_list>(<argument><expr><name>in_fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"cannot open fd %d"</literal></expr></argument>, <argument><expr><name>in_fd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><call><name>xdup</name><argument_list>(<argument><expr><name>back_fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>svndump_deinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fast_export_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_dump_ctx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_rev_ctx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_node_ctx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>note</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node_ctx</name><operator>.</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buffer_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Input error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Output error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>svndump_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dump_ctx</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev_ctx</name><operator>.</operator><name>author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
