<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\vcs-svn\sliding_window.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sliding_window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line_buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>input_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buffer_ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"delta preimage ends early"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"cannot read delta preimage"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_or_whine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>gap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>buffer_skip_bytes</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>gap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>input_error</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_to_fill_or_whine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>buffer_read_binary</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>input_error</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_offset_overflow</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>maximum_signed_value_of_type</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unrepresentable length in delta: "</literal>
<literal type="string">"%"</literal><name>PRIuMAX</name><literal type="string">" &gt; OFF_MAX"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>signed_add_overflows</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unrepresentable offset in delta: "</literal>
<literal type="string">"%"</literal><name>PRIuMAX</name><literal type="string">" + %"</literal><name>PRIuMAX</name><literal type="string">" &gt; OFF_MAX"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>move_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sliding_view</name></name> <modifier>*</modifier></type><name>view</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>file_offset</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;=</operator> <name><name>view</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>check_offset_overflow</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>view</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_offset_overflow</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>view</name><operator>-&gt;</operator><name>off</name></name> <operator>||</operator> <name>off</name> <operator>+</operator> <name>width</name> <operator>&lt;</operator> <name><name>view</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>view</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid delta: window slides left"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>view</name><operator>-&gt;</operator><name>max_off</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>view</name><operator>-&gt;</operator><name>max_off</name></name> <operator>&lt;</operator> <name>off</name> <operator>+</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"delta preimage ends early"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file_offset</name> <operator>=</operator> <name><name>view</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>view</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>file_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>view</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>off</name> <operator>-</operator> <name><name>view</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>skip_or_whine</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>off</name> <operator>-</operator> <name>file_offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>view</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>view</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><call><name>read_to_fill_or_whine</name><argument_list>(<argument><expr><name><name>view</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>view</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>view</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
