<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\delta.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DELTA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELTA_H</name></cpp:macro></cpp:define>


<struct_decl>struct <name>delta_index</name>;</struct_decl>










<function_decl><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type>
<name>create_delta_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>free_delta_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>unsigned</name> <name>long</name></type> <name>sizeof_delta_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name> <modifier>*</modifier></type>
<name>create_delta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bufsize</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>delta_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>max_delta_size</name></decl></parameter>)</parameter_list>;</function_decl>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>
<name>diff_delta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>src_bufsize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>trg_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>trg_bufsize</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>delta_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>max_delta_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><call><name>create_delta_index</name><argument_list>(<argument><expr><name>src_buf</name></expr></argument>, <argument><expr><name>src_bufsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>delta</name> <init>= <expr><call><name>create_delta</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>trg_buf</name></expr></argument>, <argument><expr><name>trg_bufsize</name></expr></argument>,
<argument><expr><name>delta_size</name></expr></argument>, <argument><expr><name>max_delta_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_delta_index</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>delta</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function_decl><type><name>void</name> <modifier>*</modifier></type><name>patch_delta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>src_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>delta_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>delta_size</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dst_size</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELTA_SIZE_MIN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>get_delta_hdr_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>*</operator><name>datap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>|=</operator> <operator>(</operator><name>cmd</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>data</name> <operator>&lt;</operator> <name>top</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>datap</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
