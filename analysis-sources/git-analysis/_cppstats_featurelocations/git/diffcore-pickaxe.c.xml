<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\diffcore-pickaxe.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kwset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pickaxe_fn</name>)<parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>two</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl></parameter>, <parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>diffgrep_cb</name> <block>{
<decl_stmt><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hit</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diffgrep_consume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diffgrep_cb</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name>regmatch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>hit</name></name></expr>)</condition><block type="pseudo"><block_content>




<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>hit</name></name> <operator>=</operator> <operator>!</operator><call><name>regexec_buf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>regexp</name></name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_grep</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>two</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl></parameter>, <parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diffgrep_cb</name></name></type> <name>ecbdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name>regexec_buf</name><argument_list>(<argument><expr><name>regexp</name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>two</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name>regexec_buf</name><argument_list>(<argument><expr><name>regexp</name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>regexp</name></name> <operator>=</operator> <name>regexp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>hit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>interhunkctxlen</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>interhunkcontext</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><name>discard_hunk_line</name></expr></argument>, <argument><expr><name>diffgrep_consume</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>ecbdata</name><operator>.</operator><name>hit</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl></parameter>, <parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regexp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>sz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>regexec_buf</name><argument_list>(<argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG_NOTBOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>regmatch</name><operator>.</operator><name>rm_eo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name><name>regmatch</name><operator>.</operator><name>rm_eo</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name> <operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>rm_so</name></name> <operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>rm_eo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content> 
<while>while <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kwsmatch</name></name></type> <name>kwsm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><call><name>kwsexec</name><argument_list>(<argument><expr><name>kws</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kwsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name>offset</name> <operator>+</operator> <name><name>kwsm</name><operator>.</operator><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>offset</name> <operator>+</operator> <name><name>kwsm</name><operator>.</operator><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>cnt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_changes</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>two</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl></parameter>, <parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>one_contains</name> <init>= <expr><ternary><condition><expr><name>one</name></expr> ?</condition><then> <expr><call><name>contains</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>kws</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>two_contains</name> <init>= <expr><ternary><condition><expr><name>two</name></expr> ?</condition><then> <expr><call><name>contains</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>kws</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><name>one_contains</name> <operator>!=</operator> <name>two_contains</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pickaxe_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl></parameter>, <parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>, <parameter><decl><type><name>pickaxe_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv_one</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv_two</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf1</name></decl>, <decl><type ref="prev"/><name>mf2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>objfind</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>oidset_contains</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>objfind</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>oidset_contains</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>objfind</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>pickaxe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_textconv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>textconv_one</name> <operator>=</operator> <call><name>get_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textconv_two</name> <operator>=</operator> <call><name>get_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>textconv_one</name> <operator>==</operator> <name>textconv_two</name> <operator>&amp;&amp;</operator> <call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KIND_G</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>text</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>!</operator><name>textconv_one</name> <operator>&amp;&amp;</operator> <call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>textconv_two</name> <operator>&amp;&amp;</operator> <call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mf1</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>textconv_one</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mf1</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf2</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>textconv_two</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mf2</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>mf1</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>mf2</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><name>o</name></expr></argument>, <argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>kws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textconv_one</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mf1</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>textconv_two</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mf2</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pickaxe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl></parameter>, <parameter><decl><type><name>kwset_t</name></type> <name>kws</name></decl></parameter>, <parameter><decl><type><name>pickaxe_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>outq</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_ALL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pickaxe_match</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>kws</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
</block_content>}</block></for>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pickaxe_match</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>kws</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>outq</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>regcomp_or_die</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>regcomp</name><argument_list>(<argument><expr><name>regex</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid regex: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>diffcore_pickaxe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>pickaxe</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opts</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>pickaxe_opts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>regex</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>regexp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kwset_t</name></type> <name>kws</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_PICKAXE_REGEX</name> <operator>|</operator> <name>DIFF_PICKAXE_KIND_G</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cflags</name> <init>= <expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_NEWLINE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_IGNORE_CASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cflags</name> <operator>|=</operator> <name>REG_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regcomp_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regexp</name> <operator>=</operator> <operator>&amp;</operator><name>regex</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opts</name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KIND_S</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_IGNORE_CASE</name> <operator>&amp;&amp;</operator>
<call><name>has_non_ascii</name><argument_list>(<argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cflags</name> <init>= <expr><name>REG_NEWLINE</name> <operator>|</operator> <name>REG_ICASE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>basic_regex_quote_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regcomp_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regexp</name> <operator>=</operator> <operator>&amp;</operator><name>regex</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>kws</name> <operator>=</operator> <call><name>kwsalloc</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_IGNORE_CASE</name></expr>
?</condition><then> <expr><name>tolower_trans_tbl</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kwsincr</name><argument_list>(<argument><expr><name>kws</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kwsprep</name><argument_list>(<argument><expr><name>kws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pickaxe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>kws</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KIND_G</name><operator>)</operator></expr> ?</condition><then> <expr><name>diff_grep</name></expr> </then><else>: <expr><name>has_changes</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regexp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><name>regexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kws</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kwsfree</name><argument_list>(<argument><expr><name>kws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>
</unit>
