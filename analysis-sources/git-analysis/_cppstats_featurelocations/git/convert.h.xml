<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\convert.h">


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONVERT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<struct_decl>struct <name>index_state</name>;</struct_decl>
<struct_decl>struct <name>strbuf</name>;</struct_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_EOL_RNDTRP_DIE</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_EOL_RNDTRP_WARN</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_EOL_RENORMALIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_EOL_KEEP_CRLF</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_WRITE_OBJECT</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>global_conv_flags_eol</name></decl>;</decl_stmt>

<enum>enum <name>auto_crlf</name> <block>{
<decl><name>AUTO_CRLF_FALSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AUTO_CRLF_TRUE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AUTO_CRLF_INPUT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>auto_crlf</name></name></type> <name>auto_crlf</name></decl>;</decl_stmt>

<enum>enum <name>eol</name> <block>{
<decl><name>EOL_UNSET</name></decl>,
<decl><name>EOL_CRLF</name></decl>,
<decl><name>EOL_LF</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NATIVE_CRLF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>EOL_NATIVE</name> <init>= <expr><name>EOL_CRLF</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>EOL_NATIVE</name> <operator>=</operator> <name>EOL_LF</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</enum>

<enum>enum <name>ce_delay_state</name> <block>{
<decl><name>CE_NO_DELAY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CE_CAN_DELAY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CE_RETRY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>delayed_checkout</name> <block>{






<decl_stmt><decl><type><name><name>enum</name> <name>ce_delay_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>filters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>paths</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>checkout_metadata</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>treeish</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>blob</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>eol</name></name></type> <name>core_eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>check_roundtrip_encoding</name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_cached_convert_stats_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_wt_convert_stats_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_convert_attr_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>convert_to_git</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conv_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>convert_to_working_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>async_convert_to_working_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dco</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>async_query_available_blobs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>available_paths</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>renormalize_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>would_convert_to_git</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>convert_to_git</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>convert_to_git_filter_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>conv_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>would_convert_to_git_filter_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>void</name></type> <name>init_checkout_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>treeish</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>blob</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>clone_checkout_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>blob</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>reset_parsed_attributes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<struct_decl>struct <name>stream_filter</name>;</struct_decl> 

<function_decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>get_stream_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>is_null_stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>isize_p</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
