<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\pack-bitmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-revindex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter-options.h"</cpp:file></cpp:include>





<struct>struct <name>stored_bitmap</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>xor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>









<struct>struct <name>bitmap_index</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint32_t</name></type> <name>reuse_objects</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>map_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>map_pos</name></decl>;</decl_stmt> 








<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>commits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>trees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>blobs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>kh_oid_map_t</name> <modifier>*</modifier></type><name>bitmaps</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>entry_count</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>hashes</name></decl>;</decl_stmt>








<struct>struct <name>eindex</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>hashes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kh_oid_pos_t</name> <modifier>*</modifier></type><name>positions</name></decl>;</decl_stmt>
}</block> <decl><name>ext_index</name></decl>;</struct>


<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>haves</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>lookup_stored_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>composed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>xor</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>root</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>composed</name> <operator>=</operator> <call><name>ewah_pool_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>lookup_stored_bitmap</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>xor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_xor</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>composed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>composed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>xor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>composed</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>read_bitmap_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>ewah_pool_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>bitmap_size</name> <init>= <expr><call><name>ewah_read_mmap</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
<argument><expr><name><name>index</name><operator>-&gt;</operator><name>map</name></name> <operator>+</operator> <name><name>index</name><operator>-&gt;</operator><name>map_pos</name></name></expr></argument>,
<argument><expr><name><name>index</name><operator>-&gt;</operator><name>map_size</name></name> <operator>-</operator> <name><name>index</name><operator>-&gt;</operator><name>map_pos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Failed to load bitmap index (corrupted?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>map_pos</name></name> <operator>+=</operator> <name>bitmap_size</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_bitmap_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_disk_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>index</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>map_size</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Corrupted bitmap index (missing header data)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>BITMAP_IDX_SIGNATURE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITMAP_IDX_SIGNATURE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Corrupted bitmap index file (wrong header)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unsupported version for bitmap index file (%d)"</literal></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BITMAP_OPT_FULL_DAG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unsupported options for bitmap index file "</literal>
<literal type="string">"(Git requires BITMAP_OPT_FULL_DAG)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>BITMAP_OPT_HASH_CACHE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>map</name></name> <operator>+</operator> <name><name>index</name><operator>-&gt;</operator><name>map_size</name></name> <operator>-</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>hashes</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>end</name><operator>)</operator> <operator>-</operator> <name><name>index</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>entry_count</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>entry_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>map_pos</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>GIT_MAX_RAWSZ</name> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>store_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>xor_with</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>stored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>hash_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stored</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stored_bitmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>xor</name></name> <operator>=</operator> <name>xor_with</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stored</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash_pos</name> <operator>=</operator> <call><name>kh_put_oid_map</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name><name>stored</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Duplicate entry in bitmap index: %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>hash_pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>stored</name></expr>;</expr_stmt>
<return>return <expr><name>stored</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>read_be32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><call><name>get_be32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>read_u8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>buffer</name><index>[<expr><operator>(</operator><operator>*</operator><name>pos</name><operator>)</operator><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_XOR_OFFSET</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_bitmap_entries_v1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name><name>recent_bitmaps</name><index>[<expr><name>MAX_XOR_OFFSET</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>entry_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xor_offset</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>xor_bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>commit_idx_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>commit_idx_pos</name> <operator>=</operator> <call><name>read_be32</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>map_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xor_offset</name> <operator>=</operator> <call><name>read_u8</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>map_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>read_u8</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>map_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nth_packed_object_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name>commit_idx_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>read_bitmap_1</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xor_offset</name> <operator>&gt;</operator> <name>MAX_XOR_OFFSET</name> <operator>||</operator> <name>xor_offset</name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Corrupted bitmap pack index"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xor_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xor_bitmap</name> <operator>=</operator> <name><name>recent_bitmaps</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <name>xor_offset</name><operator>)</operator> <operator>%</operator> <name>MAX_XOR_OFFSET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xor_bitmap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid XOR offset in bitmap pack index"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>recent_bitmaps</name><index>[<expr><name>i</name> <operator>%</operator> <name>MAX_XOR_OFFSET</name></expr>]</index></name> <operator>=</operator> <call><name>store_bitmap</name><argument_list>(
<argument><expr><name>index</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>xor_bitmap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pack_bitmap_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strip_suffix</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>, <argument><expr><literal type="string">".pack"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"pack_name does not end in .pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%.*s.bitmap"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_pack_bitmap_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>packfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>idx_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>open_pack_index</name><argument_list>(<argument><expr><name>packfile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx_name</name> <operator>=</operator> <call><name>pack_bitmap_filename</name><argument_list>(<argument><expr><name>packfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>git_open</name><argument_list>(<argument><expr><name>idx_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>idx_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"ignoring extra bitmap file: %s"</literal></expr></argument>, <argument><expr><name><name>packfile</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name> <operator>=</operator> <name>packfile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map_size</name></name> <operator>=</operator> <call><name>xsize_t</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>xmmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>load_bitmap_header</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_pack_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name> <operator>=</operator> <call><name>kh_init_oid_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name><operator>.</operator><name>positions</name></name> <operator>=</operator> <call><name>kh_init_oid_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>load_pack_revindex</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>commits</name></name> <operator>=</operator> <call><name>read_bitmap_1</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>trees</name></name> <operator>=</operator> <call><name>read_bitmap_1</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>blobs</name></name> <operator>=</operator> <call><name>read_bitmap_1</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <call><name>read_bitmap_1</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>load_bitmap_entries_v1</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>map_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kh_destroy_oid_map</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kh_destroy_oid_pos</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name><operator>.</operator><name>positions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name><operator>.</operator><name>positions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_pack_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>get_all_packs</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>open_pack_bitmap_1</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>prepare_bitmap_git</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bitmap_git</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>open_pack_bitmap</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>load_pack_bitmap</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>bitmap_git</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_bitmap_index</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>include_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>seen</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bitmap_position_extended</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>kh_oid_pos_t</name> <modifier>*</modifier></type><name>positions</name> <init>= <expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name><operator>.</operator><name>positions</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name> <init>= <expr><call><name>kh_get_oid_pos</name><argument_list>(<argument><expr><name>positions</name></expr></argument>, <argument><expr><operator>*</operator><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_pos</name> <init>= <expr><call><name>kh_value</name><argument_list>(<argument><expr><name>positions</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>bitmap_pos</name> <operator>+</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bitmap_position_packfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name> <init>= <expr><call><name>find_pack_entry_one</name><argument_list>(<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>find_revindex_position</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bitmap_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>bitmap_position_packfile</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pos</name></expr> </then><else>: <expr><call><name>bitmap_position_extended</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ext_index_add_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>eindex</name></name> <modifier>*</modifier></type><name>eindex</name> <init>= <expr><operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>khiter_t</name></type> <name>hash_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hash_pos</name> <operator>=</operator> <call><name>kh_put_oid_pos</name><argument_list>(<argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>positions</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eindex</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>eindex</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eindex</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <operator>(</operator><name><name>eindex</name><operator>-&gt;</operator><name>alloc</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>hashes</name></name></expr></argument>, <argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <name><name>eindex</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eindex</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name><name>eindex</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eindex</name><operator>-&gt;</operator><name>hashes</name><index>[<expr><name><name>eindex</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <call><name>pack_name_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>positions</name></name></expr></argument>, <argument><expr><name>hash_pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>bitmap_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eindex</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <call><name>kh_value</name><argument_list>(<argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>positions</name></name></expr></argument>, <argument><expr><name>hash_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>bitmap_pos</name> <operator>+</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>bitmap_show_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_show_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>data_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <call><name>bitmap_position</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_git</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <call><name>ext_index_add_object</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_git</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_to_include_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>include_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bitmap_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>hash_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>seen</name></name> <operator>&amp;&amp;</operator> <call><name>bitmap_get</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash_pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><operator>*</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>hash_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bitmap_or_ewah</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><call><name>lookup_stored_bitmap</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>should_include</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>include_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <call><name>bitmap_position</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_git</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <call><name>ext_index_add_object</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_git</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>object</name> <operator>*</operator><operator>)</operator><name>commit</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_to_include_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bitmap_git</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,
<argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>find_objects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>roots</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>seen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needs_walk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>not_mapped</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>









<while>while <condition>(<expr><name>roots</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name><name>roots</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>roots</name> <operator>=</operator> <name><name>roots</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name> <init>= <expr><call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>or_with</name> <init>= <expr><call><name>lookup_stored_bitmap</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>ewah_to_bitmap</name><argument_list>(<argument><expr><name>or_with</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bitmap_or_ewah</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>or_with</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>object_list_insert</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>not_mapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>not_mapped</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>base</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>roots</name> <operator>=</operator> <name>not_mapped</name></expr>;</expr_stmt>










<while>while <condition>(<expr><name>roots</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name><name>roots</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>roots</name> <operator>=</operator> <name><name>roots</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bitmap_position</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>UNINTERESTING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>needs_walk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>needs_walk</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>include_data</name></name></type> <name>incdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_show_data</name></name></type> <name>show_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>bitmap_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>incdata</name><operator>.</operator><name>bitmap_git</name></name> <operator>=</operator> <name>bitmap_git</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>incdata</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>incdata</name><operator>.</operator><name>seen</name></name> <operator>=</operator> <name>seen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>include_check</name></name> <operator>=</operator> <name>should_include</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>include_check_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>incdata</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prepare_revision_walk</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"revision walk setup failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>show_data</name><operator>.</operator><name>bitmap_git</name></name> <operator>=</operator> <name>bitmap_git</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>show_data</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>traverse_commit_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>show_commit</name></expr></argument>, <argument><expr><name>show_object</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>show_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_extended_objects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name>show_reachable_fn</name></type> <name>show_reach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>objects</name> <init>= <expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>eindex</name></name> <modifier>*</modifier></type><name>eindex</name> <init>= <expr><operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eindex</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>eindex</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_BLOB</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_reach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eindex</name><operator>-&gt;</operator><name>hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_type_iterator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_COMMIT</name></expr>:</case>
<expr_stmt><expr><call><name>ewah_iterator_init</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OBJ_TREE</name></expr>:</case>
<expr_stmt><expr><call><name>ewah_iterator_init</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>trees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OBJ_BLOB</name></expr>:</case>
<expr_stmt><expr><call><name>ewah_iterator_init</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>blobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>OBJ_TAG</name></expr>:</case>
<expr_stmt><expr><call><name>ewah_iterator_init</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"object type %d not stored by bitmap type index"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_objects_for_type</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>object_type</name></decl></parameter>,
<parameter><decl><type><name>show_reachable_fn</name></type> <name>show_reach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>objects</name> <init>= <expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_type_iterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>object_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>objects</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&amp;&amp;</operator>
<call><name>ewah_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>eword_t</name></type> <name>word</name> <init>= <expr><name><name>objects</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>filter</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name>BITS_IN_EWORD</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>word</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>BITS_IN_EWORD</name></expr>;</condition> <incr><expr><operator>++</operator><name>offset</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>ewah_bit_ctz64</name><argument_list>(<argument><expr><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>pos</name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nth_packed_object_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>hashes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>hashes</name></name> <operator>+</operator> <name><name>entry</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_reach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>object_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>in_bitmapped_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>roots</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>roots</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name><name>roots</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>roots</name> <operator>=</operator> <name><name>roots</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_pack_entry_one</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>find_tip_blobs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>tip_objects</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>bitmap_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tip_objects</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bitmap_position</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_bitmap_blob_none</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>tip_objects</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>to_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>eindex</name></name> <modifier>*</modifier></type><name>eindex</name> <init>= <expr><operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>tips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>






<expr_stmt><expr><name>tips</name> <operator>=</operator> <call><name>find_tip_blobs</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>tip_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><call><name>init_type_iterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_BLOB</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>to_filter</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&amp;&amp;</operator> <call><name>ewah_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>tips</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>tips</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>to_filter</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
</block_content>}</block></for>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eindex</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>+</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eindex</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>OBJ_BLOB</name> <operator>&amp;&amp;</operator>
<call><name>bitmap_get</name><argument_list>(<argument><expr><name>to_filter</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>tips</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>to_filter</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name>tips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>get_size_by_pos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name> <init>= <expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_info</name></name></type> <name>oi</name> <init>= <expr><name>OBJECT_INFO_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oi</name><operator>.</operator><name>sizep</name></name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>pack</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>packed_object_info</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>pack</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>nth_packed_object_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>pack</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to get size of %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>eindex</name></name> <modifier>*</modifier></type><name>eindex</name> <init>= <expr><operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>eindex</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>pos</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to get size of %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_bitmap_blob_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>tip_objects</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>to_filter</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>eindex</name></name> <modifier>*</modifier></type><name>eindex</name> <init>= <expr><operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>tips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tips</name> <operator>=</operator> <call><name>find_tip_blobs</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>tip_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><call><name>init_type_iterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_BLOB</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>to_filter</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&amp;&amp;</operator> <call><name>ewah_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>eword_t</name></type> <name>word</name> <init>= <expr><name><name>to_filter</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>BITS_IN_EWORD</name></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>ewah_bit_ctz64</name><argument_list>(<argument><expr><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>BITS_IN_EWORD</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>tips</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>get_size_by_pos</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>to_filter</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eindex</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>+</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eindex</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>OBJ_BLOB</name> <operator>&amp;&amp;</operator>
<call><name>bitmap_get</name><argument_list>(<argument><expr><name>to_filter</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>tips</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>get_size_by_pos</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>to_filter</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name>tips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>tip_objects</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>to_filter</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name> <operator>||</operator> <name><name>filter</name><operator>-&gt;</operator><name>choice</name></name> <operator>==</operator> <name>LOFC_DISABLED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>choice</name></name> <operator>==</operator> <name>LOFC_BLOB_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitmap_git</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_bitmap_blob_none</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>tip_objects</name></expr></argument>,
<argument><expr><name>to_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>choice</name></name> <operator>==</operator> <name>LOFC_BLOB_LIMIT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitmap_git</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_bitmap_blob_limit</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>tip_objects</name></expr></argument>,
<argument><expr><name>to_filter</name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>blob_limit_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>can_filter_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>filter_bitmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>prepare_bitmap_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>wants</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>haves</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>wants_bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>haves_bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>prune</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_filter_bitmap</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>bitmap_git</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bitmap_git</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>open_pack_bitmap</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_object_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tag</name></name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><operator>(</operator>struct <name>tag</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>object_list_insert</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>haves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>object_list_insert</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>parse_object_or_die</name><argument_list>(<argument><expr><call><name>get_tagged_oid</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>object_list_insert</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>haves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>object_list_insert</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>






<if_stmt><if>if <condition>(<expr><name>haves</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>in_bitmapped_pack</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>haves</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wants</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>load_pack_bitmap</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>object_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>haves</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing_links</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>haves_bitmap</name> <operator>=</operator> <call><name>find_objects</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>haves</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_revision_walk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing_links</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>haves_bitmap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"failed to perform bitmap walk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wants_bitmap</name> <operator>=</operator> <call><name>find_objects</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>wants</name></expr></argument>, <argument><expr><name>haves_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wants_bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"failed to perform bitmap walk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>haves_bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bitmap_and_not</name><argument_list>(<argument><expr><name>wants_bitmap</name></expr></argument>, <argument><expr><name>haves_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_bitmap</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>wants</name></expr></argument>, <argument><expr><name>wants_bitmap</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>wants_bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>haves</name></name> <operator>=</operator> <name>haves_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>object_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>object_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>haves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bitmap_git</name></expr>;</return>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>free_bitmap_index</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>object_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>object_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>haves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>try_partial_reuse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>reuse</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>pack_window</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>w_curs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>revidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>revidx</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>revidx</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>unpack_object_header</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name>w_curs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBJ_REF_DELTA</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>OBJ_OFS_DELTA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>base_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base_pos</name></decl>;</decl_stmt>









<expr_stmt><expr><name>base_offset</name> <operator>=</operator> <call><name>get_delta_base</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name>w_curs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>revidx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base_offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>base_pos</name> <operator>=</operator> <call><name>find_revindex_position</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name>base_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>base_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>base_pos</name> <operator>&gt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bitmap_get</name><argument_list>(<argument><expr><name>reuse</name></expr></argument>, <argument><expr><name>base_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>reuse</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>reuse_partial_packfile_from_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>packfile_out</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>reuse_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>reuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_window</name></name> <modifier>*</modifier></type><name>w_curs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>/</operator> <name>BITS_IN_EWORD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>/</operator> <name>BITS_IN_EWORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reuse</name> <operator>=</operator> <call><name>bitmap_word_alloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>reuse</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>eword_t</name></type> <name>word</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name>BITS_IN_EWORD</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>BITS_IN_EWORD</name></expr>;</condition> <incr><expr><operator>++</operator><name>offset</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>ewah_bit_ctz64</name><argument_list>(<argument><expr><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>try_partial_reuse</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>reuse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>unuse_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w_curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>entries</name> <operator>=</operator> <call><name>bitmap_popcount</name><argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>entries</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>bitmap_and_not</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>packfile_out</name> <operator>=</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>reuse_out</name> <operator>=</operator> <name>reuse</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bitmap_walk_contains</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>bitmap_position</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>traverse_bitmap_commit_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name>show_reachable_fn</name></type> <name>show_reachable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_objects_for_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_COMMIT</name></expr></argument>, <argument><expr><name>show_reachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_objects_for_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_TREE</name></expr></argument>, <argument><expr><name>show_reachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_objects_for_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_BLOB</name></expr></argument>, <argument><expr><name>show_reachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_objects_for_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_TAG</name></expr></argument>, <argument><expr><name>show_reachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_extended_objects</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>show_reachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>count_object_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>objects</name> <init>= <expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>eindex</name></name> <modifier>*</modifier></type><name>eindex</name> <init>= <expr><operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>ext_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>filter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_type_iterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>objects</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&amp;&amp;</operator> <call><name>ewah_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>eword_t</name></type> <name>word</name> <init>= <expr><name><name>objects</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <name>filter</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>ewah_bit_popcount64</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eindex</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eindex</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator>
<call><name>bitmap_get</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>count_bitmap_commit_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>commits</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>trees</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>blobs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>commits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>commits</name> <operator>=</operator> <call><name>count_object_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trees</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>trees</name> <operator>=</operator> <call><name>count_object_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blobs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>blobs</name> <operator>=</operator> <call><name>count_object_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tags</name> <operator>=</operator> <call><name>count_object_type</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>OBJ_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>bitmap_test_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>prg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>seen</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_show_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_test_data</name></name> <modifier>*</modifier></type><name>tdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <call><name>bitmap_position</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>bitmap_git</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Object not in bitmap: %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>prg</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>tdata</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_show_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_test_data</name></name> <modifier>*</modifier></type><name>tdata</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmap_pos</name> <operator>=</operator> <call><name>bitmap_position</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>bitmap_git</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitmap_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Object not in bitmap: %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>tdata</name><operator>-&gt;</operator><name>prg</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>tdata</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_bitmap_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>result_popcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_test_data</name></name></type> <name>tdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bitmap_git</name> <operator>=</operator> <call><name>prepare_bitmap_git</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"failed to load bitmap indexes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nr</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"you must specify exactly one commit to test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Bitmap v%d test (%d entries loaded)\n"</literal></expr></argument>,
<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>entry_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>bm</name> <init>= <expr><call><name>lookup_stored_bitmap</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Found bitmap for %s. %d bits / %08x checksum\n"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>bm</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>, <argument><expr><call><name>ewah_checksum</name><argument_list>(<argument><expr><name>bm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ewah_to_bitmap</name><argument_list>(<argument><expr><name>bm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Commit %s doesn't have an indexed bitmap"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result_popcnt</name> <operator>=</operator> <call><name>bitmap_popcount</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prepare_revision_walk</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"revision walk setup failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tdata</name><operator>.</operator><name>bitmap_git</name></name> <operator>=</operator> <name>bitmap_git</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>bitmap_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><operator>.</operator><name>prg</name></name> <operator>=</operator> <call><name>start_progress</name><argument_list>(<argument><expr><literal type="string">"Verifying bitmap entries"</literal></expr></argument>, <argument><expr><name>result_popcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><operator>.</operator><name>seen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>traverse_commit_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_show_commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_show_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tdata</name><operator>.</operator><name>prg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bitmap_equals</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>tdata</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"OK!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Mismatch!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free_bitmap_index</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rebuild_bitmap</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>reposition</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>word</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ewah_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ewah_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>word</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>bit_pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>BITS_IN_EWORD</name></expr>;</condition> <incr><expr><operator>++</operator><name>offset</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>ewah_bit_ctz64</name><argument_list>(<argument><expr><name>word</name> <operator>&gt;&gt;</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <name><name>reposition</name><index>[<expr><name>pos</name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bit_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>bit_pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>BITS_IN_EWORD</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rebuild_existing_bitmaps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>,
<parameter><decl><type><name>kh_oid_map_t</name> <modifier>*</modifier></type><name>reused_bitmaps</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>show_progress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_objects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>reposition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>rebuild</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stored_bitmap</name></name> <modifier>*</modifier></type><name>stored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>khiter_t</name></type> <name>hash_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_objects</name> <operator>=</operator> <name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>num_objects</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>reposition</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>num_objects</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_objects</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>oe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nth_packed_object_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>pack</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oe</name> <operator>=</operator> <call><name>packlist_find</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>reposition</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>oe_in_pack_pos</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><name>oe</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>rebuild</name> <operator>=</operator> <call><name>bitmap_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_progress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>start_progress</name><argument_list>(<argument><expr><literal type="string">"Reusing bitmaps"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>kh_foreach_value</name><argument_list>(<argument>bitmap_git-&gt;bitmaps</argument>, <argument>stored</argument>, <argument>{
if (stored-&gt;flags &amp; BITMAP_FLAG_REUSE) {
if (!rebuild_bitmap(reposition,
lookup_stored_bitmap(stored),
rebuild)) {
hash_pos = kh_put_oid_map(reused_bitmaps,
stored-&gt;oid,
&amp;hash_ret);
kh_value(reused_bitmaps, hash_pos) =
bitmap_to_ewah(rebuild);
}
bitmap_reset(rebuild);
display_progress(progress, ++i);
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reposition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name>rebuild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_bitmap_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>map</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>trees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>blobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_destroy_oid_map</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ext_index</name><operator>.</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ext_index</name><operator>.</operator><name>hashes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>haves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bitmap_has_oid_in_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>bitmap_git</name> <operator>&amp;&amp;</operator>
<call><name>bitmap_walk_contains</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name><name>bitmap_git</name><operator>-&gt;</operator><name>haves</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
