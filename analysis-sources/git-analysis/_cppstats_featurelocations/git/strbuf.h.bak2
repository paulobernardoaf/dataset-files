#ifndef STRBUF_H
#define STRBUF_H

struct string_list;





























































struct strbuf {
	size_t alloc;
	size_t len;
	char *buf;
};

extern char strbuf_slopbuf[];
#define STRBUF_INIT  { .alloc = 0, .len = 0, .buf = strbuf_slopbuf }





struct object_id;










void strbuf_init(struct strbuf *sb, size_t alloc);









void strbuf_release(struct strbuf *sb);









char *strbuf_detach(struct strbuf *sb, size_t *sz);









void strbuf_attach(struct strbuf *sb, void *str, size_t len, size_t mem);




static inline void strbuf_swap(struct strbuf *a, struct strbuf *b)
{
	SWAP(*a, *b);
}










static inline size_t strbuf_avail(const struct strbuf *sb)
{
	return sb->alloc ? sb->alloc - sb->len - 1 : 0;
}








void strbuf_grow(struct strbuf *sb, size_t amount);








static inline void strbuf_setlen(struct strbuf *sb, size_t len)
{
	if (len > (sb->alloc ? sb->alloc - 1 : 0))
		die("BUG: strbuf_setlen() beyond buffer");
	sb->len = len;
	if (sb->buf != strbuf_slopbuf)
		sb->buf[len] = '\0';
	else
		assert(!strbuf_slopbuf[0]);
}




#define strbuf_reset(sb)  strbuf_setlen(sb, 0)











void strbuf_trim(struct strbuf *sb);
void strbuf_rtrim(struct strbuf *sb);
void strbuf_ltrim(struct strbuf *sb);


void strbuf_trim_trailing_dir_sep(struct strbuf *sb);


void strbuf_trim_trailing_newline(struct strbuf *sb);





int strbuf_reencode(struct strbuf *sb, const char *from, const char *to);




void strbuf_tolower(struct strbuf *sb);






int strbuf_cmp(const struct strbuf *first, const struct strbuf *second);















static inline void strbuf_addch(struct strbuf *sb, int c)
{
	if (!strbuf_avail(sb))
		strbuf_grow(sb, 1);
	sb->buf[sb->len++] = c;
	sb->buf[sb->len] = '\0';
}




void strbuf_addchars(struct strbuf *sb, int c, size_t n);





void strbuf_insert(struct strbuf *sb, size_t pos, const void *, size_t);







static inline void strbuf_insertstr(struct strbuf *sb, size_t pos,
				    const char *s)
{
	strbuf_insert(sb, pos, s, strlen(s));
}





void strbuf_vinsertf(struct strbuf *sb, size_t pos, const char *fmt,
		     va_list ap);

void strbuf_insertf(struct strbuf *sb, size_t pos, const char *fmt, ...);




void strbuf_remove(struct strbuf *sb, size_t pos, size_t len);





void strbuf_splice(struct strbuf *sb, size_t pos, size_t len,
		   const void *data, size_t data_len);





void strbuf_add_commented_lines(struct strbuf *out,
				const char *buf, size_t size);





void strbuf_add(struct strbuf *sb, const void *data, size_t len);










static inline void strbuf_addstr(struct strbuf *sb, const char *s)
{
	strbuf_add(sb, s, strlen(s));
}




void strbuf_addbuf(struct strbuf *sb, const struct strbuf *sb2);





const char *strbuf_join_argv(struct strbuf *buf, int argc,
			     const char **argv, char delim);

























typedef size_t (*expand_fn_t) (struct strbuf *sb,
			       const char *placeholder,
			       void *context);
void strbuf_expand(struct strbuf *sb,
		   const char *format,
		   expand_fn_t fn,
		   void *context);





size_t strbuf_expand_literal_cb(struct strbuf *sb,
				const char *placeholder,
				void *context);







struct strbuf_expand_dict_entry {
	const char *placeholder;
	const char *value;
};
size_t strbuf_expand_dict_cb(struct strbuf *sb,
			     const char *placeholder,
			     void *context);







void strbuf_addbuf_percentquote(struct strbuf *dst, const struct strbuf *src);





void strbuf_add_percentencode(struct strbuf *dst, const char *src);





void strbuf_humanise_bytes(struct strbuf *buf, off_t bytes);





void strbuf_humanise_rate(struct strbuf *buf, off_t bytes);




__attribute__((format (printf,2,3)))
void strbuf_addf(struct strbuf *sb, const char *fmt, ...);





__attribute__((format (printf, 2, 3)))
void strbuf_commented_addf(struct strbuf *sb, const char *fmt, ...);

__attribute__((format (printf,2,0)))
void strbuf_vaddf(struct strbuf *sb, const char *fmt, va_list ap);









void strbuf_addftime(struct strbuf *sb, const char *fmt,
		    const struct tm *tm, int tz_offset,
		    int suppress_tz_name);









size_t strbuf_fread(struct strbuf *sb, size_t size, FILE *file);






ssize_t strbuf_read(struct strbuf *sb, int fd, size_t hint);







ssize_t strbuf_read_once(struct strbuf *sb, int fd, size_t hint);







ssize_t strbuf_read_file(struct strbuf *sb, const char *path, size_t hint);





int strbuf_readlink(struct strbuf *sb, const char *path, size_t hint);





ssize_t strbuf_write(struct strbuf *sb, FILE *stream);










typedef int (*strbuf_getline_fn)(struct strbuf *, FILE *);


int strbuf_getline_lf(struct strbuf *sb, FILE *fp);


int strbuf_getline_nul(struct strbuf *sb, FILE *fp);








int strbuf_getline(struct strbuf *sb, FILE *file);






int strbuf_getwholeline(struct strbuf *sb, FILE *file, int term);







int strbuf_getwholeline_fd(struct strbuf *sb, int fd, int term);




int strbuf_getcwd(struct strbuf *sb);






void strbuf_add_absolute_path(struct strbuf *sb, const char *path);













void strbuf_add_real_path(struct strbuf *sb, const char *path);







int strbuf_normalize_path(struct strbuf *sb);





void strbuf_stripspace(struct strbuf *buf, int skip_comments);

static inline int strbuf_strip_suffix(struct strbuf *sb, const char *suffix)
{
	if (strip_suffix_mem(sb->buf, &sb->len, suffix)) {
		strbuf_setlen(sb, sb->len);
		return 1;
	} else
		return 0;
}



















struct strbuf **strbuf_split_buf(const char *str, size_t len,
				 int terminator, int max);

static inline struct strbuf **strbuf_split_str(const char *str,
					       int terminator, int max)
{
	return strbuf_split_buf(str, strlen(str), terminator, max);
}

static inline struct strbuf **strbuf_split_max(const struct strbuf *sb,
					       int terminator, int max)
{
	return strbuf_split_buf(sb->buf, sb->len, terminator, max);
}

static inline struct strbuf **strbuf_split(const struct strbuf *sb,
					   int terminator)
{
	return strbuf_split_max(sb, terminator, 0);
}











void strbuf_add_separated_string_list(struct strbuf *str,
				      const char *sep,
				      struct string_list *slist);





void strbuf_list_free(struct strbuf **list);





void strbuf_add_unique_abbrev(struct strbuf *sb,
			      const struct object_id *oid,
			      int abbrev_len);








int launch_editor(const char *path, struct strbuf *buffer,
		  const char *const *env);

int launch_sequence_editor(const char *path, struct strbuf *buffer,
			   const char *const *env);









int strbuf_edit_interactively(struct strbuf *buffer, const char *path,
			      const char *const *env);

void strbuf_add_lines(struct strbuf *sb,
		      const char *prefix,
		      const char *buf,
		      size_t size);





void strbuf_addstr_xml_quoted(struct strbuf *sb,
			      const char *s);







static inline void strbuf_complete(struct strbuf *sb, char term)
{
	if (sb->len && sb->buf[sb->len - 1] != term)
		strbuf_addch(sb, term);
}

static inline void strbuf_complete_line(struct strbuf *sb)
{
	strbuf_complete(sb, '\n');
}












void strbuf_branchname(struct strbuf *sb, const char *name,
		       unsigned allowed);







int strbuf_check_branch_ref(struct strbuf *sb, const char *name);

typedef int (*char_predicate)(char ch);

int is_rfc3986_unreserved(char ch);
int is_rfc3986_reserved_or_unreserved(char ch);

void strbuf_addstr_urlencode(struct strbuf *sb, const char *name,
			     char_predicate allow_unencoded_fn);

__attribute__((format (printf,1,2)))
int printf_ln(const char *fmt, ...);
__attribute__((format (printf,2,3)))
int fprintf_ln(FILE *fp, const char *fmt, ...);

char *xstrdup_tolower(const char *);
char *xstrdup_toupper(const char *);





__attribute__((format (printf, 1, 0)))
char *xstrvfmt(const char *fmt, va_list ap);
__attribute__((format (printf, 1, 2)))
char *xstrfmt(const char *fmt, ...);

#endif 
