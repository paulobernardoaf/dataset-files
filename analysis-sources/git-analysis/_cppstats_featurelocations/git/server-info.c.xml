<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\server-info.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<struct>struct <name>update_info_ctx</name> <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>cur_fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>old_fp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>cur_sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>old_sb</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uic_mark_stale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>update_info_ctx</name></name> <modifier>*</modifier></type><name>uic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>uic</name><operator>-&gt;</operator><name>old_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uic</name><operator>-&gt;</operator><name>old_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uic_is_stale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>update_info_ctx</name></name> <modifier>*</modifier></type><name>uic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>uic</name><operator>-&gt;</operator><name>old_fp</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uic_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>update_info_ctx</name></name> <modifier>*</modifier></type><name>uic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uic_is_stale</name><argument_list>(<argument><expr><name>uic</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name><name>uic</name><operator>-&gt;</operator><name>cur_fp</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>uic</name><operator>-&gt;</operator><name>cur_sb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>old</name> <init>= <expr><operator>&amp;</operator><name><name>uic</name><operator>-&gt;</operator><name>old_sb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_vinsertf</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>uic</name><operator>-&gt;</operator><name>old_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name><name>cur</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>uic_mark_stale</name><argument_list>(<argument><expr><name>uic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>uic</name><operator>-&gt;</operator><name>cur_fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>update_info_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>generate</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>update_info_ctx</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s_XXXXXX"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>to_close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>update_info_ctx</name></name></type> <name>uic</name> <init>= <expr><block>{
<expr><operator>.</operator><name>cur_fp</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>old_fp</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>cur_sb</name> <operator>=</operator> <name>STRBUF_INIT</name></expr>,
<expr><operator>.</operator><name>old_sb</name> <operator>=</operator> <name>STRBUF_INIT</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>safe_create_leading_directories</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>git_mkstemp_mode</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>to_close</name> <operator>=</operator> <name><name>uic</name><operator>.</operator><name>cur_fp</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>uic</name><operator>.</operator><name>cur_fp</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uic</name><operator>.</operator><name>old_fp</name></name> <operator>=</operator> <call><name>fopen_or_warn</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uic_is_stale</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uic</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>new_len</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name><name>uic</name><operator>.</operator><name>cur_fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>uic</name><operator>.</operator><name>old_fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>old_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>new_len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>uic_mark_stale</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>uic</name><operator>.</operator><name>cur_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>to_close</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uic_is_stale</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uic</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>adjust_shared_perm</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"unable to update %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uic</name><operator>.</operator><name>cur_fp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>uic</name><operator>.</operator><name>cur_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uic</name><operator>.</operator><name>old_fp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>uic</name><operator>.</operator><name>old_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uic</name><operator>.</operator><name>old_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uic</name><operator>.</operator><name>cur_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_info_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>update_info_ctx</name></name> <modifier>*</modifier></type><name>uic</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uic_printf</name><argument_list>(<argument><expr><name>uic</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>deref_tag</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>uic_printf</name><argument_list>(<argument><expr><name>uic</name></expr></argument>, <argument><expr><literal type="string">"%s %s^{}\n"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_info_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>update_info_ctx</name></name> <modifier>*</modifier></type><name>uic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>add_info_ref</name></expr></argument>, <argument><expr><name>uic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_info_refs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>git_pathdup</name><argument_list>(<argument><expr><literal type="string">"info/refs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>update_info_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>generate_info_refs</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<struct><specifier>static</specifier> struct <name>pack_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_num</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><modifier>*</modifier><name>info</name></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num_pack</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>pack_info</name></name> <modifier>*</modifier></type><name>find_pack_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pack</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>pack_basename</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_pack_def</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>packname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_info</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>find_pack_by_name</name><argument_list>(<argument><expr><name>packname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>old_num</name></name> <operator>=</operator> <name>old_cnt</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>read_pack_info_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>infofile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>line</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen_or_warn</name><argument_list>(<argument><expr><name>infofile</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<while>while <condition>(<expr><call><name>strbuf_getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>line</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"P "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>parse_pack_def</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>old_cnt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_stale</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_stale</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>out_stale</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unrecognized: %s"</literal></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>stale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>out_stale</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>stale</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_info</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>a_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_info</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>old_num</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>old_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>old_num</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>old_num</name></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>old_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>old_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_pack_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>infofile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>get_all_packs</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pack_local</name></name> <operator>||</operator> <operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>num_pack</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>num_pack</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pack_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>old_num</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>infofile</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stale</name> <operator>=</operator> <call><name>read_pack_info_file</name><argument_list>(<argument><expr><name>infofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pack</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>old_num</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>


<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>num_pack</name></expr></argument>, <argument><expr><name>compare_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pack</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>new_num</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_pack_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pack</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_pack_info_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>update_info_ctx</name></name> <modifier>*</modifier></type><name>uic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pack</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>uic_printf</name><argument_list>(<argument><expr><name>uic</name></expr></argument>, <argument><expr><literal type="string">"P %s\n"</literal></expr></argument>, <argument><expr><call><name>pack_basename</name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>uic_printf</name><argument_list>(<argument><expr><name>uic</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_info_packs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infofile</name> <init>= <expr><call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/info/packs"</literal></expr></argument>, <argument><expr><call><name>get_object_directory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_pack_info</name><argument_list>(<argument><expr><name>infofile</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_info_file</name><argument_list>(<argument><expr><name>infofile</name></expr></argument>, <argument><expr><name>write_pack_info_file</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_pack_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>update_server_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <name>errs</name> <operator>|</operator> <call><name>update_info_refs</name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name> <operator>=</operator> <name>errs</name> <operator>|</operator> <call><name>update_info_packs</name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><call><name>git_path</name><argument_list>(<argument><expr><literal type="string">"info/rev-cache"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>errs</name></expr>;</return>
</block_content>}</block></function>
</unit>
