<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\http.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sideband.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urlmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"credential.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkt-line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gettext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>trace_key</name></name></type> <name>trace_curl</name> <init>= <expr><call><name>TRACE_KEY_INIT</name><argument_list>(<argument><expr><name>CURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>trace_curl_data</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>cookies_to_redact</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070a08</literal></expr></cpp:if>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>git_curl_ipresolve</name> <init>= <expr><name>CURL_IPRESOLVE_WHATEVER</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>git_curl_ipresolve</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>active_requests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>http_is_verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>http_post_buffer</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name>LARGE_PACKET_MAX</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070a06</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBCURL_CAN_HANDLE_AUTH_ANY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>min_curl_sessions</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curl_session_count</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_requests</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CURLM</name> <modifier>*</modifier></type><name>curlm</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CURL_EASY_DUPHANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>CURL</name> <modifier>*</modifier></type><name>curl_default</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREV_BUF_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>curl_errorstr</name><index>[<expr><name>CURL_ERROR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curl_ssl_verify</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curl_ssl_try</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curl_http_version</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_cipherlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_version</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name></decl>;</decl_stmt>
}</block> <decl><name><name>sslversions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"sslv2"</literal></expr>, <expr><name>CURL_SSLVERSION_SSLv2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sslv3"</literal></expr>, <expr><name>CURL_SSLVERSION_SSLv3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tlsv1"</literal></expr>, <expr><name>CURL_SSLVERSION_TLSv1</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x072200</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"tlsv1.0"</literal></expr>, <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tlsv1.1"</literal></expr>, <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tlsv1.2"</literal></expr>, <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x073400</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"tlsv1.3"</literal></expr>, <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070903</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_key</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070908</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_capath</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071304</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curl_no_proxy</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x072c00</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_pinnedkey</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_cainfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>curl_low_speed_limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>curl_low_speed_time</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curl_ftp_no_epsv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curl_http_proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_proxy_authmethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_proxy_ssl_cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_proxy_ssl_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_proxy_ssl_ca_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>credential</name></name></type> <name>proxy_cert_auth</name> <init>= <expr><name>CREDENTIAL_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proxy_ssl_cert_password_required</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>curlauth_param</name></decl>;</decl_stmt>
}</block> <decl><name><name>proxy_authmethods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"basic"</literal></expr>, <expr><name>CURLAUTH_BASIC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"digest"</literal></expr>, <expr><name>CURLAUTH_DIGEST</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"negotiate"</literal></expr>, <expr><name>CURLAUTH_GSSNEGOTIATE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ntlm"</literal></expr>, <expr><name>CURLAUTH_NTLM</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBCURL_CAN_HANDLE_AUTH_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"anyauth"</literal></expr>, <expr><name>CURLAUTH_ANY</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





}</block></expr></init></decl>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLGSSAPI_DELEGATION_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curl_deleg</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>curl_deleg_param</name></decl>;</decl_stmt>
}</block> <decl><name><name>curl_deleg_levels</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>CURLGSSAPI_DELEGATION_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"policy"</literal></expr>, <expr><name>CURLGSSAPI_DELEGATION_POLICY_FLAG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"always"</literal></expr>, <expr><name>CURLGSSAPI_DELEGATION_FLAG</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>credential</name></name></type> <name>proxy_auth</name> <init>= <expr><name>CREDENTIAL_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curl_proxyuserpwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curl_cookie_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curl_save_cookies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>credential</name></name></type> <name>http_auth</name> <init>= <expr><name>CREDENTIAL_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>http_proactive_auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_agent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curl_empty_auth</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>http_follow_config</name></name></type> <name>http_follow_config</name> <init>= <expr><name>HTTP_FOLLOW_INITIAL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071700</literal></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070903</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLOPT_KEYPASSWD</name></cpp:macro> <cpp:value>CURLOPT_SSLKEYPASSWD</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLOPT_KEYPASSWD</name></cpp:macro> <cpp:value>CURLOPT_SSLCERTPASSWD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>credential</name></name></type> <name>cert_auth</name> <init>= <expr><name>CREDENTIAL_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ssl_cert_password_required</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBCURL_CAN_HANDLE_AUTH_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>http_auth_methods</name> <init>= <expr><name>CURLAUTH_ANY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>http_auth_methods_restricted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>empty_auth_useless</name> <init>=
<expr><name>CURLAUTH_BASIC</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLAUTH_DIGEST_IE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURLAUTH_DIGEST_IE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>|</operator> <name>CURLAUTH_DIGEST</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>pragma_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>no_pragma_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>extra_http_headers</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>active_queue_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cached_accept_language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>http_ssl_backend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>http_schannel_check_revoke</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>http_schannel_use_ssl_cainfo</name></decl>;</decl_stmt>

<function><type><name>size_t</name></type> <name>fread_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>eltsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>eltsize</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>buffer_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name><name>buffer</name><operator>-&gt;</operator><name>posn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name><name>buffer</name><operator>-&gt;</operator><name>posn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>buffer</name><operator>-&gt;</operator><name>posn</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>posn</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>size</name> <operator>/</operator> <name>eltsize</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CURL_IOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>curlioerr</name></type> <name>ioctl_buffer</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>clientp</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLIOCMD_NOP</name></expr>:</case>
<return>return <expr><name>CURLIOE_OK</name></expr>;</return>

<case>case <expr><name>CURLIOCMD_RESTARTREAD</name></expr>:</case>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>posn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>CURLIOE_OK</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>CURLIOE_UNKNOWNCMD</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>fwrite_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>eltsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>eltsize</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>buffer_</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nmemb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>fwrite_null</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>eltsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>strbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>nmemb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>closedown_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>active_requests</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>closedown_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLINFO_HTTP_CODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>results</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>results</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>curl_result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>results</name><operator>-&gt;</operator><name>http_code</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>http_code</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070a08</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLINFO_HTTPAUTH_AVAIL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>results</name><operator>-&gt;</operator><name>auth_avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>results</name><operator>-&gt;</operator><name>auth_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLINFO_HTTP_CONNECTCODE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>results</name><operator>-&gt;</operator><name>http_connectcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>callback_func</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>slot</name><operator>-&gt;</operator><name>callback_func</name></name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>callback_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xmulti_remove_handle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>process_curl_messages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_messages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>curl_message</name> <init>= <expr><call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_messages</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>curl_message</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curl_message</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curl_result</name> <init>= <expr><name><name>curl_message</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>active_queue_head</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>slot</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>!=</operator> <name><name>curl_message</name><operator>-&gt;</operator><name>easy_handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmulti_remove_handle</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>=</operator> <name>curl_result</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Received DONE message for unknown request!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown CURL message received: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curl_message</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>curl_message</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_messages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.version"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_http_version</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslverify"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curl_ssl_verify</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslcipherlist"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_cipherlist</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslversion"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_version</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslcert"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_cert</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070903</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslkey"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_key</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070908</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslcapath"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_capath</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslcainfo"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_cainfo</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslcertpasswordprotected"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ssl_cert_password_required</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.ssltry"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curl_ssl_try</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.sslbackend"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>http_ssl_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>http_ssl_backend</name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.schannelcheckrevoke"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>http_schannel_check_revoke</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.schannelusesslcainfo"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>http_schannel_use_ssl_cainfo</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.minsessions"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_curl_sessions</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>min_curl_sessions</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_curl_sessions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.maxrequests"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_requests</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.lowspeedlimit"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curl_low_speed_limit</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.lowspeedtime"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curl_low_speed_time</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.noepsv"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curl_ftp_no_epsv</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.proxy"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_http_proxy</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.proxyauthmethod"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_authmethod</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.proxysslcert"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_ssl_cert</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.proxysslkey"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_ssl_key</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.proxysslcainfo"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_ssl_ca_info</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.proxysslcertpasswordprotected"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>proxy_ssl_cert_password_required</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.cookiefile"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_cookie_file</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.savecookies"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curl_save_cookies</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.postbuffer"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>http_post_buffer</name> <operator>=</operator> <call><name>git_config_ssize_t</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>http_post_buffer</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"negative value for http.postbuffer; defaulting to %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LARGE_PACKET_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>http_post_buffer</name> <operator>&lt;</operator> <name>LARGE_PACKET_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>http_post_buffer</name> <operator>=</operator> <name>LARGE_PACKET_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.useragent"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_agent</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.emptyauth"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_empty_auth</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_empty_auth</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.delegation"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLGSSAPI_DELEGATION_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_deleg</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Delegation control is not supported with cURL &lt; 7.22.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.pinnedpubkey"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x072c00</literal></expr></cpp:if>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_pinnedkey</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Public key pinning not supported with cURL &lt; 7.44.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.extraheader"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra_http_headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra_http_headers</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http.followredirects"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"initial"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>http_follow_config</name> <operator>=</operator> <name>HTTP_FOLLOW_INITIAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>http_follow_config</name> <operator>=</operator> <name>HTTP_FOLLOW_ALWAYS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>http_follow_config</name> <operator>=</operator> <name>HTTP_FOLLOW_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>curl_empty_auth_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curl_empty_auth</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>curl_empty_auth</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBCURL_CAN_HANDLE_AUTH_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>









<if_stmt><if>if <condition>(<expr><name>http_auth_methods_restricted</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>http_auth_methods</name> <operator>&amp;</operator> <operator>~</operator><name>empty_auth_useless</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_curl_http_auth</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>http_auth</name><operator>.</operator><name>username</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>http_auth</name><operator>.</operator><name>username</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>curl_empty_auth_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_USERPWD</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>credential_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071301</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_USERNAME</name></expr></argument>, <argument><expr><name><name>http_auth</name><operator>.</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PASSWORD</name></expr></argument>, <argument><expr><name><name>http_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>up</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>up</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>up</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,
<argument><expr><name><name>http_auth</name><operator>.</operator><name>username</name></name></expr></argument>, <argument><expr><name><name>http_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_USERPWD</name></expr></argument>, <argument><expr><name><name>up</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>var_override</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_proxyauth_name_password</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071301</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYUSERNAME</name></expr></argument>,
<argument><expr><name><name>proxy_auth</name><operator>.</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYPASSWORD</name></expr></argument>,
<argument><expr><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>s</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr_urlencode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>proxy_auth</name><operator>.</operator><name>username</name></name></expr></argument>,
<argument><expr><name>is_rfc3986_unreserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr_urlencode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr></argument>,
<argument><expr><name>is_rfc3986_unreserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curl_proxyuserpwd</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYUSERPWD</name></expr></argument>, <argument><expr><name>curl_proxyuserpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_curl_proxy_auth</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>proxy_auth</name><operator>.</operator><name>username</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>credential_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proxy_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_proxyauth_name_password</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_authmethod</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_HTTP_PROXY_AUTHMETHOD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070a07</literal></expr></cpp:if> 
<if_stmt><if>if <condition>(<expr><name>http_proxy_authmethod</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>proxy_authmethods</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>http_proxy_authmethod</name></expr></argument>, <argument><expr><name><name>proxy_authmethods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>,
<argument><expr><name><name>proxy_authmethods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>curlauth_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>proxy_authmethods</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"unsupported proxy authentication method %s: using anyauth"</literal></expr></argument>,
<argument><expr><name>http_proxy_authmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_cert_password</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ssl_cert</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ssl_cert_password_required</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cert_auth</name><operator>.</operator><name>password</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cert_auth</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"cert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert_auth</name><operator>.</operator><name>username</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert_auth</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>credential_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x073400</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>has_proxy_cert_password</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>http_proxy_ssl_cert</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>proxy_ssl_cert_password_required</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy_cert_auth</name><operator>.</operator><name>password</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>proxy_cert_auth</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"cert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy_cert_auth</name><operator>.</operator><name>username</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxy_cert_auth</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>http_proxy_ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>credential_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proxy_cert_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071900</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_curl_keepalive</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CURLOPT_TCP_KEEPALIVE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071000</literal></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sockopt_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>curlsocktype</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ka</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ka</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>CURLSOCKTYPE_IPCXN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ka</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning_errno</name><argument_list>(<argument><expr><literal type="string">"unable to set SO_KEEPALIVE on socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_curl_keepalive</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CURLOPT_SOCKOPTFUNCTION</name></expr></argument>, <argument><expr><name>sockopt_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_curl_keepalive</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redact_sensitive_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sensitive_header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"Authorization:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sensitive_header</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"Proxy-Authorization:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sensitive_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>sensitive_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sensitive_header</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>*</operator><name>sensitive_header</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>sensitive_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sensitive_header</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>sensitive_header</name> <operator>-</operator> <name><name>header</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">" &lt;redacted&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cookies_to_redact</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"Cookie:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sensitive_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>redacted_header</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cookie</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>sensitive_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sensitive_header</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>






<expr_stmt><expr><name>cookie</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sensitive_header</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cookie</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>equals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>semicolon</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>semicolon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>semicolon</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>equals</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>equals</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redacted_header</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>equals</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>string_list_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cookies_to_redact</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redacted_header</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redacted_header</name></expr></argument>, <argument><expr><literal type="string">"=&lt;redacted&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>equals</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redacted_header</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>semicolon</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redacted_header</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cookie</name> <operator>=</operator> <name>semicolon</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cookie</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>sensitive_header</name> <operator>-</operator> <name><name>header</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>redacted_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>curl_dump_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hide_sensitive_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>out</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>headers</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s, %10.10ld bytes (0x%8.8lx)\n"</literal></expr></argument>,
<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_strbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_curl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>strbuf_split_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>header</name> <operator>=</operator> <name>headers</name></expr>;</init> <condition><expr><operator>*</operator><name>header</name></expr>;</condition> <incr><expr><name>header</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hide_sensitive_header</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redact_sensitive_header</name><argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_insertstr</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>header</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_insertstr</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>header</name><operator>)</operator></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_rtrim</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>header</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>header</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_strbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_curl</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>header</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_list_free</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>curl_dump_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>out</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s, %10.10ld bytes (0x%8.8lx)\n"</literal></expr></argument>,
<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_strbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_curl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>width</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>w</name> <operator>&lt;</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>w</name> <operator>&lt;</operator> <name>size</name><operator>)</operator></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name> <init>= <expr><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>
?</condition><then> <expr><name>ch</name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_strbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_curl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>curl_trace</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>curl_infotype</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>NO_FILTER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>DO_FILTER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLINFO_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_curl</name></expr></argument>, <argument><expr><literal type="string">"== Info: %s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_HEADER_OUT</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send header"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_dump_header</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>DO_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_DATA_OUT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>trace_curl_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send data"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_dump_data</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_SSL_DATA_OUT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>trace_curl_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send SSL data"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_dump_data</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_HEADER_IN</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv header"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_dump_header</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NO_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_DATA_IN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>trace_curl_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv data"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_dump_data</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_SSL_DATA_IN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>trace_curl_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv SSL data"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_dump_data</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setup_curl_trace</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>trace_want</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_curl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_DEBUGFUNCTION</name></expr></argument>, <argument><expr><name>curl_trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_DEBUGDATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLPROTO_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>long</name></type> <name>get_curl_allowed_protocols</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from_user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>allowed_protocols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_transport_allowed</name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>from_user</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allowed_protocols</name> <operator>|=</operator> <name>CURLPROTO_HTTP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_transport_allowed</name><argument_list>(<argument><expr><literal type="string">"https"</literal></expr></argument>, <argument><expr><name>from_user</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allowed_protocols</name> <operator>|=</operator> <name>CURLPROTO_HTTPS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_transport_allowed</name><argument_list>(<argument><expr><literal type="string">"ftp"</literal></expr></argument>, <argument><expr><name>from_user</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allowed_protocols</name> <operator>|=</operator> <name>CURLPROTO_FTP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_transport_allowed</name><argument_list>(<argument><expr><literal type="string">"ftps"</literal></expr></argument>, <argument><expr><name>from_user</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allowed_protocols</name> <operator>|=</operator> <name>CURLPROTO_FTPS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>allowed_protocols</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator><literal type="number">0x072f00</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_curl_http_version_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version_string</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>opt_token</name></decl>;</decl_stmt>
}</block> <decl><name><name>choice</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"HTTP/1.1"</literal></expr>, <expr><name>CURL_HTTP_VERSION_1_1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"HTTP/2"</literal></expr>, <expr><name>CURL_HTTP_VERSION_2</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>version_string</name></expr></argument>, <argument><expr><name><name>choice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>opt</name> <operator>=</operator> <name><name>choice</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opt_token</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"unknown value given to http.version: '%s'"</literal></expr></argument>, <argument><expr><name>version_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURL</name> <modifier>*</modifier></type><name>get_curl_handle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"curl_easy_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curl_ssl_verify</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x072f00</literal></expr></cpp:if> 
<if_stmt><if>if <condition>(<expr><name>curl_http_version</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>opt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_curl_http_version_opt</name><argument_list>(<argument><expr><name>curl_http_version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_HTTP_VERSION</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070907</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_NETRC</name></expr></argument>, <argument><expr><name>CURL_NETRC_OPTIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBCURL_CAN_HANDLE_AUTH_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_HTTPAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLGSSAPI_DELEGATION_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>curl_deleg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>curl_deleg_levels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>curl_deleg</name></expr></argument>, <argument><expr><name><name>curl_deleg_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_GSSAPI_DELEGATION</name></expr></argument>,
<argument><expr><name><name>curl_deleg_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>curl_deleg_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>curl_deleg_levels</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Unknown delegation method '%s': using default"</literal></expr></argument>,
<argument><expr><name>curl_deleg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>http_ssl_backend</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"schannel"</literal></expr></argument>, <argument><expr><name>http_ssl_backend</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name>http_schannel_check_revoke</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x072c00</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_OPTIONS</name></expr></argument>, <argument><expr><name>CURLSSLOPT_NO_REVOKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"CURLSSLOPT_NO_REVOKE not supported with cURL &lt; 7.44.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>http_proactive_auth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_curl_http_auth</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_SSL_VERSION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ssl_version</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_SSL_VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl_version</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ssl_version</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>sslversions</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ssl_version</name></expr></argument>, <argument><expr><name><name>sslversions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSLVERSION</name></expr></argument>,
<argument><expr><name><name>sslversions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ssl_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>sslversions</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"unsupported ssl version %s: using default"</literal></expr></argument>,
<argument><expr><name>ssl_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_SSL_CIPHER_LIST"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ssl_cipherlist</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_SSL_CIPHER_LIST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl_cipherlist</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ssl_cipherlist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_CIPHER_LIST</name></expr></argument>,
<argument><expr><name>ssl_cipherlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ssl_cert</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSLCERT</name></expr></argument>, <argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>has_cert_password</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_KEYPASSWD</name></expr></argument>, <argument><expr><name><name>cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070903</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ssl_key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_SSLKEY</name></expr></argument>, <argument><expr><name>ssl_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070908</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ssl_capath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_CAPATH</name></expr></argument>, <argument><expr><name>ssl_capath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x072c00</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ssl_pinnedkey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PINNEDPUBLICKEY</name></expr></argument>, <argument><expr><name>ssl_pinnedkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>http_ssl_backend</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"schannel"</literal></expr></argument>, <argument><expr><name>http_ssl_backend</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name>http_schannel_use_ssl_cainfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_CAINFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x073400</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_CAINFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ssl_cainfo</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>http_proxy_ssl_ca_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ssl_cainfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_CAINFO</name></expr></argument>, <argument><expr><name>ssl_cainfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x073400</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>http_proxy_ssl_ca_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_CAINFO</name></expr></argument>, <argument><expr><name>http_proxy_ssl_ca_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curl_low_speed_limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curl_low_speed_time</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_LIMIT</name></expr></argument>,
<argument><expr><name>curl_low_speed_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_TIME</name></expr></argument>,
<argument><expr><name>curl_low_speed_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_MAXREDIRS</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071301</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_POSTREDIR</name></expr></argument>, <argument><expr><name>CURL_REDIR_POST_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071101</literal></expr></cpp:elif>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_POST301</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLPROTO_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_REDIR_PROTOCOLS</name></expr></argument>,
<argument><expr><call><name>get_curl_allowed_protocols</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROTOCOLS</name></expr></argument>,
<argument><expr><call><name>get_curl_allowed_protocols</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Protocol restrictions not supported with cURL &lt; 7.19.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_CURL_VERBOSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setup_curl_trace</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_TRACE_CURL_NO_DATA"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trace_curl_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_REDACT_COOKIES"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cookies_to_redact</name></expr></argument>,
<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_REDACT_COOKIES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cookies_to_redact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_USERAGENT</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>user_agent</name></expr> ?</condition><then> <expr><name>user_agent</name></expr> </then><else>: <expr><call><name>git_user_agent</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curl_ftp_no_epsv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_USE_EPSV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLOPT_USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>curl_ssl_try</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_USE_SSL</name></expr></argument>, <argument><expr><name>CURLUSESSL_TRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curl_http_proxy</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>http_auth</name><operator>.</operator><name>protocol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>http_auth</name><operator>.</operator><name>protocol</name></name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_http_proxy</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HTTPS_PROXY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_http_proxy</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"https_proxy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_http_proxy</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"http_proxy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curl_http_proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_http_proxy</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"ALL_PROXY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_http_proxy</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"all_proxy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curl_http_proxy</name> <operator>&amp;&amp;</operator> <name><name>curl_http_proxy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curl_http_proxy</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071800</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>curl_http_proxy</name></expr></argument>, <argument><expr><literal type="string">"socks5h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><name>CURLOPT_PROXYTYPE</name></expr></argument>, <argument><expr><name>CURLPROXY_SOCKS5_HOSTNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>curl_http_proxy</name></expr></argument>, <argument><expr><literal type="string">"socks5"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><name>CURLOPT_PROXYTYPE</name></expr></argument>, <argument><expr><name>CURLPROXY_SOCKS5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>curl_http_proxy</name></expr></argument>, <argument><expr><literal type="string">"socks4a"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><name>CURLOPT_PROXYTYPE</name></expr></argument>, <argument><expr><name>CURLPROXY_SOCKS4A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>curl_http_proxy</name></expr></argument>, <argument><expr><literal type="string">"socks"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>,
<argument><expr><name>CURLOPT_PROXYTYPE</name></expr></argument>, <argument><expr><name>CURLPROXY_SOCKS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x073400</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>curl_http_proxy</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYTYPE</name></expr></argument>, <argument><expr><name>CURLPROXY_HTTPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>http_proxy_ssl_cert</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSLCERT</name></expr></argument>, <argument><expr><name>http_proxy_ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>http_proxy_ssl_key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSLKEY</name></expr></argument>, <argument><expr><name>http_proxy_ssl_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_proxy_cert_password</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_KEYPASSWD</name></expr></argument>, <argument><expr><name><name>proxy_cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>curl_http_proxy</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>credential_from_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proxy_auth</name></expr></argument>, <argument><expr><name>curl_http_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>url</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="string">"http://%s"</literal></expr></argument>, <argument><expr><name>curl_http_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>credential_from_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proxy_auth</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy_auth</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Invalid proxy URL '%s'"</literal></expr></argument>, <argument><expr><name>curl_http_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY</name></expr></argument>, <argument><expr><name><name>proxy_auth</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071304</literal></expr></cpp:if>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_no_proxy</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"NO_PROXY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curl_no_proxy</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"no_proxy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>CURLOPT_NOPROXY</name></expr></argument>, <argument><expr><name>curl_no_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_curl_proxy_auth</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_curl_keepalive</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_from_env</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>envname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proactive_auth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>low_speed_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>low_speed_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>normalized_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>urlmatch_config</name></name></type> <name>config</name> <init>= <expr><block>{ <expr><name>STRING_LIST_INIT_DUP</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>config</name><operator>.</operator><name>section</name></name> <operator>=</operator> <literal type="string">"http"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>collect_fn</name></name> <operator>=</operator> <name>http_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>cascade_fn</name></name> <operator>=</operator> <name>git_default_config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>http_is_verbose</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>normalized_url</name> <operator>=</operator> <call><name>url_normalize</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>urlmatch_config_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>normalized_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x073800</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>http_ssl_backend</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>curl_ssl_backend</name> <modifier>*</modifier><modifier>*</modifier></type><name>backends</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>curl_global_sslset</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>http_ssl_backend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backends</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLSSLSET_UNKNOWN_BACKEND</name></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unsupported SSL backend '%s'. "</literal>
<literal type="string">"Supported SSL backends:"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>http_ssl_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>backends</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n\t%s"</literal></expr></argument>, <argument><expr><name><name>backends</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>CURLSSLSET_NO_BACKENDS</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not set SSL backend to '%s': "</literal>
<literal type="string">"cURL was built without SSL backends"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>http_ssl_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>CURLSSLSET_TOO_LATE</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not set SSL backend to '%s': already set"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>http_ssl_backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>CURLSSLSET_OK</name></expr>:</case>
<break>break;</break> 
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"curl_global_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>http_proactive_auth</name> <operator>=</operator> <name>proactive_auth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remote</name> <operator>&amp;&amp;</operator> <name><name>remote</name><operator>-&gt;</operator><name>http_proxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_http_proxy</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>remote</name><operator>-&gt;</operator><name>http_proxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_override</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_authmethod</name></expr></argument>, <argument><expr><name><name>remote</name><operator>-&gt;</operator><name>http_proxy_authmethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pragma_header</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><call><name>http_copy_default_headers</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Pragma: no-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_pragma_header</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><call><name>http_copy_default_headers</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"Pragma:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>http_max_requests</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_HTTP_MAX_REQUESTS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>http_max_requests</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_requests</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>http_max_requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>curlm</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curlm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"curl_multi_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_SSL_NO_VERIFY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_ssl_verify</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_cert</name></expr></argument>, <argument><expr><literal type="string">"GIT_SSL_CERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070903</literal></expr></cpp:if>
<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_key</name></expr></argument>, <argument><expr><literal type="string">"GIT_SSL_KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070908</literal></expr></cpp:if>
<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_capath</name></expr></argument>, <argument><expr><literal type="string">"GIT_SSL_CAPATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssl_cainfo</name></expr></argument>, <argument><expr><literal type="string">"GIT_SSL_CAINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_agent</name></expr></argument>, <argument><expr><literal type="string">"GIT_HTTP_USER_AGENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low_speed_limit</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_HTTP_LOW_SPEED_LIMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>low_speed_limit</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_low_speed_limit</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>low_speed_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>low_speed_time</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_HTTP_LOW_SPEED_TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>low_speed_time</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_low_speed_time</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>low_speed_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curl_ssl_verify</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_ssl_verify</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curl_session_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>max_requests</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_requests</name> <operator>=</operator> <name>DEFAULT_MAX_REQUESTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_ssl_cert</name></expr></argument>, <argument><expr><literal type="string">"GIT_PROXY_SSL_CERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_ssl_key</name></expr></argument>, <argument><expr><literal type="string">"GIT_PROXY_SSL_KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_from_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy_ssl_ca_info</name></expr></argument>, <argument><expr><literal type="string">"GIT_PROXY_SSL_CAINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proxy_ssl_cert_password_required</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_CURL_FTP_NO_EPSV"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curl_ftp_no_epsv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>url</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>credential_from_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_auth</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ssl_cert_password_required</name> <operator>&amp;&amp;</operator>
<call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_SSL_CERT_PASSWORD_PROTECTED"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"https://"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ssl_cert_password_required</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CURL_EASY_DUPHANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>curl_default</name> <operator>=</operator> <call><name>get_curl_handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>active_queue_head</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmulti_remove_handle</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>active_queue_head</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CURL_EASY_DUPHANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra_http_headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>pragma_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pragma_header</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>no_pragma_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_pragma_header</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curl_http_proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>curl_http_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curl_http_proxy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>curl_proxyuserpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curl_proxyuserpwd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>http_proxy_authmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>http_proxy_authmethod</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cert_auth</name><operator>.</operator><name>password</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ssl_cert_password_required</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proxy_cert_auth</name><operator>.</operator><name>password</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>proxy_cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>proxy_cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>proxy_cert_auth</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>proxy_ssl_cert_password_required</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>cached_accept_language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>get_active_slot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>active_queue_head</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>newslot</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>num_transfers</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>active_requests</name> <operator>&gt;=</operator> <name>max_requests</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_transfers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_transfers</name> <operator>&lt;</operator> <name>active_requests</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>process_curl_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>slot</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newslot</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newslot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newslot</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newslot</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newslot</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>active_queue_head</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>active_queue_head</name> <operator>=</operator> <name>newslot</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newslot</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>newslot</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_CURL_EASY_DUPHANDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <call><name>get_curl_handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <call><name>curl_easy_duphandle</name><argument_list>(<argument><expr><name>curl_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>curl_session_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>active_requests</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>callback_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>callback_func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_COOKIEFILE</name></expr></argument>, <argument><expr><name>curl_cookie_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curl_save_cookies</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_COOKIEJAR</name></expr></argument>, <argument><expr><name>curl_cookie_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>pragma_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_ERRORBUFFER</name></expr></argument>, <argument><expr><name>curl_errorstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_CUSTOMREQUEST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_READFUNCTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_UPLOAD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPGET</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FAILONERROR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_RANGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>http_follow_config</name> <operator>==</operator> <name>HTTP_FOLLOW_ALWAYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FOLLOWLOCATION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FOLLOWLOCATION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070a08</literal></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_IPRESOLVE</name></expr></argument>, <argument><expr><name>git_curl_ipresolve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBCURL_CAN_HANDLE_AUTH_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPAUTH</name></expr></argument>, <argument><expr><name>http_auth_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>http_auth</name><operator>.</operator><name>password</name></name> <operator>||</operator> <call><name>curl_empty_auth_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_curl_http_auth</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CURLMcode</name></type> <name>curlm_result</name> <init>= <expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_transfers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curlm_result</name> <operator>!=</operator> <name>CURLM_OK</name> <operator>&amp;&amp;</operator>
<name>curlm_result</name> <operator>!=</operator> <name>CURLM_CALL_MULTI_PERFORM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"curl_multi_add_handle failed: %s"</literal></expr></argument>,
<argument><expr><call><name>curl_multi_strerror</name><argument_list>(<argument><expr><name>curlm_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>active_requests</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_transfers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>fill_chain</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fill</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>fill_chain</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fill_chain</name></name> <modifier>*</modifier></type><name>fill_cfg</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add_fill_function</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fill</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fill_chain</name></name> <modifier>*</modifier></type><name>new_fill</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new_fill</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fill_chain</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>linkp</name> <init>= <expr><operator>&amp;</operator><name>fill_cfg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_fill</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fill</name><operator>-&gt;</operator><name>fill</name></name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fill</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>linkp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linkp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>linkp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>linkp</name> <operator>=</operator> <name>new_fill</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fill_active_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>active_queue_head</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>active_requests</name> <operator>&lt;</operator> <name>max_requests</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fill_chain</name></name> <modifier>*</modifier></type><name>fill</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>fill</name> <operator>=</operator> <name>fill_cfg</name></expr>;</init> <condition><expr><name>fill</name></expr>;</condition> <incr><expr><name>fill</name> <operator>=</operator> <name><name>fill</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>fill</name><operator>-&gt;</operator><name>fill</name></name><argument_list>(<argument><expr><name><name>fill</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fill</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>curl_session_count</name> <operator>&gt;</operator> <name>min_curl_sessions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curl_session_count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>step_active_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_transfers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMcode</name></type> <name>curlm_result</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>curlm_result</name> <operator>=</operator> <call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_transfers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>curlm_result</name> <operator>==</operator> <name>CURLM_CALL_MULTI_PERFORM</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>num_transfers</name> <operator>&lt;</operator> <name>active_requests</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>process_curl_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_active_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>run_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>fd_set</name></type> <name>readfds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>writefds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>excfds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>select_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <operator>&amp;</operator><name>finished</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>finished</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>step_active_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070f04</literal></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>curl_timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_multi_timeout</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curl_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curl_timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curl_timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">50000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>curl_timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>curl_timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">50000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>max_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_fdset</name><argument_list>(<argument><expr><name>curlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writefds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>excfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>max_fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>select_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>select_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">50000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>select_timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">50000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><name>max_fd</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writefds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>excfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>select_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>release_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>closedown_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmulti_remove_handle</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curl_session_count</name> <operator>&gt;</operator> <name>min_curl_sessions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curl_session_count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fill_active_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>finish_all_active_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>active_queue_head</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>run_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>active_queue_head</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>needs_quote</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>quote_ref_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>end_url_with_slash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>ref</name></expr>;</init> <condition><expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>needs_quote</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%%%02x"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>append_remote_object_url</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>only_two_digit_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>end_url_with_slash</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"objects/%.*s/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>only_two_digit_prefix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hex</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_remote_object_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>only_two_digit_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>append_remote_object_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>, <argument><expr><name>only_two_digit_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>normalize_curl_result</name><parameter_list>(<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>http_code</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errorstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errorlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <name>CURLE_OK</name> <operator>&amp;&amp;</operator> <name>http_code</name> <operator>&gt;=</operator> <literal type="number">300</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>CURLE_HTTP_RETURNED_ERROR</name></expr>;</expr_stmt>






<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>errorstr</name></expr></argument>, <argument><expr><name>errorlen</name></expr></argument>,
<argument><expr><literal type="string">"The requested URL returned error: %ld"</literal></expr></argument>,
<argument><expr><name>http_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_curl_result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slot_results</name></name> <modifier>*</modifier></type><name>results</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>normalize_curl_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>results</name><operator>-&gt;</operator><name>curl_result</name></name></expr></argument>, <argument><expr><name><name>results</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>,
<argument><expr><name>curl_errorstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curl_errorstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>credential_approve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proxy_auth</name><operator>.</operator><name>password</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>credential_approve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proxy_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>HTTP_OK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>missing_target</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HTTP_MISSING_TARGET</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">401</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>http_auth</name><operator>.</operator><name>username</name></name> <operator>&amp;&amp;</operator> <name><name>http_auth</name><operator>.</operator><name>password</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>credential_reject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOAUTH</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBCURL_CAN_HANDLE_AUTH_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>http_auth_methods</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_GSSNEGOTIATE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>auth_avail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>http_auth_methods</name> <operator>&amp;=</operator> <name><name>results</name><operator>-&gt;</operator><name>auth_avail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>http_auth_methods_restricted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>HTTP_REAUTH</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>http_connectcode</name></name> <operator>==</operator> <literal type="number">407</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>credential_reject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proxy_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070c00</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curl_errorstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>curl_errorstr</name></expr></argument>,
<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>curl_result</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curl_errorstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>HTTP_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_one_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>slot_results</name></name> <modifier>*</modifier></type><name>results</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <name>results</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>curl_errorstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curl_errorstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"failed to start HTTP request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_START_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>run_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>handle_curl_result</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>http_copy_default_headers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;extra_http_headers</argument>)</argument_list></macro>
<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>headers</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>curlinfo_strbuf</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>CURLINFO</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>extract_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>raw</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>raw</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>raw</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>raw</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>raw</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>raw</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>raw</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>*</operator><name>raw</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_content_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>raw</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>raw</name><operator>-&gt;</operator><name>buf</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>charset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_param</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>charset</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"text/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr><literal type="string">"ISO-8859-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_accept_language</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_DECIMAL_PLACES</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_LANGUAGE_TAGS</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_ACCEPT_LANGUAGE_HEADER_SIZE</name> <init>= <expr><literal type="number">4000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>language_tags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_langs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>get_preferred_languages</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tag</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<do>do <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><operator>*</operator><name>s</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_langs</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name>language_tags</name></expr></argument>, <argument><expr><name>num_langs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language_tags</name><index>[<expr><name>num_langs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_langs</name> <operator>&gt;=</operator> <name>MAX_LANGUAGE_TAGS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>num_langs</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decimal_places</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>q_format</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name>language_tags</name></expr></argument>, <argument><expr><name>num_langs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language_tags</name><index>[<expr><name>num_langs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt> 


<for>for <control>(<init><expr><name>max_q</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>decimal_places</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>max_q</name> <operator>&lt;</operator> <name>num_langs</name> <operator>&amp;&amp;</operator> <name>decimal_places</name> <operator>&lt;=</operator> <name>MAX_DECIMAL_PLACES</name></expr>;</condition>
<incr><expr><name>decimal_places</name><operator>++</operator></expr><operator>,</operator> <expr><name>max_q</name> <operator>*=</operator> <literal type="number">10</literal></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>q_format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>q_format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">";q=0.%%0%dd"</literal></expr></argument>, <argument><expr><name>decimal_places</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Accept-Language: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_langs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>language_tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>q_format</name></expr></argument>, <argument><expr><name>max_q</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>MAX_ACCEPT_LANGUAGE_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>last_buf_len</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>last_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_buf_len</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_langs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>language_tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>language_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_accept_language</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cached_accept_language</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_accept_language</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cached_accept_language</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>cached_accept_language</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_opt_request_remainder</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RANGE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_REQUEST_STRBUF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_REQUEST_FILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>http_get_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slot_results</name></name></type> <name>results</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><call><name>http_copy_default_headers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accept_language</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>get_active_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPGET</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_NOBODY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_NOBODY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FILE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>HTTP_REQUEST_FILE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>posn</name> <init>= <expr><call><name>ftello</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>,
<argument><expr><name>fwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>posn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>http_opt_request_remainder</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>,
<argument><expr><name>fwrite_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>accept_language</name> <operator>=</operator> <call><name>get_accept_language</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>accept_language</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>accept_language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Pragma:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>no_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" no-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>initial_request</name></name> <operator>&amp;&amp;</operator>
<name>http_follow_config</name> <operator>==</operator> <name>HTTP_FOLLOW_INITIAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FOLLOWLOCATION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>extra_headers</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>options-&gt;extra_headers</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_ENCODING</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FAILONERROR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_one_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>content_type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>raw</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curlinfo_strbuf</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLINFO_CONTENT_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_content_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>,
<argument><expr><name><name>options</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>effective_url</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curlinfo_strbuf</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLINFO_EFFECTIVE_URL</name></expr></argument>,
<argument><expr><name><name>options</name><operator>-&gt;</operator><name>effective_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>int</name></type> <name>update_url_from_redirect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>asked</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>got</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>asked</name></expr></argument>, <argument><expr><name><name>got</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>asked</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"update_url_from_redirect: %s is not a superset of %s"</literal></expr></argument>,
<argument><expr><name>asked</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name><name>got</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strip_suffix_mem</name><argument_list>(<argument><expr><name><name>got</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_len</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to update url base from redirection:\n"</literal>
<literal type="string">" asked for: %s\n"</literal>
<literal type="string">" redirect: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>asked</name></expr></argument>, <argument><expr><name><name>got</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>got</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_request_reauth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>http_get_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>http_request</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>HTTP_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>HTTP_REAUTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>effective_url</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>base_url</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>update_url_from_redirect</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>base_url</name></name></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>effective_url</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>credential_from_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_auth</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>base_url</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>effective_url</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>HTTP_REAUTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>





<switch>switch <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTP_REQUEST_STRBUF</name></expr>:</case>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HTTP_REQUEST_FILE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"unable to flush a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_START_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"unable to truncate a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_START_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Unknown http_request target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>credential_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>http_request</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_get_strbuf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>http_get_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>http_request_reauth</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_STRBUF</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>http_get_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>http_get_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tmpfile</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpfile</name></expr></argument>, <argument><expr><literal type="string">"%s.temp"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to open local file %s"</literal></expr></argument>, <argument><expr><name><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>HTTP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_request_reauth</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_FILE</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>HTTP_OK</name> <operator>&amp;&amp;</operator> <call><name>finalize_object_file</name><argument_list>(<argument><expr><name><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>HTTP_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_fetch_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>http_get_options</name></name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buffer</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>no_cache</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>quote_ref_url</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>http_get_strbuf</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_rtrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"ref: "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>symref</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fetch_pack_index</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>http_is_verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Getting index for pack %s\n"</literal></expr></argument>, <argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>end_url_with_slash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>base_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"objects/pack/pack-%s.idx"</literal></expr></argument>, <argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s.temp"</literal></expr></argument>, <argument><expr><call><name>sha1_pack_index_name</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>http_get_file</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to get pack index %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_and_setup_pack_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>packs_head</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>new_pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_pack_index</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_pack</name> <operator>=</operator> <call><name>parse_pack_index</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><call><name>sha1_pack_index_name</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_pack</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<goto>goto <name>add_pack</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_idx</name> <operator>=</operator> <call><name>fetch_pack_index</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>base_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_idx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_pack</name> <operator>=</operator> <call><name>parse_pack_index</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_pack</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>verify_pack_index</name><argument_list>(<argument><expr><name>new_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_pack_index</name><argument_list>(<argument><expr><name>new_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finalize_object_file</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>, <argument><expr><call><name>sha1_pack_index_name</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<label><name>add_pack</name>:</label>
<expr_stmt><expr><name><name>new_pack</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>packs_head</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>packs_head</name> <operator>=</operator> <name>new_pack</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_get_info_packs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>packs_head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>http_get_options</name></name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>end_url_with_slash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>base_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"objects/info/packs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>no_cache</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_get_strbuf</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>HTTP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"P pack-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">".pack"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fetch_and_setup_pack_index</name><argument_list>(<argument><expr><name>packs_head</name></expr></argument>, <argument><expr><name><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>base_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></while>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>release_http_pack_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>preq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>preq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>finish_http_pack_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>preq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>preq</name><operator>-&gt;</operator><name>target</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>ip</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>close_pack_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lst</name> <operator>=</operator> <name><name>preq</name><operator>-&gt;</operator><name>lst</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>lst</name> <operator>!=</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lst</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>lst</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strip_suffix</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">".pack.temp"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"pack tmpfile does not end in .pack.temp?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp_idx</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%.*s.idx.temp"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"index-pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>, <argument><expr><name>tmp_idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>.</operator><name>no_stdout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>sha1_pack_index_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finalize_object_file</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>sha1_pack_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>finalize_object_file</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>, <argument><expr><call><name>sha1_pack_index_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>install_packed_git</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>new_http_pack_request</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>prev_posn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>preq</name></decl>;</decl_stmt>

<expr_stmt><expr><name>preq</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>preq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>end_url_with_slash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>base_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"objects/pack/pack-%s.pack"</literal></expr></argument>,
<argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s.temp"</literal></expr></argument>, <argument><expr><call><name>sha1_pack_name</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to open local file %s for pack"</literal></expr></argument>,
<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>abort</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <call><name>get_active_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FILE</name></expr></argument>, <argument><expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>fwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>preq</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>,
<argument><expr><name>no_pragma_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>prev_posn</name> <operator>=</operator> <call><name>ftello</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>packfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_posn</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>http_is_verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Resuming fetch of pack %s at byte %"</literal><name>PRIuMAX</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>prev_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>http_opt_request_remainder</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>prev_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>preq</name></expr>;</return>

<label><name>abort</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>preq</name><operator>-&gt;</operator><name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>preq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>fwrite_sha1_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>eltsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>expn</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>eltsize</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>posn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>c</name> <init>= <expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLINFO_HTTP_CODE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"curl_easy_getinfo for HTTP code failed: %s"</literal></expr></argument>,
<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>http_code</name></name> <operator>&gt;=</operator> <literal type="number">300</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nmemb</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>retval</name> <init>= <expr><call><name>xwrite</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name> <operator>+</operator> <name>posn</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>posn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>posn</name> <operator>/</operator> <name>eltsize</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>posn</name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>posn</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>expn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expn</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>zret</name></name> <operator>=</operator> <call><name>git_inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>expn</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expn</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>freq</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>&amp;&amp;</operator> <name><name>freq</name><operator>-&gt;</operator><name>zret</name></name> <operator>==</operator> <name>Z_OK</name></expr>)</condition>;</do>
<return>return <expr><name>nmemb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>new_http_object_request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>filename</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>prevfile</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevlocal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>prev_buf</name><index>[<expr><name>PREV_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>prev_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>prev_posn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl>;</decl_stmt>

<expr_stmt><expr><name>freq</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>freq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loose_object_path</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s.temp"</literal></expr></argument>, <argument><expr><name><name>filename</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevfile</name></expr></argument>, <argument><expr><literal type="string">"%s.prev"</literal></expr></argument>, <argument><expr><name><name>filename</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>prevfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rename</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>prevfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"fd leakage in start: %d"</literal></expr></argument>, <argument><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkdir</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"Couldn't create temporary file %s"</literal></expr></argument>,
<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>abort</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_inflate_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>get_remote_object_url</name><argument_list>(<argument><expr><name>base_url</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>prevlocal</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>prevfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prevlocal</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>prev_read</name> <operator>=</operator> <call><name>xread</name><argument_list>(<argument><expr><name>prevlocal</name></expr></argument>, <argument><expr><name>prev_buf</name></expr></argument>, <argument><expr><name>PREV_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_read</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fwrite_sha1_file</name><argument_list>(<argument><expr><name>prev_buf</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>prev_read</name></expr></argument>,
<argument><expr><name>freq</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>prev_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_posn</name> <operator>+=</operator> <name>prev_read</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev_read</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>prev_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>prevlocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>prevfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>prev_read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_inflate_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_posn</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_posn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"Couldn't truncate temporary file %s"</literal></expr></argument>,
<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>abort</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <call><name>get_active_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FILE</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FAILONERROR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>fwrite_sha1_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_ERRORBUFFER</name></expr></argument>, <argument><expr><name><name>freq</name><operator>-&gt;</operator><name>errorstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>freq</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>no_pragma_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>prev_posn</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>http_is_verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Resuming fetch of object %s at byte %"</literal><name>PRIuMAX</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>hex</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>prev_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>http_opt_request_remainder</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>prev_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>freq</name></expr>;</return>

<label><name>abort</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>=</operator> <name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>curl_result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>http_code</name></name> <operator>=</operator> <name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>http_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>finish_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>filename</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_http_object_request</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">416</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"requested range invalid; we may already have all the data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>real_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>zret</name></name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>real_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>loose_object_path</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>rename</name></name> <operator>=</operator> <call><name>finalize_object_file</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>filename</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>freq</name><operator>-&gt;</operator><name>rename</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>abort_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_http_object_request</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>release_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>localfile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>callback_func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>callback_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>release_active_slot</name><argument_list>(<argument><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freq</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>freq</name><operator>-&gt;</operator><name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
