<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\branch.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"branch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sequencer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"worktree.h"</cpp:file></cpp:include>

<struct>struct <name>tracking</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>refspec_item</name></name></type> <name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_tracked_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tracking</name></name> <modifier>*</modifier></type><name>tracking</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remote_find_tracking</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tracking</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>tracking</name><operator>-&gt;</operator><name>matches</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tracking</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name><name>tracking</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>src</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tracking</name><operator>-&gt;</operator><name>remote</name></name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tracking</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>tracking</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tracking</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>should_setup_rebase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>autorebase</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AUTOREBASE_NEVER</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AUTOREBASE_LOCAL</name></expr>:</case>
<return>return <expr><name>origin</name> <operator>==</operator> <name>NULL</name></expr>;</return>
<case>case <expr><name>AUTOREBASE_REMOTE</name></expr>:</case>
<return>return <expr><name>origin</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
<case>case <expr><name>AUTOREBASE_ALWAYS</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>tracking_advice</name><index>[]</index></name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>
<literal type="string">"After fixing the error cause you may try to fix up\n"</literal>
<literal type="string">"the remote tracking information by invoking\n"</literal>
<literal type="string">"\"git branch --set-upstream-to=%s%s%s\"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>install_branch_config</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>key</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rebasing</name> <init>= <expr><call><name>should_setup_rebase</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>shortname</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><name>shortname</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><name>origin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not setting branch %s as its own upstream."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="string">"branch.%s.remote"</literal></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_config_set_gently</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>origin</name></expr> ?</condition><then> <expr><name>origin</name></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="string">"branch.%s.merge"</literal></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_config_set_gently</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rebasing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="string">"branch.%s.rebase"</literal></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_config_set_gently</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>BRANCH_CONFIG_VERBOSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shortname</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>origin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><ternary><condition><expr><name>rebasing</name></expr> ?</condition><then>
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track remote branch '%s' from '%s' by rebasing."</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track remote branch '%s' from '%s'."</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><name>local</name></expr></argument>, <argument><expr><name>shortname</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><ternary><condition><expr><name>rebasing</name></expr> ?</condition><then>
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track local branch '%s' by rebasing."</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track local branch '%s'."</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><name>local</name></expr></argument>, <argument><expr><name>shortname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>origin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><ternary><condition><expr><name>rebasing</name></expr> ?</condition><then>
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track remote ref '%s' by rebasing."</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track remote ref '%s'."</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><name>local</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><ternary><condition><expr><name>rebasing</name></expr> ?</condition><then>
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track local ref '%s' by rebasing."</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Branch '%s' set up to track local ref '%s'."</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><name>local</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>out_err</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to write upstream branch configuration"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>tracking_advice</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>origin</name></expr> ?</condition><then> <expr><name>origin</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>origin</name></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>shortname</name></expr> ?</condition><then> <expr><name>shortname</name></expr> </then><else>: <expr><name>remote</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_tracking</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_ref</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>branch_track</name></name></type> <name>track</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quiet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tracking</name></name></type> <name>tracking</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>config_flags</name> <init>= <expr><ternary><condition><expr><name>quiet</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>BRANCH_CONFIG_VERBOSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tracking</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tracking</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tracking</name><operator>.</operator><name>spec</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>orig_ref</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>for_each_remote</name><argument_list>(<argument><expr><name>find_tracked_branch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tracking</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tracking</name><operator>.</operator><name>matches</name></name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>track</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BRANCH_TRACK_ALWAYS</name></expr>:</case>
<case>case <expr><name>BRANCH_TRACK_EXPLICIT</name></expr>:</case>
<case>case <expr><name>BRANCH_TRACK_OVERRIDE</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tracking</name><operator>.</operator><name>matches</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not tracking: ambiguous information for ref %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>orig_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>install_branch_config</name><argument_list>(<argument><expr><name>config_flags</name></expr></argument>, <argument><expr><name>new_ref</name></expr></argument>, <argument><expr><name><name>tracking</name><operator>.</operator><name>remote</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>tracking</name><operator>.</operator><name>src</name></name></expr> ?</condition><then> <expr><name><name>tracking</name><operator>.</operator><name>src</name></name></expr> </then><else>: <expr><name>orig_ref</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tracking</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_branch_desc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>branch_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"branch.%s.description"</literal></expr></argument>, <argument><expr><name>branch_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>validate_branchname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strbuf_check_branch_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' is not a valid branch name."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ref_exists</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>validate_new_branchname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validate_branchname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"A branch named '%s' already exists."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_bare_repository</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>head</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot force update the current branch."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_tracking_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tracking_branch</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>refspec_item</name></name></type> <name>query</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>refspec_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>query</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>tracking_branch</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>remote_find_tracking</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_remote_tracking_branch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>for_each_remote</name><argument_list>(<argument><expr><name>check_tracking_branch</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>upstream_not_branch</name><index>[]</index></name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Cannot setup tracking information; starting point '%s' is not a branch."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>upstream_missing</name><index>[]</index></name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"the requested upstream branch '%s' does not exist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>upstream_advice</name><index>[]</index></name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>
<literal type="string">"If you are planning on basing your work on an upstream\n"</literal>
<literal type="string">"branch that already exists at the remote, you may need to\n"</literal>
<literal type="string">"run \"git fetch\" to retrieve it.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"If you are planning to push out a new local branch that\n"</literal>
<literal type="string">"will track its remote counterpart, you may want to use\n"</literal>
<literal type="string">"\"git push -u\" to set the upstream config as you push."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>create_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clobber_head_ok</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reflog</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>quiet</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>branch_track</name></name></type> <name>track</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>real_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>ref</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>forcing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dont_change_ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>explicit_tracking</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>track</name> <operator>==</operator> <name>BRANCH_TRACK_EXPLICIT</name> <operator>||</operator> <name>track</name> <operator>==</operator> <name>BRANCH_TRACK_OVERRIDE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>explicit_tracking</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>track</name> <operator>==</operator> <name>BRANCH_TRACK_OVERRIDE</name> <operator>||</operator> <name>clobber_head_ok</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>validate_branchname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>validate_new_branchname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dont_change_ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>forcing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>real_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_mb</name><argument_list>(<argument><expr><name>start_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>explicit_tracking</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>advice_set_upstream_failure</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>upstream_missing</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>upstream_advice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>upstream_missing</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not a valid object name: '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>dwim_ref</name><argument_list>(<argument><expr><name>start_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>real_ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>explicit_tracking</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>upstream_not_branch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>real_ref</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>validate_remote_tracking_branch</name><argument_list>(<argument><expr><name>real_ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>explicit_tracking</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>upstream_not_branch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>real_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Ambiguous object name: '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>commit</name> <operator>=</operator> <call><name>lookup_commit_reference</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not a valid branch point: '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reflog</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>log_all_ref_updates</name> <operator>=</operator> <name>LOG_REFS_NORMAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dont_change_ref</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_transaction</name></name> <modifier>*</modifier></type><name>transaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>forcing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"branch: Reset to %s"</literal></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"branch: Created from %s"</literal></expr></argument>, <argument><expr><name>start_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name>ref_transaction_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transaction</name> <operator>||</operator>
<call><name>ref_transaction_update</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name><name>ref</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><ternary><condition><expr><name>forcing</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_oid</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ref_transaction_commit</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ref_transaction_free</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>real_ref</name> <operator>&amp;&amp;</operator> <name>track</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setup_tracking</name><argument_list>(<argument><expr><name><name>ref</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>real_ref</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>real_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_merge_branch_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>git_path_merge_head</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>git_path_merge_rr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>git_path_merge_msg</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>git_path_merge_mode</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_branch_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sequencer_post_commit_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>git_path_squash_msg</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove_merge_branch_state</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>die_if_checked_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_current_worktree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wt</name> <operator>=</operator> <call><name>find_shared_symref</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wt</name> <operator>||</operator> <operator>(</operator><name>ignore_current_worktree</name> <operator>&amp;&amp;</operator> <name><name>wt</name><operator>-&gt;</operator><name>is_current</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' is already checked out at '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>branch</name></expr></argument>, <argument><expr><name><name>wt</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>replace_each_worktree_head_symref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newref</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>worktrees</name> <init>= <expr><call><name>get_worktrees</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>worktrees</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>worktrees</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>is_detached</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>worktrees</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>head_ref</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>oldref</name></expr></argument>, <argument><expr><name><name>worktrees</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>head_ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>get_worktree_ref_store</name><argument_list>(<argument><expr><name><name>worktrees</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>refs_create_symref</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>newref</name></expr></argument>, <argument><expr><name>logmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"HEAD of working tree %s is not updated"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>worktrees</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free_worktrees</name><argument_list>(<argument><expr><name>worktrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
