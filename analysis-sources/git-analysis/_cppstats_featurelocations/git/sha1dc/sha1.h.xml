<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\sha1dc\sha1.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA1DC_SHA1_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA1DC_SHA1_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA1DC_NO_STANDARD_INCLUDES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><name>void</name></type> <name>sha1_compression_states</name><parameter_list>(<parameter><decl><type><name><name>uint32_t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>uint32_t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name><name>uint32_t</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name><name>uint32_t</name><index>[<expr><literal type="number">80</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>










<typedef>typedef <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>sha1_recompression_type</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<typedef>typedef <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>collision_block_callback</name>)<parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ihv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_collision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>safe_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>detect_coll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ubc_check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reduced_round_coll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>collision_block_callback</name></type> <name>callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ihv1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ihv2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>m1</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>m2</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>states</name><index>[<expr><literal type="number">80</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SHA1_CTX</name>;</typedef>


<function_decl><type><name>void</name></type> <name>SHA1DCInit</name><parameter_list>(<parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>SHA1DCSetSafeHash</name><parameter_list>(<parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>SHA1DCSetUseUBC</name><parameter_list>(<parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>SHA1DCSetUseDetectColl</name><parameter_list>(<parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>SHA1DCSetDetectReducedRoundCollision</name><parameter_list>(<parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>SHA1DCSetCallback</name><parameter_list>(<parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>collision_block_callback</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>SHA1DCUpdate</name><parameter_list>(<parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>SHA1DCFinal</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name><name>char</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA1_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA1DC_CUSTOM_TRAILING_INCLUDE_SHA1_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> SHA1DC_CUSTOM_TRAILING_INCLUDE_SHA1_H</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
