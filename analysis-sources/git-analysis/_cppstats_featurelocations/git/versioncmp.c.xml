<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\versioncmp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_N</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_I</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_F</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_Z</name></cpp:macro> <cpp:value>0x9</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>prereleases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>

<struct>struct <name>suffix_match</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>conf_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_better_matching_suffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tagname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>suffix_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conf_pos</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>suffix_match</name></name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><name><name>match</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>suffix_len</name></expr> ?</condition><then> <expr><name><name>match</name><operator>-&gt;</operator><name>start</name></name></expr> </then><else>: <expr><name><name>match</name><operator>-&gt;</operator><name>start</name></name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>tagname</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>conf_pos</name></name> <operator>=</operator> <name>conf_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>suffix_len</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>int</name></type> <name>swap_prereleases</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>suffix_match</name></name></type> <name>match1</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>off</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>suffix_match</name></name></type> <name>match2</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>off</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prereleases</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><name><name>prereleases</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>suffix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>suffix_len</name> <operator>&lt;</operator> <name>off</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name>suffix_len</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>find_better_matching_suffix</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>suffix_len</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_better_matching_suffix</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>suffix_len</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>match1</name><operator>.</operator><name>conf_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>match2</name><operator>.</operator><name>conf_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>match1</name><operator>.</operator><name>conf_pos</name></name> <operator>==</operator> <name><name>match2</name><operator>.</operator><name>conf_pos</name></name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match1</name><operator>.</operator><name>conf_pos</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>match2</name><operator>.</operator><name>conf_pos</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>diff</name> <operator>=</operator> <name><name>match1</name><operator>.</operator><name>conf_pos</name></name> <operator>-</operator> <name><name>match2</name><operator>.</operator><name>conf_pos</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>match1</name><operator>.</operator><name>conf_pos</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>diff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>diff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>versioncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>next_state</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>S_N</name></expr>, <expr><name>S_I</name></expr>, <expr><name>S_Z</name></expr>,
<expr><name>S_N</name></expr>, <expr><name>S_I</name></expr>, <expr><name>S_I</name></expr>,
<expr><name>S_N</name></expr>, <expr><name>S_F</name></expr>, <expr><name>S_F</name></expr>,
<expr><name>S_N</name></expr>, <expr><name>S_F</name></expr>, <expr><name>S_Z</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>result_type</name><index>[]</index></name> <init>= <expr><block>{


<expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>LEN</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>,
<expr><name>CMP</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>LEN</name></expr>, <expr><name>LEN</name></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>LEN</name></expr>, <expr><name>LEN</name></expr>,
<expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>,
<expr><name>CMP</name></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>CMP</name></expr>, <expr><name>CMP</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>p2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>p1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>p2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>S_N</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c1</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>isdigit</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>diff</name> <operator>=</operator> <name>c1</name> <operator>-</operator> <name>c2</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>diff</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>next_state</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>p1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>p2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>+=</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>isdigit</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>deprecated_prereleases</name></decl>;</decl_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prereleases</name> <operator>=</operator> <call><name>git_config_get_value_multi</name><argument_list>(<argument><expr><literal type="string">"versionsort.suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deprecated_prereleases</name> <operator>=</operator> <call><name>git_config_get_value_multi</name><argument_list>(<argument><expr><literal type="string">"versionsort.prereleasesuffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prereleases</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deprecated_prereleases</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"ignoring versionsort.prereleasesuffix because versionsort.suffix is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prereleases</name> <operator>=</operator> <name>deprecated_prereleases</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prereleases</name> <operator>&amp;&amp;</operator> <call><name>swap_prereleases</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p1</name> <operator>-</operator> <name>s1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>diff</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>result_type</name><index>[<expr><name>state</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c2</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>isdigit</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CMP</name></expr>:</case>
<return>return <expr><name>diff</name></expr>;</return>

<case>case <expr><name>LEN</name></expr>:</case>
<while>while <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p1</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p2</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><ternary><condition><expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>diff</name></expr></else></ternary></expr>;</return>

<default>default:</default>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
