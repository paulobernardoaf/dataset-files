<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\commit-slab-impl.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMMIT_SLAB_IMPL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMIT_SLAB_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>implement_static_commit_slab</name><parameter_list>(<parameter><type><name>slabname</name></type></parameter>, <parameter><type><name>elemtype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>implement_commit_slab(slabname, elemtype, MAYBE_UNUSED static)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>implement_shared_commit_slab</name><parameter_list>(<parameter><type><name>slabname</name></type></parameter>, <parameter><type><name>elemtype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>implement_commit_slab(slabname, elemtype, )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>implement_commit_slab</name><parameter_list>(<parameter><type><name>slabname</name></type></parameter>, <parameter><type><name>elemtype</name></type></parameter>, <parameter><type><name>scope</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scope void init_ ##slabname##_with_stride(struct slabname *s, unsigned stride) { unsigned int elem_size; if (!stride) stride = 1; s-&gt;stride = stride; elem_size = sizeof(elemtype) * stride; s-&gt;slab_size = COMMIT_SLAB_SIZE / elem_size; s-&gt;slab_count = 0; s-&gt;slab = NULL; } scope void init_ ##slabname(struct slabname *s) { init_ ##slabname##_with_stride(s, 1); } scope void clear_ ##slabname(struct slabname *s) { unsigned int i; for (i = 0; i &lt; s-&gt;slab_count; i++) free(s-&gt;slab[i]); s-&gt;slab_count = 0; FREE_AND_NULL(s-&gt;slab); } scope elemtype *slabname##_at_peek(struct slabname *s, const struct commit *c, int add_if_missing) { unsigned int nth_slab, nth_slot; nth_slab = c-&gt;index / s-&gt;slab_size; nth_slot = c-&gt;index % s-&gt;slab_size; if (s-&gt;slab_count &lt;= nth_slab) { unsigned int i; if (!add_if_missing) return NULL; REALLOC_ARRAY(s-&gt;slab, nth_slab + 1); for (i = s-&gt;slab_count; i &lt;= nth_slab; i++) s-&gt;slab[i] = NULL; s-&gt;slab_count = nth_slab + 1; } if (!s-&gt;slab[nth_slab]) { if (!add_if_missing) return NULL; s-&gt;slab[nth_slab] = xcalloc(s-&gt;slab_size, sizeof(**s-&gt;slab) * s-&gt;stride); } return &amp;s-&gt;slab[nth_slab][nth_slot * s-&gt;stride]; } scope elemtype *slabname##_at(struct slabname *s, const struct commit *c) { return slabname##_at_peek(s, c, 1); } scope elemtype *slabname##_peek(struct slabname *s, const struct commit *c) { return slabname##_at_peek(s, c, 0); } struct slabname</cpp:value></cpp:define>

















































































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
