<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\base85.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUG_85</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_85</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>say</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>say1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>say2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, a, b, c)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>say</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>say1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>say2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>en85</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>,
<expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>,
<expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>,
<expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>,
<expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'j'</literal></expr>,
<expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>,
<expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>,
<expr><literal type="char">'!'</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">'$'</literal></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'('</literal></expr>, <expr><literal type="char">')'</literal></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">'-'</literal></expr>,
<expr><literal type="char">';'</literal></expr>, <expr><literal type="char">'&lt;'</literal></expr>, <expr><literal type="char">'='</literal></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><literal type="char">'?'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'^'</literal></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><literal type="char">'`'</literal></expr>, <expr><literal type="char">'{'</literal></expr>,
<expr><literal type="char">'|'</literal></expr>, <expr><literal type="char">'}'</literal></expr>, <expr><literal type="char">'~'</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>de85</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>prep_base85</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>de85</name><index>[<expr><literal type="char">'Z'</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>en85</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>en85</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>de85</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>decode_85</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>prep_base85</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>say2</name><argument_list>(<argument><expr><literal type="string">"decode 85 &lt;%.*s&gt;"</literal></expr></argument>, <argument><expr><name>len</name> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>de</name></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>buffer</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>de85</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>de</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid base85 alphabet %c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>acc</name> <operator>*</operator> <literal type="number">85</literal> <operator>+</operator> <name>de</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>cnt</name></expr>)</condition>;</do>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>buffer</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>de85</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>de</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid base85 alphabet %c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0xffffffff</literal> <operator>/</operator> <literal type="number">85</literal> <operator>&lt;</operator> <name>acc</name> <operator>||</operator>
<literal type="number">0xffffffff</literal> <operator>-</operator> <name>de</name> <operator>&lt;</operator> <operator>(</operator><name>acc</name> <operator>*=</operator> <literal type="number">85</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid base85 sequence %.5s"</literal></expr></argument>, <argument><expr><name>buffer</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name>de</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>say1</name><argument_list>(<argument><expr><literal type="string">" %08x"</literal></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>cnt</name></expr>)</condition>;</do>
</block_content>}</block></while>
<expr_stmt><expr><call><name>say</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>encode_85</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>say</name><argument_list>(<argument><expr><literal type="string">"encode 85"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">24</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cnt</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>data</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>acc</name> <operator>|=</operator> <name>ch</name> <operator>&lt;&lt;</operator> <name>cnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>say1</name><argument_list>(<argument><expr><literal type="string">" %08x"</literal></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cnt</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name>acc</name> <operator>%</operator> <literal type="number">85</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>acc</name> <operator>/=</operator> <literal type="number">85</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>en85</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>say</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_85</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ac</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>encode_85</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">26</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"encoded: %c%s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>*</operator><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>decode_85</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"decoded: %.*s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>encode_85</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"encoded: D%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
