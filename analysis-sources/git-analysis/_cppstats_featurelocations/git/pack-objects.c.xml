<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\pack-objects.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>locate_object_entry_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><operator>(</operator><name><name>pdata</name><operator>-&gt;</operator><name>index_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>oidhash</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name> <init>= <expr><name><name>pdata</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>closest_pow2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rehash_objects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>index_size</name></name> <operator>=</operator> <call><name>closest_pow2</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>index_size</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>index_size</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>index_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pdata</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>pdata</name><operator>-&gt;</operator><name>objects</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ix</name> <init>= <expr><call><name>locate_object_entry_hash</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Duplicate object in hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>ix</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>packlist_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pdata</name><operator>-&gt;</operator><name>index_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>locate_object_entry_hash</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name><name>pdata</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_in_pack_by_idx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>mapping</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>OE_IN_PACK_BITS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>mapping</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>get_all_packs</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>nr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapping</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>in_pack_by_idx</name></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>oe_map_new_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"packing_data has already been converted to pack array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack</name></name></expr></argument>, <argument><expr><name><name>pack</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pack</name><operator>-&gt;</operator><name>nr_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>oe_in_pack</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name><name>pack</name><operator>-&gt;</operator><name>objects</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack_by_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>prepare_packing_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>repo</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_FULL_IN_PACK_ARRAY"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>prepare_in_pack_by_idx</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>oe_size_limit</name></name> <operator>=</operator> <call><name>git_env_ulong</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_OE_SIZE"</literal></expr></argument>,
<argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>OE_SIZE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>oe_delta_size_limit</name></name> <operator>=</operator> <call><name>git_env_ulong</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_OE_DELTA_SIZE"</literal></expr></argument>,
<argument><expr><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>OE_DELTA_SIZE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_recursive_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>odb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>packlist_alloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>new_entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name> <operator>&gt;=</operator> <name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name> <operator>=</operator> <operator>(</operator><name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pdata</name><operator>-&gt;</operator><name>in_pack_by_idx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>in_pack</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>delta_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>delta_size</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>tree_depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>tree_depth</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>layer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>layer</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_entry</name> <operator>=</operator> <name><name>pdata</name><operator>-&gt;</operator><name>objects</name></name> <operator>+</operator> <name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_entry</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>index_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rehash_objects</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name> <init>= <expr><call><name>locate_object_entry_hash</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>new_entry</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"duplicate object inserted into hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>in_pack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>in_pack</name><index>[<expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>tree_depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>tree_depth</name><index>[<expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>layer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>layer</name><index>[<expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_objects</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>new_entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>oe_set_delta_ext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>delta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>ext_bases</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_ext</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>alloc_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>ext_bases</name><index>[<expr><name><name>pdata</name><operator>-&gt;</operator><name>nr_ext</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>preferred_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>filled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>delta</name><operator>-&gt;</operator><name>ext_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta</name><operator>-&gt;</operator><name>delta_idx</name></name> <operator>=</operator> <name>base</name> <operator>-</operator> <name><name>pdata</name><operator>-&gt;</operator><name>ext_bases</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
