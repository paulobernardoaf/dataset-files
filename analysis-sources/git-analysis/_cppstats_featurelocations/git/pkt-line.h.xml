<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\pkt-line.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PKTLINE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKTLINE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sideband.h"</cpp:file></cpp:include>
















<function_decl><type><name>void</name></type> <name>packet_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_delim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_write_fmt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>packet_buf_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_buf_delim</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>set_packet_header</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_buf_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>packet_buf_write_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>packet_flush_gently</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>packet_write_fmt_gently</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>int</name></type> <name>write_packetized_from_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>write_packetized_from_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_out</name></decl></parameter>)</parameter_list>;</function_decl>



































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_READ_GENTLE_ON_EOF</name></cpp:macro> <cpp:value>(1u&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_READ_CHOMP_NEWLINE</name></cpp:macro> <cpp:value>(1u&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_READ_DIE_ON_ERR_PACKET</name></cpp:macro> <cpp:value>(1u&lt;&lt;2)</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>packet_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>src_len</name></decl></parameter>, <parameter><decl><type><name>char</name>
<modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>







<enum>enum <name>packet_read_status</name> <block>{
<decl><name>PACKET_READ_EOF</name></decl>,
<decl><name>PACKET_READ_NORMAL</name></decl>,
<decl><name>PACKET_READ_FLUSH</name></decl>,
<decl><name>PACKET_READ_DELIM</name></decl>,
}</block>;</enum>
<function_decl><type><name><name>enum</name> <name>packet_read_status</name></name></type> <name>packet_read_with_status</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>src_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pktlen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>char</name> <modifier>*</modifier></type><name>packet_read_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>packet_read_line_gently</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_line</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>char</name> <modifier>*</modifier></type><name>packet_read_line_buf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>src_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>ssize_t</name></type> <name>read_packetized_to_strbuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd_in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb_out</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>int</name></type> <name>recv_sideband</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>packet_reader</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>buffer_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>options</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>packet_read_status</name></name></type> <name>status</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pktlen</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>line_peeked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>use_sideband</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>
}</block>;</struct>





<function_decl><type><name>void</name></type> <name>packet_reader_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name><name>enum</name> <name>packet_read_status</name></name></type> <name>packet_reader_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name><name>enum</name> <name>packet_read_status</name></name></type> <name>packet_reader_peek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PACKET_MAX</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LARGE_PACKET_MAX</name></cpp:macro> <cpp:value>65520</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LARGE_PACKET_DATA_MAX</name></cpp:macro> <cpp:value>(LARGE_PACKET_MAX - 4)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>packet_buffer</name><index>[<expr><name>LARGE_PACKET_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>packet_writer</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dest_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>use_sideband</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>packet_writer_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_writer</name></name> <modifier>*</modifier></type><name>writer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_fd</name></decl></parameter>)</parameter_list>;</function_decl>


<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>
<function_decl><type><name>void</name></type> <name>packet_writer_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_writer</name></name> <modifier>*</modifier></type><name>writer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>
<function_decl><type><name>void</name></type> <name>packet_writer_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_writer</name></name> <modifier>*</modifier></type><name>writer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_writer_delim</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_writer</name></name> <modifier>*</modifier></type><name>writer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>packet_writer_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_writer</name></name> <modifier>*</modifier></type><name>writer</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
