<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\json-writer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json-writer.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>jw_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jw</name><operator>-&gt;</operator><name>need_comma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>append_quoted_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\u%04x"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indent_pretty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch_open</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name> <operator>=</operator> <name>pretty</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>ch_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name></name></expr></argument>, <argument><expr><name>ch_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jw</name><operator>-&gt;</operator><name>need_comma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>assert_in_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"json-writer: object: missing jw_object_begin(): '%s'"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>buf</name><index>[<expr><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"json-writer: object: not in object: '%s'"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>assert_in_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"json-writer: array: missing jw_array_begin()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>buf</name><index>[<expr><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"json-writer: array: not in array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_add_comma</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>need_comma</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>jw</name><operator>-&gt;</operator><name>need_comma</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fmt_double</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>fmt</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"%%.%df"</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>object_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_in_object</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>maybe_add_comma</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_pretty</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>append_quoted_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>array_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_in_array</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>maybe_add_comma</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_pretty</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>assert_is_terminated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"json-writer: object: missing jw_end(): '%s'"</literal></expr></argument>,
<argument><expr><name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>begin</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_quoted_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_intmax</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIdMAX</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_double</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fmt_double</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_true</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_false</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_bool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jw_object_true</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jw_object_false</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>increase_indent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>buf</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addchars</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kill_indent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eat_it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>buf</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>eat_it</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eat_it</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>eat_it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_sub_jw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>













<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name> <operator>&amp;&amp;</operator> <name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>pretty</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>increase_indent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>pretty</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kill_indent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>json</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>jw_object_sub_jw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_is_terminated</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_sub_jw</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_inline_begin_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_object_inline_begin_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>object_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>begin</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_quoted_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_intmax</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIdMAX</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_double</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fmt_double</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_true</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_false</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_bool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jw_array_true</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jw_array_false</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_sub_jw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_is_terminated</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_sub_jw</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_argc_argv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_argv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>argv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_inline_begin_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_array_inline_begin_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>array_common</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jw_is_terminated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jw_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch_open</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"json-writer: too many jw_end(): '%s'"</literal></expr></argument>, <argument><expr><name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_open</name> <operator>=</operator> <name><name>jw</name><operator>-&gt;</operator><name>open_stack</name><operator>.</operator><name>buf</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>open_stack</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jw</name><operator>-&gt;</operator><name>need_comma</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jw</name><operator>-&gt;</operator><name>pretty</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_pretty</name><argument_list>(<argument><expr><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_open</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
