<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\date.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>time_t</name></type> <name>tm_to_time_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mdays</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">304</literal></expr>, <expr><literal type="number">334</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-</operator> <literal type="number">70</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>year</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>year</name></expr></argument> &gt;</argument_list></name> <literal type="number">129</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>month</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>month</name></expr></argument> &gt;</argument_list></name> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>month</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>day</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>year</name> <operator>*</operator> <literal type="number">365</literal> <operator>+</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>mdays</name><index>[<expr><name>month</name></expr>]</index></name> <operator>+</operator> <name>day</name><operator>)</operator> <operator>*</operator> <literal type="number">24</literal><operator>*</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60UL</literal> <operator>+</operator>
<name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>*</operator> <literal type="number">60</literal><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>month_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"January"</literal></expr>, <expr><literal type="string">"February"</literal></expr>, <expr><literal type="string">"March"</literal></expr>, <expr><literal type="string">"April"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"June"</literal></expr>,
<expr><literal type="string">"July"</literal></expr>, <expr><literal type="string">"August"</literal></expr>, <expr><literal type="string">"September"</literal></expr>, <expr><literal type="string">"October"</literal></expr>, <expr><literal type="string">"November"</literal></expr>, <expr><literal type="string">"December"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>weekday_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Sundays"</literal></expr>, <expr><literal type="string">"Mondays"</literal></expr>, <expr><literal type="string">"Tuesdays"</literal></expr>, <expr><literal type="string">"Wednesdays"</literal></expr>, <expr><literal type="string">"Thursdays"</literal></expr>, <expr><literal type="string">"Fridays"</literal></expr>, <expr><literal type="string">"Saturdays"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>time_t</name></type> <name>gm_time_t</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>minutes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>minutes</name> <operator>=</operator> <ternary><condition><expr><name>tz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>tz</name></expr> </then><else>: <expr><name>tz</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>minutes</name> <operator>=</operator> <operator>(</operator><name>minutes</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <operator>(</operator><name>minutes</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>minutes</name> <operator>=</operator> <ternary><condition><expr><name>tz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>minutes</name></expr> </then><else>: <expr><name>minutes</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minutes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unsigned_add_overflows</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>minutes</name> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Timestamp+tz too large: %"</literal><name>PRItime</name><literal type="string">" +%04d"</literal></expr></argument>,
<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>time</name> <operator>&lt;</operator> <operator>-</operator><name>minutes</name> <operator>*</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Timestamp before Unix epoch: %"</literal><name>PRItime</name><literal type="string">" %04d"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>time</name> <operator>+=</operator> <name>minutes</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>date_overflows</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Timestamp too large for this system: %"</literal><name>PRItime</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>time</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>time_to_tm</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>gm_time_t</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>time_to_tm_local</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><name>time</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>local_time_tzoffset</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t_local</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>eastwest</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_local</name> <operator>=</operator> <call><name>tm_to_time_t</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t_local</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>t_local</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eastwest</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>t</name> <operator>-</operator> <name>t_local</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>eastwest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>t_local</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>offset</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>offset</name> <operator>*</operator> <name>eastwest</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>local_tzoffset</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>date_overflows</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Timestamp too large for this system: %"</literal><name>PRItime</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>local_time_tzoffset</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name><operator>)</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_DATE_NOW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_date_relative</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>timebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name>time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"in the future"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name>time</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" second ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" seconds ago"</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">30</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" minute ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" minutes ago"</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">30</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" hour ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" hours ago"</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator> <operator>/</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" day ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" days ago"</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" week ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" weeks ago"</literal></expr></argument>, <argument><expr><operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">365</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" month ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" months ago"</literal></expr></argument>, <argument><expr><operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">1825</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>totalmonths</name> <init>= <expr><operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">365</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">365</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>years</name> <init>= <expr><name>totalmonths</name> <operator>/</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>months</name> <init>= <expr><name>totalmonths</name> <operator>%</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>months</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" year"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" years"</literal></expr></argument>, <argument><expr><name>years</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>years</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%s, %"</literal><name>PRItime</name><literal type="string">" month ago"</literal></expr></argument>, <argument><expr><literal type="string">"%s, %"</literal><name>PRItime</name><literal type="string">" months ago"</literal></expr></argument>, <argument><expr><name>months</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>months</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" year ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" years ago"</literal></expr></argument>, <argument><expr><name>years</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>years</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>,
<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" year ago"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" years ago"</literal></expr></argument>, <argument><expr><operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">183</literal><operator>)</operator> <operator>/</operator> <literal type="number">365</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>diff</name> <operator>+</operator> <literal type="number">183</literal><operator>)</operator> <operator>/</operator> <literal type="number">365</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>date_mode_from_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>date_mode_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>date_mode</name></name></type> <name>mode</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>DATE_STRFTIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"cannot create anonymous strftime date_mode struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>.</operator><name>local</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_date_normal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>human_tm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>human_tz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>local</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>year</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>date</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>wday</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>time</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>seconds</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>tz</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>hide</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</struct>

<expr_stmt><expr><name><name>hide</name><operator>.</operator><name>tz</name></name> <operator>=</operator> <name>local</name> <operator>||</operator> <name>tz</name> <operator>==</operator> <name>human_tz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hide</name><operator>.</operator><name>year</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>==</operator> <name><name>human_tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hide</name><operator>.</operator><name>year</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <name><name>human_tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&gt;</operator> <name><name>human_tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>==</operator> <name><name>human_tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hide</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name><name>hide</name><operator>.</operator><name>wday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <name><name>human_tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hide</name><operator>.</operator><name>date</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>hide</name><operator>.</operator><name>wday</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_date_relative</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name><name>human_tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hide</name><operator>.</operator><name>seconds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hide</name><operator>.</operator><name>tz</name></name> <operator>|=</operator> <operator>!</operator><name><name>hide</name><operator>.</operator><name>date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hide</name><operator>.</operator><name>wday</name></name> <operator>=</operator> <name><name>hide</name><operator>.</operator><name>time</name></name> <operator>=</operator> <operator>!</operator><name><name>hide</name><operator>.</operator><name>year</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hide</name><operator>.</operator><name>wday</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.3s "</literal></expr></argument>, <argument><expr><name><name>weekday_names</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hide</name><operator>.</operator><name>date</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.3s %d "</literal></expr></argument>, <argument><expr><name><name>month_names</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hide</name><operator>.</operator><name>time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hide</name><operator>.</operator><name>seconds</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">":%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_rtrim</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hide</name><operator>.</operator><name>year</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hide</name><operator>.</operator><name>tz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %+05d"</literal></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show_date</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>human_tm</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>human_tz</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>timebuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_UNIX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>timebuf</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_HUMAN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>human_tz</name> <operator>=</operator> <call><name>local_time_tzoffset</name><argument_list>(<argument><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>human_tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>local</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>local_tzoffset</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_RAW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" %+05d"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>timebuf</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_RELATIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_date_relative</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>timebuf</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>local</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>time_to_tm_local</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>time_to_tm</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>time_to_tm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_SHORT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_ISO8601</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d %02d:%02d:%02d %+05d"</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_ISO8601_STRICT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tz</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d"</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>tz</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>tz</name> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_RFC2822</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><literal type="string">"%.3s, %d %.3s %d %02d:%02d:%02d %+05d"</literal></expr></argument>,
<argument><expr><name><name>weekday_names</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>month_names</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_STRFTIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addftime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>strftime_fmt</name></name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>,
<argument><expr><operator>!</operator><name><name>mode</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_date_normal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>human_tm</name></expr></argument>, <argument><expr><name>human_tz</name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name><name>timebuf</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>







<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst</name></decl>;</decl_stmt>
}</block> <decl><name><name>timezone_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"IDLW"</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"NT"</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"CAT"</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"HST"</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"HDT"</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"YST"</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"YDT"</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"PST"</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"PDT"</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MST"</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MDT"</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"CST"</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"CDT"</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"EST"</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"EDT"</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"AST"</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"ADT"</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"WAT"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"GMT"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"UTC"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"Z"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"WET"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"BST"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"CET"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MET"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MEWT"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MEST"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"CEST"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"MESZ"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"FWT"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"FST"</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"EET"</literal></expr>, <expr><operator>+</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"EEST"</literal></expr>, <expr><operator>+</operator><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"WAST"</literal></expr>, <expr><operator>+</operator><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"WADT"</literal></expr>, <expr><operator>+</operator><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"CCT"</literal></expr>, <expr><operator>+</operator><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"JST"</literal></expr>, <expr><operator>+</operator><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"EAST"</literal></expr>, <expr><operator>+</operator><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"EADT"</literal></expr>, <expr><operator>+</operator><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"GST"</literal></expr>, <expr><operator>+</operator><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"NZT"</literal></expr>, <expr><operator>+</operator><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"NZST"</literal></expr>, <expr><operator>+</operator><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"NZDT"</literal></expr>, <expr><operator>+</operator><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>, 
<expr><block>{ <expr><literal type="string">"IDLE"</literal></expr>, <expr><operator>+</operator><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>, 
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>date</name></expr>;</condition> <incr><expr><name>date</name><operator>++</operator></expr><operator>,</operator> <expr><name>str</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>date</name> <operator>==</operator> <operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>date</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>date</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_alpha</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name><name>date</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>match_alpha</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>month_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>match</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>weekday_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>match</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>timezone_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>timezone_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>||</operator> <name>match</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>timezone_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name><name>timezone_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>timezone_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dst</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">60</literal><operator>*</operator><name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>match</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"PM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"AM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name>skip_alpha</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_date</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now_tm</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>month</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>month</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">13</literal> <operator>&amp;&amp;</operator> <name>day</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>day</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>check</name> <init>= <expr><operator>*</operator><name>tm</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>now_tm</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>check</name></expr> </then><else>: <expr><name>tm</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>specified</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>day</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>year</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>now_tm</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>now_tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>year</name> <operator>&gt;=</operator> <literal type="number">1970</literal> <operator>&amp;&amp;</operator> <name>year</name> <operator>&lt;</operator> <literal type="number">2100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>year</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>year</name> <operator>&gt;</operator> <literal type="number">70</literal> <operator>&amp;&amp;</operator> <name>year</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>year</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>year</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>year</name> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>now_tm</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>specified</name> <operator>=</operator> <call><name>tm_to_time_t</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>specified</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><literal type="number">24</literal><operator>*</operator><literal type="number">3600</literal> <operator>&lt;</operator> <name>specified</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>year</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_multi_number</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>now_tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>refuse_future</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num2</name></decl>, <decl><type ref="prev"/><name>num3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num2</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num3</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num3</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>num3</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <name>num2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num2</name> <operator>&lt;</operator> <literal type="number">60</literal> <operator>&amp;&amp;</operator> <name>num3</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num3</name> <operator>&lt;=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name>num2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name>num3</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>now</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>refuse_future</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now_tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>refuse_future</name> <operator>=</operator> <operator>&amp;</operator><name>now_tm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_date</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>, <argument><expr><name>num3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_date</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>num3</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<call><name>is_date</name><argument_list>(<argument><expr><name>num3</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>, <argument><expr><name>refuse_future</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_date</name><argument_list>(<argument><expr><name>num3</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>refuse_future</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>
<call><name>is_date</name><argument_list>(<argument><expr><name>num3</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>, <argument><expr><name>refuse_future</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>end</name> <operator>-</operator> <name>date</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>nodate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&amp;</operator>
<name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&amp;</operator>
<name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&amp;</operator>
<name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&amp;</operator>
<name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&amp;</operator>
<name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>match_digit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tm_gmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>parse_timestamp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">100000000</literal> <operator>&amp;&amp;</operator> <call><name>nodate</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>time</name> <init>= <expr><name>num</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tm_gmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name> <operator>-</operator> <name>date</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<switch>switch <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name>match_multi_number</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><operator>*</operator><name>end</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>match</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>






<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>date</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">1400</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>minutes</name> <init>= <expr><name>num</name> <operator>%</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hours</name> <init>= <expr><name>num</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>hours</name><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name>minutes</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">1900</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&lt;</operator> <literal type="number">2100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>num</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>num</name> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&lt;</operator> <literal type="number">13</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>num</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_tz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>date</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>end</name> <operator>-</operator> <operator>(</operator><name>date</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>hour</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <name>hour</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <operator>(</operator><name>date</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt> 









<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">60</literal> <operator>&amp;&amp;</operator> <name>hour</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>hour</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>min</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>date</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>offp</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>end</name> <operator>-</operator> <name>date</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_string</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" %c%02d%02d"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>offset</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>offset</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>match_object_header_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>stamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ofs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>date</name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <literal type="char">'9'</literal> <operator>&lt;</operator> <operator>*</operator><name>date</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stamp</name> <operator>=</operator> <call><name>parse_timestamp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator> <name>stamp</name> <operator>==</operator> <name>TIME_MAX</name> <operator>||</operator> <operator>(</operator><name><name>end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>date</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ofs</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <name>end</name> <operator>!=</operator> <name>date</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ofs</name> <operator>=</operator> <operator>(</operator><name>ofs</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <operator>(</operator><name>ofs</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>date</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ofs</name> <operator>=</operator> <operator>-</operator><name>ofs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>=</operator> <name>stamp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>ofs</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>parse_date_basic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_gmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>dummy_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timestamp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <operator>&amp;</operator><name>dummy_timestamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>&amp;</operator><name>dummy_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tm_gmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>date</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>match_object_header_date</name><argument_list>(<argument><expr><name>date</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>date</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>match_alpha</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>match_digit</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm_gmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>date</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>match_tz</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>date</name> <operator>+=</operator> <name>match</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>=</operator> <call><name>tm_to_time_t</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>timestamp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>temp_time</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_time</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>*</operator><name>timestamp</name> <operator>&gt;</operator> <name>temp_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><operator>*</operator><name>timestamp</name> <operator>-</operator> <name>temp_time</name><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>temp_time</name> <operator>-</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>*</operator><name>timestamp</name><operator>)</operator> <operator>/</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm_gmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>-=</operator> <operator>*</operator><name>offset</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_expiry_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>








<expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>=</operator> <name>TIME_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>=</operator> <call><name>approxidate_careful</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_date_basic</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>date_string</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>date_mode_type</name></name></type> <name>parse_date_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"relative"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_RELATIVE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"iso8601-strict"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"iso-strict"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_ISO8601_STRICT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"iso8601"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"iso"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_ISO8601</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"rfc2822"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"rfc"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_RFC2822</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_SHORT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_NORMAL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"human"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_HUMAN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_RAW</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_UNIX</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DATE_STRFTIME</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unknown date format %s"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_date_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"auto:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>pager_in_use</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">"default-local"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>parse_date_type</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>local</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"-local"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>local</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DATE_STRFTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"date format missing colon separator: %s"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mode</name><operator>-&gt;</operator><name>strftime_fmt</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unknown date format %s"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>datestamp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>tm_to_time_t</name><argument_list>(<argument><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_string</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>time_t</name></type> <name>update_tm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>now</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>now</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>now</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&gt;</operator> <name><name>now</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>sec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>pending_number</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><operator>*</operator><name>num</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>number</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>number</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">1969</literal> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;</operator> <literal type="number">2100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>number</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">69</literal> <operator>&amp;&amp;</operator> <name>number</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>number</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_now</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_tm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_yesterday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_tm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hour</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;</operator> <name>hour</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_tm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>hour</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_midnight</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pending_number</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_time</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_noon</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pending_number</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_time</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_tea</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pending_number</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_time</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_pm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><operator>*</operator><name>num</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hour</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name>hour</name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_am</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><operator>*</operator><name>num</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hour</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <operator>(</operator><name>hour</name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>date_never</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>special</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>special</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"yesterday"</literal></expr>, <expr><name>date_yesterday</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"noon"</literal></expr>, <expr><name>date_noon</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"midnight"</literal></expr>, <expr><name>date_midnight</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tea"</literal></expr>, <expr><name>date_tea</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PM"</literal></expr>, <expr><name>date_pm</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AM"</literal></expr>, <expr><name>date_am</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"never"</literal></expr>, <expr><name>date_never</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"now"</literal></expr>, <expr><name>date_now</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>number_name</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"zero"</literal></expr>, <expr><literal type="string">"one"</literal></expr>, <expr><literal type="string">"two"</literal></expr>, <expr><literal type="string">"three"</literal></expr>, <expr><literal type="string">"four"</literal></expr>,
<expr><literal type="string">"five"</literal></expr>, <expr><literal type="string">"six"</literal></expr>, <expr><literal type="string">"seven"</literal></expr>, <expr><literal type="string">"eight"</literal></expr>, <expr><literal type="string">"nine"</literal></expr>, <expr><literal type="string">"ten"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>typelen</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
}</block> <decl><name><name>typelen</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"seconds"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"minutes"</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hours"</literal></expr>, <expr><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"days"</literal></expr>, <expr><literal type="number">24</literal><operator>*</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"weeks"</literal></expr>, <expr><literal type="number">7</literal><operator>*</operator><literal type="number">24</literal><operator>*</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>approxidate_alpha</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>touched</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>typelen</name></name> <modifier>*</modifier></type><name>tl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>special</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>date</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>month_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>special</name></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>num</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>number_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>number_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"last"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>typelen</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>tl</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tl</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>tl</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_tm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>tl</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tl</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>weekday_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><operator>*</operator><name>num</name> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>+=</operator> <literal type="number">7</literal><operator>*</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_tm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>diff</name> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"months"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>update_tm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <operator>*</operator><name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match_string</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"years"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_tm</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-=</operator> <operator>*</operator><name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>approxidate_digit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>number</name> <init>= <expr><call><name>parse_timestamp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name>match_multi_number</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><operator>*</operator><name>end</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>date</name> <operator>+</operator> <name>match</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name><name>date</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>end</name> <operator>-</operator> <name>date</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>timestamp_t</name></type> <name>approxidate_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error_ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>touched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>time_sec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>time_sec</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>date</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>date</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pending_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>approxidate_digit</name><argument_list>(<argument><expr><name>date</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number</name></expr></argument>, <argument><expr><name>time_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>approxidate_alpha</name><argument_list>(<argument><expr><name>date</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>pending_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>touched</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error_ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>timestamp_t</name><operator>)</operator><call><name>update_tm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>timestamp_t</name></type> <name>approxidate_relative</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_date_basic</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>timestamp</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>approxidate_str</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>timeval</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errors</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>timestamp_t</name></type> <name>approxidate_careful</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error_ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error_ret</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_date_basic</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>error_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>timestamp</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>approxidate_str</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>error_ret</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>date_overflows</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>sys</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>t</name> <operator>&gt;=</operator> <name>TIME_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>sys</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<return>return <expr><name>t</name> <operator>!=</operator> <name>sys</name> <operator>||</operator> <operator>(</operator><name>t</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>sys</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
