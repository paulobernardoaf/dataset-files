<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\pack-objects.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PACK_OBJECTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_OBJECTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread-utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>

<struct_decl>struct <name>repository</name>;</struct_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DELTA_CACHE_SIZE</name></cpp:macro> <cpp:value>(256 * 1024 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OE_DFS_STATE_BITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OE_DEPTH_BITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OE_IN_PACK_BITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OE_Z_DELTA_BITS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OE_SIZE_BITS</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OE_DELTA_SIZE_BITS</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>







<enum>enum <name>dfs_state</name> <block>{
<decl><name>DFS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>DFS_ACTIVE</name></decl>,
<decl><name>DFS_DONE</name></decl>,
<decl><name>DFS_NUM_STATES</name></decl>
}</block>;</enum>




















































<struct>struct <name>object_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>delta_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>off_t</name></type> <name>in_pack_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>size_</name><range>:<expr><name>OE_SIZE_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size_valid</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta_child_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta_sibling_idx</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name></type> <name>delta_size_</name><range>:<expr><name>OE_DELTA_SIZE_BITS</name></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>delta_size_valid</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>in_pack_header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>in_pack_idx</name><range>:<expr><name>OE_IN_PACK_BITS</name></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>z_delta_size</name><range>:<expr><name>OE_Z_DELTA_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type_valid</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>no_try_delta</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type_</name><range>:<expr><name>TYPE_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>in_pack_type</name><range>:<expr><name>TYPE_BITS</name></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>preferred_base</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>unsigned</name></type> <name>tagged</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>filled</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>dfs_state</name><range>:<expr><name>OE_DFS_STATE_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>depth</name><range>:<expr><name>OE_DEPTH_BITS</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ext_base</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 










}</block>;</struct>

<struct>struct <name>packing_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nr_objects</name></decl>, <decl><type ref="prev"/><name>nr_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>index_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>in_pack_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>delta_size</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>in_pack_by_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>in_pack</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>odb_lock</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>ext_bases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nr_ext</name></decl>, <decl><type ref="prev"/><name>alloc_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>oe_size_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>oe_delta_size_limit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>tree_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>layer</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>prepare_packing_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>packing_data_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>odb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>packing_data_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>odb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>packlist_alloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>packlist_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>pack_name_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>






<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>name</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>object_type</name></name></type> <name>oe_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>type_valid</name></name></expr> ?</condition><then> <expr><name><name>e</name><operator>-&gt;</operator><name>type_</name></name></expr> </then><else>: <expr><name>OBJ_BAD</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>OBJ_ANY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"OBJ_ANY cannot be set in pack-objects code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>type_valid</name></name> <operator>=</operator> <name>type</name> <operator>&gt;=</operator> <name>OBJ_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>type_</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>oe_in_pack_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack_pos</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_in_pack_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack_pos</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>oe_in_pack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack_by_idx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack_by_idx</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>in_pack_idx</name></name></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>oe_map_new_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_in_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack_by_idx</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>in_pack_idx</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>oe_map_new_pack</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pack</name><operator>-&gt;</operator><name>in_pack</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>oe_delta</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>delta_idx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>ext_base</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>pack</name><operator>-&gt;</operator><name>ext_bases</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>delta_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>pack</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>delta_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_delta</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>delta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_idx</name></name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>oe_set_delta_ext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>oe_delta_child</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>delta_child_idx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>pack</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>delta_child_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_delta_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>delta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_child_idx</name></name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_child_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>oe_delta_sibling</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>delta_sibling_idx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>pack</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>delta_sibling_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_delta_sibling</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>delta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_sibling_idx</name></name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_sibling_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>oe_get_size_slow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>oe_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>size_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>size_</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>oe_get_size_slow</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>oe_size_less_than</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>size_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>lhs</name><operator>-&gt;</operator><name>size_</name></name> <operator>&lt;</operator> <name>rhs</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rhs</name> <operator>&lt;</operator> <name><name>pack</name><operator>-&gt;</operator><name>oe_size_limit</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>oe_get_size_slow</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>rhs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>oe_size_greater_than</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>size_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>lhs</name><operator>-&gt;</operator><name>size_</name></name> <operator>&gt;</operator> <name>rhs</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rhs</name> <operator>&lt;</operator> <name><name>pack</name><operator>-&gt;</operator><name>oe_size_limit</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>oe_get_size_slow</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>rhs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>pack</name><operator>-&gt;</operator><name>oe_size_limit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>size_</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>size_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>size_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>oe_get_size_slow</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"'size' is supposed to be the object size!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>oe_delta_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>delta_size_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>delta_size_</name></name></expr>;</return></block_content></block></if></if_stmt>









<return>return <expr><name><name>pack</name><operator>-&gt;</operator><name>delta_size</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_delta_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>pack</name><operator>-&gt;</operator><name>oe_delta_size_limit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_size_</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_size_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>packing_data_lock</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pack</name><operator>-&gt;</operator><name>delta_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pack</name><operator>-&gt;</operator><name>delta_size</name></name></expr></argument>, <argument><expr><name><name>pack</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>packing_data_unlock</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pack</name><operator>-&gt;</operator><name>delta_size</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>delta_size_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>oe_tree_depth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pack</name><operator>-&gt;</operator><name>tree_depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>pack</name><operator>-&gt;</operator><name>tree_depth</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_tree_depth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tree_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pack</name><operator>-&gt;</operator><name>tree_depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pack</name><operator>-&gt;</operator><name>tree_depth</name></name></expr></argument>, <argument><expr><name><name>pack</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pack</name><operator>-&gt;</operator><name>tree_depth</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name> <operator>=</operator> <name>tree_depth</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>char</name></type> <name>oe_layer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pack</name><operator>-&gt;</operator><name>layer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>pack</name><operator>-&gt;</operator><name>layer</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oe_set_layer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>layer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pack</name><operator>-&gt;</operator><name>layer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>pack</name><operator>-&gt;</operator><name>layer</name></name></expr></argument>, <argument><expr><name><name>pack</name><operator>-&gt;</operator><name>nr_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pack</name><operator>-&gt;</operator><name>layer</name><index>[<expr><name>e</name> <operator>-</operator> <name><name>pack</name><operator>-&gt;</operator><name>objects</name></name></expr>]</index></name> <operator>=</operator> <name>layer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
