<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\diffcore-break.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>should_break</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>break_score</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>merge_score_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>



































<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>delta_size</name></decl>, <decl><type ref="prev"/><name>max_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>src_copied</name></decl>, <decl><type ref="prev"/><name>literal_added</name></decl>, <decl><type ref="prev"/><name>src_removed</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>merge_score_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 



<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>merge_score_p</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>MAX_SCORE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator>
<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>max_size</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&lt;</operator> <name>MINIMUM_BREAK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>diffcore_count_changes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>cnt_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>cnt_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>src_copied</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>literal_added</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>src_copied</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src_copied</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>literal_added</name> <operator>+</operator> <name>src_copied</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src_copied</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>literal_added</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>src_copied</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>literal_added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src_removed</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>src_copied</name></expr>;</expr_stmt>






<expr_stmt><expr><operator>*</operator><name>merge_score_p</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>src_removed</name> <operator>*</operator> <name>MAX_SCORE</name> <operator>/</operator> <name><name>src</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>merge_score_p</name> <operator>&gt;</operator> <name>break_score</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>delta_size</name> <operator>=</operator> <name>src_removed</name> <operator>+</operator> <name>literal_added</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta_size</name> <operator>*</operator> <name>MAX_SCORE</name> <operator>/</operator> <name>max_size</name> <operator>&lt;</operator> <name>break_score</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>break_score</name> <operator>&lt;</operator> <name>src_removed</name> <operator>*</operator> <name>MAX_SCORE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>literal_added</name> <operator>*</operator> <literal type="number">20</literal> <operator>&lt;</operator> <name>src_removed</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>literal_added</name> <operator>*</operator> <literal type="number">20</literal> <operator>&lt;</operator> <name>src_copied</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>diffcore_break</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>break_score</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>outq</name></decl>;</decl_stmt>
































<decl_stmt><decl><type><name>int</name></type> <name>merge_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><name>merge_score</name> <operator>=</operator> <operator>(</operator><name>break_score</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>break_score</name> <operator>=</operator> <operator>(</operator><name>break_score</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>break_score</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>break_score</name> <operator>=</operator> <name>DEFAULT_BREAK_SCORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>merge_score</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>merge_score</name> <operator>=</operator> <name>DEFAULT_MERGE_SCORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>object_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBJ_BLOB</name> <operator>&amp;&amp;</operator>
<call><name>object_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBJ_BLOB</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>should_break</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>,
<argument><expr><name>break_score</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>null_one</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>null_two</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&lt;</operator> <name>merge_score</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>null_one</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>diff_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name>null_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>broken_pair</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>null_two</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>diff_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>null_two</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>broken_pair</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_blob</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_free_filespec_blob</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>outq</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_broken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>outq</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name> <init>= <expr><name>pp</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"internal error in merge #1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"internal error in merge #2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"internal error in merge #3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"internal error in merge #4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>diff_queue</name><argument_list>(<argument><expr><name>outq</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>rename_used</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>diffcore_merge_broken</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>outq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>broken_pair</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>broken_pair</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>merge_broken</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>next</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>outq</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>
</unit>
