<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\fsmonitor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewah/ewok.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fsmonitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_EXTENSION_VERSION1</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_EXTENSION_VERSION2</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOOK_INTERFACE_VERSION1</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOOK_INTERFACE_VERSION2</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>trace_key</name></name></type> <name>trace_fsmonitor</name> <init>= <expr><call><name>TRACE_KEY_INIT</name><argument_list>(<argument><expr><name>FSMONITOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fsmonitor_ewah_callback</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name> <init>= <expr><operator>(</operator>struct <name>index_state</name> <operator>*</operator><operator>)</operator><name>is</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"fsmonitor_dirty has more entries than the index (%"</literal><name>PRIuMAX</name><literal type="string">" &gt;= %u)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>pos</name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_FSMONITOR_VALID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fsmonitor_hook_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hook_version</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"core.fsmonitorhookversion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hook_version</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hook_version</name> <operator>==</operator> <name>HOOK_INTERFACE_VERSION1</name> <operator>||</operator>
<name>hook_version</name> <operator>==</operator> <name>HOOK_INTERFACE_VERSION2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hook_version</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Invalid hook version '%i' in core.fsmonitorhookversion. "</literal>
<literal type="string">"Must be 1 or 2."</literal></expr></argument>, <argument><expr><name>hook_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_fsmonitor_extension</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hdr_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ewah_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>fsmonitor_dirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>last_update</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"corrupt fsmonitor extension (too short)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hdr_version</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hdr_version</name> <operator>==</operator> <name>INDEX_EXTENSION_VERSION1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>get_be64</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hdr_version</name> <operator>==</operator> <name>INDEX_EXTENSION_VERSION2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>last_update</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"bad fsmonitor version %d"</literal></expr></argument>, <argument><expr><name>hdr_version</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ewah_size</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>fsmonitor_dirty</name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ewah_read_mmap</name><argument_list>(<argument><expr><name>fsmonitor_dirty</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>ewah_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ewah_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name>fsmonitor_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"failed to parse ewah bitmap reading fsmonitor index extension"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name> <operator>=</operator> <name>fsmonitor_dirty</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name> <operator>&amp;&amp;</operator>
<name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>&gt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"fsmonitor_dirty has more entries than the index (%"</literal><name>PRIuMAX</name><literal type="string">" &gt; %u)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_fsmonitor</name></expr></argument>, <argument><expr><literal type="string">"read fsmonitor extension successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fill_fsmonitor_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;</operator> <name>CE_REMOVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>skipped</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;</operator> <name>CE_FSMONITOR_VALID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ewah_set</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>skipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_fsmonitor_extension</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hdr_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ewah_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ewah_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>split_index</name></name> <operator>&amp;&amp;</operator>
<name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>&gt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"fsmonitor_dirty has more entries than the index (%"</literal><name>PRIuMAX</name><literal type="string">" &gt; %u)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr_version</name></expr></argument>, <argument><expr><name>INDEX_EXTENSION_VERSION2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>fixup</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ewah_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ewah_start</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_serialize_strbuf</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ewah_size</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>ewah_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>fixup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ewah_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_fsmonitor</name></expr></argument>, <argument><expr><literal type="string">"write fsmonitor extension successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>query_fsmonitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_update</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>query_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>cp</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core_fsmonitor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>core_fsmonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>last_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>.</operator><name>use_shell</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <call><name>get_git_work_tree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>capture_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><name>query_result</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fsmonitor_refresh_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>index_name_pos</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_FSMONITOR_VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_fsmonitor</name></expr></argument>, <argument><expr><literal type="string">"fsmonitor_refresh_callback '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>untracked_cache_invalidate_path</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>refresh_fsmonitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>query_result</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>query_success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hook_version</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>last_update_token</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core_fsmonitor</name> <operator>||</operator> <name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_has_run_once</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hook_version</name> <operator>=</operator> <call><name>fsmonitor_hook_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_has_run_once</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_fsmonitor</name></expr></argument>, <argument><expr><literal type="string">"refresh fsmonitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>last_update</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hook_version</name> <operator>==</operator> <name>HOOK_INTERFACE_VERSION1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update_token</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>last_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hook_version</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>hook_version</name> <operator>==</operator> <name>HOOK_INTERFACE_VERSION2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>query_success</name> <operator>=</operator> <operator>!</operator><call><name>query_fsmonitor</name><argument_list>(<argument><expr><name>HOOK_INTERFACE_VERSION2</name></expr></argument>,
<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>query_success</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hook_version</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hook_version</name> <operator>=</operator> <name>HOOK_INTERFACE_VERSION2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>








<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>query_result</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update_token</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>last_update_token</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Empty last update token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>query_success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bol</name> <operator>=</operator> <name><name>last_update_token</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hook_version</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hook_version</name> <operator>=</operator> <name>HOOK_INTERFACE_VERSION1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>last_update_token</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update_token</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>last_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hook_version</name> <operator>==</operator> <name>HOOK_INTERFACE_VERSION1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>query_success</name> <operator>=</operator> <operator>!</operator><call><name>query_fsmonitor</name><argument_list>(<argument><expr><name>HOOK_INTERFACE_VERSION1</name></expr></argument>,
<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trace_performance_since</name><argument_list>(<argument><expr><name>last_update</name></expr></argument>, <argument><expr><literal type="string">"fsmonitor process '%s'"</literal></expr></argument>, <argument><expr><name>core_fsmonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_fsmonitor</name></expr></argument>, <argument><expr><literal type="string">"fsmonitor process '%s' returned %s"</literal></expr></argument>,
<argument><expr><name>core_fsmonitor</name></expr></argument>, <argument><expr><ternary><condition><expr><name>query_success</name></expr> ?</condition><then> <expr><literal type="string">"success"</literal></expr> </then><else>: <expr><literal type="string">"failure"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>query_success</name> <operator>&amp;&amp;</operator> <name><name>query_result</name><operator>.</operator><name>buf</name><index>[<expr><name>bol</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>query_result</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bol</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>query_result</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fsmonitor_refresh_callback</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>bol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bol</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>bol</name> <operator>&lt;</operator> <name><name>query_result</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fsmonitor_refresh_callback</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>bol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>untracked</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>untracked</name><operator>-&gt;</operator><name>use_fsmonitor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>is_cache_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;</operator> <name>CE_FSMONITOR_VALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_cache_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CE_FSMONITOR_VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>is_cache_changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_changed</name></name> <operator>|=</operator> <name>FSMONITOR_CHANGED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>untracked</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>untracked</name><operator>-&gt;</operator><name>use_fsmonitor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update_token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_fsmonitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>last_update</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_fsmonitor</name></expr></argument>, <argument><expr><literal type="string">"add fsmonitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_changed</name></name> <operator>|=</operator> <name>FSMONITOR_CHANGED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>getnanotime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_update</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CE_FSMONITOR_VALID</name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>untracked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_untracked_cache</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>untracked</name><operator>-&gt;</operator><name>use_fsmonitor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>refresh_fsmonitor</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_fsmonitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>trace_printf_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace_fsmonitor</name></expr></argument>, <argument><expr><literal type="string">"remove fsmonitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_changed</name></name> <operator>|=</operator> <name>FSMONITOR_CHANGED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tweak_fsmonitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fsmonitor_enabled</name> <init>= <expr><call><name>git_config_get_fsmonitor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fsmonitor_enabled</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>|=</operator> <name>CE_FSMONITOR_VALID</name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>&gt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"fsmonitor_dirty has more entries than the index (%"</literal><name>PRIuMAX</name><literal type="string">" &gt; %u)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ewah_each_bit</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name></expr></argument>, <argument><expr><name>fsmonitor_ewah_callback</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_fsmonitor</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>fsmonitor_dirty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>fsmonitor_enabled</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><call><name>remove_fsmonitor</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><call><name>add_fsmonitor</name><argument_list>(<argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
