<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\merge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resolve-undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unpack-trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>merge_argument</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><ternary><condition><expr><name>commit</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>: <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>try_merge_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strategy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xopts_nr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xopts</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>common</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>remotes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>args</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"merge-%s"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>xopts_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"--%s"</literal></expr></argument>, <argument><expr><name><name>xopts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>common</name></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><call><name>merge_argument</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>head_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>remotes</name></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <name><name>j</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><call><name>merge_argument</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_index</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read the cache"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>resolve_undo_clear_index</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>checkout_fast_forward</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>overwrite_ignore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name><name>trees</name><index>[<expr><name>MAX_UNPACK_TREES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>t</name><index>[<expr><name>MAX_UNPACK_TREES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nr_trees</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dir_struct</name></name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock_file</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>refresh_index</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>REFRESH_QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_hold_locked_index</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>LOCK_REPORT_ON_ERROR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trees</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>trees</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trees</name><index>[<expr><name>nr_trees</name></expr>]</index></name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trees</name><index>[<expr><name>nr_trees</name><operator>++</operator></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>trees</name><index>[<expr><name>nr_trees</name></expr>]</index></name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trees</name><index>[<expr><name>nr_trees</name><operator>++</operator></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_trees</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>parse_tree</name><argument_list>(<argument><expr><name><name>trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><name>t</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>trees</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>trees</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>overwrite_ignore</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>DIR_SHOW_IGNORED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_standard_excludes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <operator>&amp;</operator><name>dir</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>head_idx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>src_index</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>dst_index</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>verbose_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>twoway_merge</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_unpack_trees_porcelain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_trees</name><argument_list>(<argument><expr><name>nr_trees</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_unpack_trees_porcelain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_unpack_trees_porcelain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_locked_index</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to write new index file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
