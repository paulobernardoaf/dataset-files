<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\mailinfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mailinfo.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_space</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <name>cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_sane_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>email</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <literal type="number">60</literal> <operator>&lt;</operator> <name><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"@&lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>email</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>name</name> <operator>==</operator> <name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_bogus_from</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bra</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ket</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>email</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bra</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bra</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ket</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>bra</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ket</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>, <argument><expr><name>bra</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ket</name> <operator>-</operator> <name>bra</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>bra</name> <operator>-</operator> <name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_trim</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_sane_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unquote_comment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>take_next_literally</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>take_next_literally</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>take_next_literally</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>take_next_literally</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>unquote_comment</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">')'</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unquote_quoted_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>take_next_literally</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>take_next_literally</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>take_next_literally</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>take_next_literally</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unquote_quoted_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>unquote_quoted_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>unquote_comment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_from</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>el</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unquote_quoted_pair</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>at</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_bogus_from</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>email</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>at</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>




<while>while <condition>(<expr><name>at</name> <operator>&gt;</operator> <name><name>f</name><operator>.</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>at</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>at</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>at</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>el</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="string">" \n\t\r\v\f&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>at</name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>el</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>at</name><index>[<expr><name>el</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<expr_stmt><expr><call><name>cleanup_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_trim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>.</operator><name>buf</name><index>[<expr><name><name>f</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_sane_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>strbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>slurp_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ends</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ap</name> <init>= <expr><call><name>strcasestr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ap</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ap</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ends</name> <operator>=</operator> <literal type="string">"\""</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ends</name> <operator>=</operator> <literal type="string">"; \t"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_attr_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>slurp_attr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_content_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>boundary</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>strbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><name>boundary</name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>format_flowed</name></name> <operator>=</operator> <call><name>has_attr_value</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"format="</literal></expr></argument>, <argument><expr><literal type="string">"flowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>delsp</name></name> <operator>=</operator> <call><name>has_attr_value</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"delsp="</literal></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>slurp_attr</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"boundary="</literal></expr></argument>, <argument><expr><name>boundary</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_insertstr</name><argument_list>(<argument><expr><name>boundary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>content</name><index>[<expr><name>MAX_BOUNDARIES</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Too many boundaries to handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>input_error</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>content</name><index>[<expr><name>MAX_BOUNDARIES</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator> <operator>=</operator> <name>boundary</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boundary</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>slurp_attr</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"charset="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>boundary</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><name>boundary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>boundary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_content_transfer_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasestr</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"base64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>transfer_encoding</name></name> <operator>=</operator> <name>TE_BASE64</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcasestr</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"quoted-printable"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>transfer_encoding</name></name> <operator>=</operator> <name>TE_QP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>transfer_encoding</name></name> <operator>=</operator> <name>TE_DONTCARE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_multipart_boundary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>content_top</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>content_top</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name><name>line</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>content_top</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>content_top</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_subject</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>subject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>at</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>at</name> <operator>&lt;</operator> <name><name>subject</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remove</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>subject</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>at</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'R'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>subject</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name>at</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>subject</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>at</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator>
<name><name>subject</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>at</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>subject</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>at</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><name>subject</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>at</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <case>case <expr><literal type="char">':'</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><name>subject</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>subject</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>remove</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name><name>subject</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>at</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>keep_non_patch_brackets_in_subject</name></name> <operator>||</operator>
<operator>(</operator><literal type="number">7</literal> <operator>&lt;=</operator> <name>remove</name> <operator>&amp;&amp;</operator>
<call><name>memmem</name><argument_list>(<argument><expr><name><name>subject</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>, <argument><expr><literal type="string">"PATCH"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><name>subject</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>at</name> <operator>+=</operator> <name>remove</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>subject</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>at</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>at</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strbuf_trim</name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HDR_PARSED</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>header</name><index>[<expr><name>MAX_HDR_PARSED</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"From"</literal></expr>,<expr><literal type="string">"Subject"</literal></expr>,<expr><literal type="string">"Date"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>skip_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_iprefix</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>*</operator><name>val</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>outval</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_format_patch_separator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SAMPLE</name><index>[]</index></name> <init>=
<expr><literal type="string">"From e6807f3efca28b30decfecb1732a56c7db1137ee Mon Sep 17 00:00:00 2001\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>SAMPLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"From "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strspn</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"0123456789abcdef"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>SAMPLE</name> <operator>+</operator> <operator>(</operator><name>cp</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SAMPLE</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>cp</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>decode_q_segment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>q_seg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rfc2047</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>q_seg</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>strbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>q_seg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><operator>*</operator><name>in</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>hex2chr</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rfc2047</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>decode_b_segment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>b_seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>b_seg</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>strbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>b_seg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">62</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal> <operator>-</operator> <literal type="number">52</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt> 
<switch>switch <condition>(<expr><name>pos</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>acc</name> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>acc</name> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>acc</name> <operator>|</operator> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_to_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>metainfo_charset</name></name> <operator>||</operator> <operator>!</operator><name>charset</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>charset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>same_encoding</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>metainfo_charset</name></name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>reencode_string</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>metainfo_charset</name></name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>input_error</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot convert from %s to %s"</literal></expr></argument>,
<argument><expr><name>charset</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>metainfo_charset</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_attach</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>outbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>charset_q</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>, <decl><type ref="prev"/><name>piecebuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_error</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>in</name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;=</operator> <name><name>it</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"=?"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>encoding</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>charset_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>piecebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>ep</name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>scan</name> <operator>=</operator> <name>in</name></expr>;</init> <condition><expr><name>scan</name> <operator>&lt;</operator> <name>ep</name></expr>;</condition> <incr><expr><name>scan</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>!=</operator> <name>ep</name> <operator>||</operator> <name>in</name> <operator>==</operator> <name><name>it</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>ep</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>buf</name></name> <operator>&gt;=</operator> <name><name>it</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>release_return</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>buf</name></name> <operator>&gt;</operator> <name><name>it</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>release_return</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>charset_q</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoding</name> <operator>||</operator> <name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>release_return</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"?="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ep</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>release_return</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>piecebuf</name></expr></argument>, <argument><expr><name>cp</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>cp</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<goto>goto <name>release_return</name>;</goto>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>decode_b_segment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>piecebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>decode_q_segment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>piecebuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>convert_to_utf8</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>dec</name></expr></argument>, <argument><expr><name><name>charset_q</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>release_return</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found_error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>release_return</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>charset_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>piecebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>input_error</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_header</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name><name>hdr_data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overwrite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>hdr_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>overwrite</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>parse_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>check_header_out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>parse_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_content_type</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>check_header_out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Content-Transfer-Encoding"</literal></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_content_transfer_encoding</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>check_header_out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Message-Id"</literal></expr></argument>, <argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>add_message_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>message_id</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>check_header_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>check_header_out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>is_inbody_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>skip_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_transfer_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>transfer_encoding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TE_QP</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_q_segment</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TE_BASE64</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_b_segment</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TE_DONTCARE</name></expr>:</case>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>patchbreak</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"diff -"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"Index: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"---"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>line</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_scissors_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scissors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first_nonblank</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_nonblank</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>visible</name></decl>, <decl><type ref="prev"/><name>perforation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>in_perforation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>line</name></expr>;</init> <condition><expr><operator>*</operator><name>c</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in_perforation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perforation</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gap</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_nonblank</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_nonblank</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_nonblank</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_perforation</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>perforation</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"&gt;8"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"8&lt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"&gt;%"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"%&lt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_perforation</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>perforation</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scissors</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_perforation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>










<if_stmt><if>if <condition>(<expr><name>first_nonblank</name> <operator>&amp;&amp;</operator> <name>last_nonblank</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>visible</name> <operator>=</operator> <name>last_nonblank</name> <operator>-</operator> <name>first_nonblank</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>visible</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>scissors</name> <operator>&amp;&amp;</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name>visible</name> <operator>&amp;&amp;</operator>
<name>visible</name> <operator>&lt;</operator> <name>perforation</name> <operator>*</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<name>gap</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>perforation</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_inbody_header_accum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_header</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name></name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"inbody_header_accum, if not empty, must always contain a valid in-body header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_inbody_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>use_scissors</name></name> <operator>&amp;&amp;</operator> <call><name>is_scissors_line</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>flush_inbody_header_accum</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_strip_suffix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flush_inbody_header_accum</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;From"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>is_format_patch_separator</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"[PATCH]"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"Subject"</literal></expr></argument>, <argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_inbody_header</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_commit_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>filter_stage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>line</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>(</operator><name><name>line</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flush_inbody_header_accum</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>use_inbody_headers</name></name> <operator>&amp;&amp;</operator> <name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name> <operator>=</operator> <call><name>check_inbody_header</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>



<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>convert_to_utf8</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>charset</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>use_scissors</name></name> <operator>&amp;&amp;</operator> <call><name>is_scissors_line</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>log_message</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>patchbreak</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>message_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>log_message</name></name></expr></argument>,
<argument><expr><literal type="string">"Message-Id: %s\n"</literal></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>message_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>log_message</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>patchfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>patch_lines</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>filter_stage</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handle_commit_msg</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>filter_stage</name></name><operator>++</operator></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>handle_patch</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_rfc2822_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"From "</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="string">"&gt;From "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">33</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">57</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><literal type="number">59</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">126</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_one_header_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>continuation</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strbuf_getline_lf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>strbuf_rtrim</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>line</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>!</operator><call><name>is_rfc2822_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>peek</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>peek</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strbuf_getline_lf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>continuation</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>continuation</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_rtrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>continuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>continuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>continuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_boundary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>strbuf_getline_lf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_multipart_boundary</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_boundary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>newline</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newline</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name> <operator>&lt;</operator> <name><name>mi</name><operator>-&gt;</operator><name>content</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Detected mismatched boundaries, can't recover"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>input_error</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>handle_filter</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>input_error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_boundary</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>transfer_encoding</name></name> <operator>=</operator> <name>TE_DONTCARE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>read_one_header_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_header</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_getline_lf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_filter_flowed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>line</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>format_flowed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_filter</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"-- "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rest</name> <operator>-</operator> <name><name>line</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_filter</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>handle_filter</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>line</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>delsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>strbuf_insert</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>prev</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_filter</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_body</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>prev</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_boundary</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>handle_body_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_multipart_boundary</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_filter</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handle_boundary</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>handle_body_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>decode_transfer_encoding</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>transfer_encoding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TE_BASE64</name></expr>:</case>
<case>case <expr><name>TE_QP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lines</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>strbuf_insert</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>prev</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>prev</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>strbuf_split</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <name>lines</name></expr>;</init> <condition><expr><operator>(</operator><name>sb</name> <operator>=</operator> <operator>*</operator><name>it</name><operator>)</operator></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>it</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>handle_filter_flowed</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>strbuf_list_free</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>handle_filter_flowed</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>input_error</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>strbuf_getwholeline</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_filter</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush_inbody_header_accum</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>handle_body_out</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_header_lines</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>sp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"%s: %.*s\n"</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ep</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>patch_lines</name></name> <operator>&amp;&amp;</operator> <name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Subject"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>keep_subject</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cleanup_subject</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_space</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>output_header_lines</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"Subject"</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"From"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cleanup_space</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_from</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"Author: %s\n"</literal></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"Email: %s\n"</literal></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>email</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cleanup_space</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mailinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>cmitmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>peek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>line</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cmitmsg</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmitmsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>patchfile</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mi</name><operator>-&gt;</operator><name>patchfile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>cmitmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>MAX_HDR_PARSED</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name></name><operator>)</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>MAX_HDR_PARSED</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name></name><operator>)</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>peek</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peek</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>cmitmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"empty patch: '%s'"</literal></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>peek</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>read_one_header_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_header</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>handle_body</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>log_message</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>log_message</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>cmitmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>cmitmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>patchfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_info</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>mi</name><operator>-&gt;</operator><name>input_error</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_mailinfo_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mi_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name> <init>= <expr><name>mi_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"mailinfo."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"mailinfo.scissors"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>use_scissors</name></name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setup_mailinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>log_message</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>header_stage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>use_inbody_headers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_mailinfo_config</name></expr></argument>, <argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_mailinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mailinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>email</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>inbody_header_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>message_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>p_hdr_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>s_hdr_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>mi</name><operator>-&gt;</operator><name>content</name></name> <operator>&lt;</operator> <name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mi</name><operator>-&gt;</operator><name>content_top</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mi</name><operator>-&gt;</operator><name>log_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
