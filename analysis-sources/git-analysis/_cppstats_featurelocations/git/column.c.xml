<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\column.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"column.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XY2LINEAR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(COL_LAYOUT((d)-&gt;colopts) == COL_COLUMN ? (x) * (d)-&gt;rows + (y) : (y) * (d)-&gt;cols + (x))</cpp:value></cpp:define>



<struct>struct <name>column_data</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>colopts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>column_options</name></name></type> <name>opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl>;</decl_stmt> 
}</block>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type> <name>item_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>utf8_strnwidth</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>layout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>column_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>padding</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>indent</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>*</operator><name>width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_column_width</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>column_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>XY2LINEAR</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>XY2LINEAR</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>shrink_columns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>column_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>total_width</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>rows</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name> <operator>!=</operator> <name>cols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>compute_column_width</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_width</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total_width</name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>total_width</name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>padding</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>total_width</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>compute_column_width</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>display_plain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>display_cell</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>column_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_width</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>empty_cell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>newline</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>XY2LINEAR</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name>initial_width</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>initial_width</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>width</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>padding</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>COL_LAYOUT</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>colopts</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>COL_COLUMN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>x</name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>indent</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>newline</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>nl</name></name></expr> </then><else>: <expr><name>empty_cell</name> <operator>+</operator> <name>len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>display_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>colopts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>column_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>column_data</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>initial_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>empty_cell</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>colopts</name></name> <operator>=</operator> <name>colopts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>opts</name></name> <operator>=</operator> <operator>*</operator><name>opts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>item_length</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>initial_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colopts</name> <operator>&amp;</operator> <name>COL_DENSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shrink_columns</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>empty_cell</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>initial_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>empty_cell</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>initial_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>display_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>initial_width</name></expr></argument>, <argument><expr><name>empty_cell</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>empty_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_columns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>colopts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>column_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>column_options</name></name></type> <name>nopts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>colopts</name> <operator>&amp;</operator> <name>COL_ENABLE_MASK</name><operator>)</operator> <operator>!=</operator> <name>COL_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nopts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nopts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nopts</name><operator>.</operator><name>indent</name></name> <operator>=</operator> <ternary><condition><expr><name>opts</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>indent</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>indent</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nopts</name><operator>.</operator><name>nl</name></name> <operator>=</operator> <ternary><condition><expr><name>opts</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>nl</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>nl</name></name></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nopts</name><operator>.</operator><name>padding</name></name> <operator>=</operator> <ternary><condition><expr><name>opts</name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>padding</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nopts</name><operator>.</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><name>opts</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>width</name></name></expr> </then><else>: <expr><call><name>term_columns</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>column_active</name><argument_list>(<argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>display_plain</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>COL_LAYOUT</name><argument_list>(<argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COL_PLAIN</name></expr>:</case>
<expr_stmt><expr><call><name>display_plain</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>nopts</name><operator>.</operator><name>indent</name></name></expr></argument>, <argument><expr><name><name>nopts</name><operator>.</operator><name>nl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COL_ROW</name></expr>:</case>
<case>case <expr><name>COL_COLUMN</name></expr>:</case>
<expr_stmt><expr><call><name>display_table</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>colopts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"invalid layout mode %d"</literal></expr></argument>, <argument><expr><call><name>COL_LAYOUT</name><argument_list>(<argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>finalize_colopts</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>colopts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stdout_is_tty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>colopts</name> <operator>&amp;</operator> <name>COL_ENABLE_MASK</name><operator>)</operator> <operator>==</operator> <name>COL_AUTO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stdout_is_tty</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stdout_is_tty</name> <operator>=</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>&amp;=</operator> <operator>~</operator><name>COL_ENABLE_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stdout_is_tty</name> <operator>||</operator> <call><name>pager_in_use</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>|=</operator> <name>COL_ENABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>colopt</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAYOUT_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_SET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>colopts</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group_set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>colopt</name></name></type> <name><name>opts</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"always"</literal></expr>, <expr><name>COL_ENABLED</name></expr>, <expr><name>COL_ENABLE_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"never"</literal></expr>, <expr><name>COL_DISABLED</name></expr>, <expr><name>COL_ENABLE_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>COL_AUTO</name></expr>, <expr><name>COL_ENABLE_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"plain"</literal></expr>, <expr><name>COL_PLAIN</name></expr>, <expr><name>COL_LAYOUT_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"column"</literal></expr>, <expr><name>COL_COLUMN</name></expr>, <expr><name>COL_LAYOUT_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"row"</literal></expr>, <expr><name>COL_ROW</name></expr>, <expr><name>COL_LAYOUT_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dense"</literal></expr>, <expr><name>COL_DENSE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>set</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>arg_len</name> <init>= <expr><name>len</name></expr></init></decl>, <decl><type ref="prev"/><name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_str</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arg_len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>arg_str</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg_str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg_len</name> <operator>!=</operator> <name>name_len</name> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>arg_str</name></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COL_ENABLE_MASK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>group_set</name> <operator>|=</operator> <name>ENABLE_SET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COL_LAYOUT_MASK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>group_set</name> <operator>|=</operator> <name>LAYOUT_SET</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>colopts</name> <operator>&amp;</operator> <operator>~</operator><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name><operator>)</operator> <operator>|</operator> <name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>|=</operator> <name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>&amp;=</operator> <operator>~</operator><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></for>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unsupported option '%s'"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_config</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>colopts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">" ,"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>group_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_option</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>colopts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_set</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>








<if_stmt><if>if <condition>(<expr><operator>(</operator><name>group_set</name> <operator>&amp;</operator> <name>LAYOUT_SET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>group_set</name> <operator>&amp;</operator> <name>ENABLE_SET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>colopts</name> <operator>&amp;</operator> <operator>~</operator><name>COL_ENABLE_MASK</name><operator>)</operator> <operator>|</operator> <name>COL_ENABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>column_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>colopts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_config</name><argument_list>(<argument><expr><name>colopts</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid column.%s mode %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_column_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>colopts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"column."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><literal type="string">"ui"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>column_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ui"</literal></expr></argument>, <argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>command</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>column_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parseopt_column_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>colopts</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>|=</operator> <name>COL_PARSEOPT</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>&amp;=</operator> <operator>~</operator><name>COL_ENABLE_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>colopts</name> <operator>|=</operator> <name>COL_ENABLED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>parse_config</name><argument_list>(<argument><expr><name>colopts</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fd_out</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>child_process</name></name></type> <name>column_process</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>run_column_filter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>colopts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>column_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd_out</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>child_process_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>column_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <operator>&amp;</operator><name><name>column_process</name><operator>.</operator><name>args</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"--raw-mode=%d"</literal></expr></argument>, <argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"--width=%d"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>indent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"--indent=%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"--padding=%d"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>column_process</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>column_process</name><operator>.</operator><name>out</name></name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>column_process</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>column_process</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd_out</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>column_process</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>column_process</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stop_column_filter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fd_out</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>column_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd_out</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
