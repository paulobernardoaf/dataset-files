<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\diffcore-delta.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_HASH_SIZE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_FREE</name><parameter_list>(<parameter><type><name>sz_log2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((1&lt;&lt;(sz_log2))*(sz_log2-3)/(sz_log2))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHBASE</name></cpp:macro> <cpp:value>107927</cpp:value></cpp:define>

<struct>struct <name>spanhash</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>spanhash_top</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>alloc_log2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash</name></name></type> <name><name>data</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>spanhash_rehash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>new_spanhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>osz</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>orig</name><operator>-&gt;</operator><name>alloc_log2</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name>osz</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_spanhash</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>orig</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>st_mult</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>spanhash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_spanhash</name><operator>-&gt;</operator><name>alloc_log2</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>alloc_log2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_spanhash</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <call><name>INITIAL_FREE</name><argument_list>(<argument><expr><name><name>new_spanhash</name><operator>-&gt;</operator><name>alloc_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>new_spanhash</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>spanhash</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>osz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>orig</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>hashval</name></name> <operator>&amp;</operator> <operator>(</operator><name>sz</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>new_spanhash</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>bucket</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hashval</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>hashval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_spanhash</name><operator>-&gt;</operator><name>free</name></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <name>bucket</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_spanhash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>add_spanhash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lim</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>top</name><operator>-&gt;</operator><name>alloc_log2</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name>hashval</name> <operator>&amp;</operator> <operator>(</operator><name>lim</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>top</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>bucket</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hashval</name></name> <operator>=</operator> <name>hashval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>free</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>free</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>spanhash_rehash</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>top</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>hashval</name></name> <operator>==</operator> <name>hashval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cnt</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<return>return <expr><name>top</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&lt;=</operator> <name>bucket</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bucket</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spanhash_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>spanhash</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>a_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>spanhash</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>cnt</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>hashval</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>hashval</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>:
<expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>hashval</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>hashval</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>hash_chars</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>accum1</name></decl>, <decl><type ref="prev"/><name>accum2</name></decl>, <decl><type ref="prev"/><name>hashval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>one</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sz</name> <init>= <expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_text</name> <init>= <expr><operator>!</operator><call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>INITIAL_HASH_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>st_mult</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>spanhash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>alloc_log2</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <call><name>INITIAL_FREE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>spanhash</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>accum1</name> <operator>=</operator> <name>accum2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>buf</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_1</name> <init>= <expr><name>accum1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sz</name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>is_text</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>sz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>accum1</name> <operator>=</operator> <operator>(</operator><name>accum1</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>accum2</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accum2</name> <operator>=</operator> <operator>(</operator><name>accum2</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>old_1</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>accum1</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&lt;</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hashval</name> <operator>=</operator> <operator>(</operator><name>accum1</name> <operator>+</operator> <name>accum2</name> <operator>*</operator> <literal type="number">0x61</literal><operator>)</operator> <operator>%</operator> <name>HASHBASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>add_spanhash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashval</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>accum1</name> <operator>=</operator> <name>accum2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>alloc_log2</name></name></expr></argument>, <argument><expr><name>spanhash_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>diffcore_count_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_count_p</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_count_p</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>src_copied</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>literal_added</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash</name></name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>spanhash_top</name></name> <modifier>*</modifier></type><name>src_count</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sc</name></decl>, <decl><type ref="prev"/><name>la</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_count</name> <operator>=</operator> <name>dst_count</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_count_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src_count</name> <operator>=</operator> <operator>*</operator><name>src_count_p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src_count</name> <operator>=</operator> <call><name>hash_chars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_count_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>src_count_p</name> <operator>=</operator> <name>src_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_count_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_count</name> <operator>=</operator> <operator>*</operator><name>dst_count_p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_count</name> <operator>=</operator> <call><name>hash_chars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_count_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst_count_p</name> <operator>=</operator> <name>dst_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>la</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>src_count</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>dst_count</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dst_cnt</name></decl>, <decl><type ref="prev"/><name>src_cnt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<while>while <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>hashval</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>hashval</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>la</name> <operator>+=</operator> <name><name>d</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>src_cnt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>hashval</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>hashval</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_cnt</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>src_cnt</name> <operator>&lt;</operator> <name>dst_cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>la</name> <operator>+=</operator> <name>dst_cnt</name> <operator>-</operator> <name>src_cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sc</name> <operator>+=</operator> <name>src_cnt</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sc</name> <operator>+=</operator> <name>dst_cnt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>la</name> <operator>+=</operator> <name><name>d</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src_count_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>src_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_count_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dst_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>src_copied</name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>literal_added</name> <operator>=</operator> <name>la</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
