<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\line-log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line-range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decorate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_grow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>extra</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_SET_INIT</name></cpp:macro> <cpp:value>{0}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>range_set_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>prealloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prealloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_set_grow</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>prealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>range_set_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>range_set_init</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ranges</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>alloc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>range_set_append_unsafe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a</name> <operator>&lt;=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_grow</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>range_set_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;=</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_append_unsafe</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>range_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>_r</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>_s</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_check_invariants</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>sort_and_merge_range_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><name>range_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>==</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;=</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>o</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>o</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>o</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>o</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>o</name> <operator>&lt;=</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_set_check_invariants</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_union</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>ra</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>new_range</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>rb</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_range</name> <operator>=</operator> <operator>&amp;</operator><name><name>ra</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&gt;</operator> <name><name>rb</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_range</name> <operator>=</operator> <operator>&amp;</operator><name><name>rb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;</operator> <name><name>rb</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_range</name> <operator>=</operator> <operator>&amp;</operator><name><name>ra</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_range</name> <operator>=</operator> <operator>&amp;</operator><name><name>rb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>new_range</name> <operator>=</operator> <operator>&amp;</operator><name><name>ra</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>new_range</name> <operator>=</operator> <operator>&amp;</operator><name><name>rb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new_range</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name><name>new_range</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>nr</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nr</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;</operator> <name><name>new_range</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>range_set_grow</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name><name>new_range</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>new_range</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nr</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;</operator> <name><name>new_range</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nr</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>new_range</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_difference</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>




<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name> <operator>||</operator> <name>end</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_ranges_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>range_set_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_ranges_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_log_data_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>line_log_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_log_data_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>pair</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_line_log_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>line_log_data_clear</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type>
<name>search_line_log_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>insertion_point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>insertion_point</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>insertion_point</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>insertion_point</name> <operator>&amp;&amp;</operator> <name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>insertion_point</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>line_log_data_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>search_line_log_data</name><argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>range_set_append_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>line_log_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>collect_diff_cbdata</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>diff</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>collect_diff_cb</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>start_a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count_a</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>start_b</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count_b</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>collect_diff_cbdata</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count_a</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>start_a</name></expr></argument>, <argument><expr><name>start_a</name> <operator>+</operator> <name>count_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count_b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>diff</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>start_b</name></expr></argument>, <argument><expr><name>start_b</name> <operator>+</operator> <name>count_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>collect_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>collect_diff_cbdata</name></name></type> <name>cbdata</name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitcb_t</name></type> <name>ecb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <name><name>xecfg</name><operator>.</operator><name>interhunkctxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cbdata</name><operator>.</operator><name>diff</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>hunk_func</name></name> <operator>=</operator> <name>collect_diff_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ecb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecb</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <operator>&amp;</operator><name>cbdata</name></expr>;</expr_stmt>
<return>return <expr><call><name>xdi_diff</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void dump_range_set(struct range_set *rs, const char *desc)
{
int i;
printf("range set %s (%d items):\n", desc, rs-&gt;nr);
for (i = 0; i &lt; rs-&gt;nr; i++)
printf("\t[%ld,%ld]\n", rs-&gt;ranges[i].start, rs-&gt;ranges[i].end);
}

static void dump_line_log_data(struct line_log_data *r)
{
char buf[4096];
while (r) {
snprintf(buf, 4096, "file %s\n", r-&gt;path);
dump_range_set(&amp;r-&gt;ranges, buf);
r = r-&gt;next;
}
}

static void dump_diff_ranges(struct diff_ranges *diff, const char *desc)
{
int i;
assert(diff-&gt;parent.nr == diff-&gt;target.nr);
printf("diff ranges %s (%d items):\n", desc, diff-&gt;parent.nr);
printf("\tparent\ttarget\n");
for (i = 0; i &lt; diff-&gt;parent.nr; i++) {
printf("\t[%ld,%ld]\t[%ld,%ld]\n",
diff-&gt;parent.ranges[i].start,
diff-&gt;parent.ranges[i].end,
diff-&gt;target.ranges[i].start,
diff-&gt;target.ranges[i].end);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ranges_overlap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_ranges_filter_touched</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>diff</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&gt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>ranges_overlap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,
<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>,
<argument><expr><name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_shift_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>diff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>rs</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&gt;=</operator> <name><name>target</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name><name>parent</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name><operator>-</operator><name><name>parent</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name><operator>)</operator>
<operator>-</operator> <operator>(</operator><name><name>target</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name><operator>-</operator><name><name>target</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>range_set_append</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>range_set_map_across_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>range_set</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>diff</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>touched_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>touched</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>touched</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range_set</name></name></type> <name>tmp1</name> <init>= <expr><name>RANGE_SET_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range_set</name></name></type> <name>tmp2</name> <init>= <expr><name>RANGE_SET_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>diff_ranges_init</name><argument_list>(<argument><expr><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_ranges_filter_touched</name><argument_list>(<argument><expr><name>touched</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_difference</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp1</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>touched</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_shift_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp1</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_union</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>touched</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>touched_out</name> <operator>=</operator> <name>touched</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>check_single_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>deref_tag</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Non commit %s?"</literal></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"More than one commit to dig from: %s and %s?"</literal></expr></argument>,
<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"No commit specified?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator> <name>commit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_blob_sha1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_tree_entry</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"There is no path %s in the commit"</literal></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_line_ends</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>line_ends</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ends</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Cannot read blob %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spec</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>ends</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ends</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>num</name> <operator>&lt;</operator> <name><name>spec</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>num</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>num</name> <operator>==</operator> <name><name>spec</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>ends</name></expr></argument>, <argument><expr><operator>(</operator><name>cur</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ends</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name>ends</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lines</name> <operator>=</operator> <name>cur</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>line_ends</name> <operator>=</operator> <name>ends</name></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>nth_line_cb</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>line_ends</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nth_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nth_line_cb</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;=</operator> <name><name>d</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>spec</name></name> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>data</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>d</name><operator>-&gt;</operator><name>line_ends</name><index>[<expr><name>line</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type>
<name>parse_lines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ends</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nth_line_cb</name></name></type> <name>cb_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>ranges</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>args</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_part</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>range_part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>full_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>begin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>anchor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_part</name> <operator>=</operator> <call><name>skip_range_arg</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_part</name> <operator>||</operator> <operator>*</operator><name>name_part</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>!</operator><name><name>name_part</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L argument not 'start,end:file' or ':funcname:file': %s"</literal></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>range_part</name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>name_part</name> <operator>-</operator> <name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_part</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>full_name</name> <operator>=</operator> <call><name>prefix_path</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>name_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spec</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>full_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_blob_sha1</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_line_ends</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lines</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_data</name><operator>.</operator><name>spec</name></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_data</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_data</name><operator>.</operator><name>line_ends</name></name> <operator>=</operator> <name>ends</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>search_line_log_data</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>full_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>ranges</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_range_arg</name><argument_list>(<argument><expr><name>range_part</name></expr></argument>, <argument><expr><name>nth_line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_data</name></expr></argument>,
<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>,
<argument><expr><name>full_name</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"malformed -L argument '%s'"</literal></expr></argument>, <argument><expr><name>range_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>lines</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>begin</name> <operator>||</operator> <name>end</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>lines</name> <operator>&lt;</operator> <name>begin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"file %s has only %lu lines"</literal></expr></argument>, <argument><expr><name>name_part</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>lines</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>begin</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>line_log_data_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ranges</name></expr></argument>, <argument><expr><name>full_name</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>ranges</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sort_and_merge_range_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ranges</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>line_log_data_copy_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>line_log_data_init</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type>
<name>line_log_data_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name>prev</name> <operator>=</operator> <call><name>line_log_data_copy_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>line_log_data_copy_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>line_log_data_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>head</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>a</name> <operator>||</operator> <name>b</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>line_log_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>line_log_data_init</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_set_union</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src2</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_set_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>head</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_line_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>old_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>new_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>old_line</name> <operator>=</operator> <call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>line_log_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_line</name> <operator>&amp;&amp;</operator> <name>range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_line</name> <operator>=</operator> <call><name>line_log_data_merge</name><argument_list>(<argument><expr><name>old_line</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_line_log_data</name><argument_list>(<argument><expr><name>old_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>range</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_line</name> <operator>=</operator> <call><name>line_log_data_copy</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>line_log_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>new_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_commit_line_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>line_log_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free_line_log_data</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>line_log_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>lookup_line_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>line_log_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>ret</name></expr>;</init> <condition><expr><name>d</name></expr>;</condition> <incr><expr><name>d</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_set_check_invariants</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>same_paths_in_pathspec_and_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>range</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pathspec</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pathspec</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pathspec</name><operator>-&gt;</operator><name>nr</name></name> <operator>||</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_pathspec_from_ranges</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>array</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>paths</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>range</name></expr>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>paths</name> <operator>=</operator> <call><name>argv_array_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_pathspec</name><argument_list>(<argument><expr><name>pathspec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PATHSPEC_PREFER_FULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>line_log_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>check_single_commit</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>parse_lines</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_pathspec_from_ranges</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>move_diff_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_queue_struct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_diffs_for_paths</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_deletions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>outq</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>diff_queued_diff</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>diff_queued_diff</name><operator>.</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>rg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>keep_deletions</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>rg</name> <operator>=</operator> <name>range</name></expr>;</init> <condition><expr><name>rg</name></expr>;</condition> <incr><expr><name>rg</name> <operator>=</operator> <name><name>rg</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>rg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>diff_queued_diff</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff_queued_diff</name> <operator>=</operator> <name>outq</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>diff_might_be_rename</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>diff_queued_diff</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>diff_queued_diff</name><operator>.</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>one</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_diffs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>tree_oid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent_tree_oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tree_oid</name> <operator>=</operator> <call><name>get_commit_tree_oid</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent_tree_oid</name> <operator>=</operator> <ternary><condition><expr><name>parent</name></expr> ?</condition><then> <expr><call><name>get_commit_tree_oid</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>same_paths_in_pathspec_and_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_pathspec_from_ranges</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_tree_oid</name><argument_list>(<argument><expr><name>parent_tree_oid</name></expr></argument>, <argument><expr><name>tree_oid</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>&amp;&amp;</operator> <call><name>diff_might_be_rename</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_tree_oid</name><argument_list>(<argument><expr><name>parent_tree_oid</name></expr></argument>, <argument><expr><name>tree_oid</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_diffs_for_paths</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_diffs_for_paths</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>move_diff_queue</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_nth_line</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ends</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name><name>ends</name><index>[<expr><name>line</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>first</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ends</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><call><name>get_nth_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ends</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>get_nth_line</name><argument_list>(<argument><expr><name>line</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ends</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_nl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>begin</name> <operator>&amp;&amp;</operator> <name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>had_nl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>begin</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_nl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\ No newline at end of file\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>output_prefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_prefix</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name><name>opt</name><operator>-&gt;</operator><name>output_prefix</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output_prefix_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>prefix</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_diff_hacky_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>p_lines</name></decl>, <decl><type ref="prev"/><name>t_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>p_ends</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t_ends</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>pair</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>diff</name> <init>= <expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>diff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><call><name>output_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_reset</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_frag</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_meta</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_METAINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_old</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_new</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_context</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pair</name> <operator>||</operator> <operator>!</operator><name>diff</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_line_ends</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_lines</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fill_line_ends</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_lines</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%sdiff --git a/%s b/%s%s\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s--- %s%s%s\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr> ?</condition><then> <expr><literal type="string">"a/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr> ?</condition><then> <expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><literal type="string">"/dev/null"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s+++ b/%s%s\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>c_meta</name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>p_start</name></decl>, <decl><type ref="prev"/><name>p_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>t_start</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>t_end</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>t_cur</name> <init>= <expr><name>t_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j_last</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;</operator> <name>t_start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>nr</name></name> <operator>||</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&gt;</operator> <name>t_end</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>j_last</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j_last</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j_last</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name>t_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j_last</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>j_last</name> <operator>&gt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j_last</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>t_start</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_start</name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>-</operator> <operator>(</operator><name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name><operator>-</operator><name>t_start</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_start</name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t_end</name> <operator>&gt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j_last</name></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>j_last</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>+</operator> <operator>(</operator><name>t_end</name><operator>-</operator><name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j_last</name></expr>]</index></name><operator>.</operator><name>end</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>j_last</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_start</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_start</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s@@ -%ld,%ld +%ld,%ld @@%s\n"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>c_frag</name></expr></argument>,
<argument><expr><name>p_start</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_end</name><operator>-</operator><name>p_start</name></expr></argument>, <argument><expr><name>t_start</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>t_end</name><operator>-</operator><name>t_start</name></expr></argument>,
<argument><expr><name>c_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name>t_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>t_cur</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</condition> <incr><expr><name>t_cur</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>t_cur</name></expr></argument>, <argument><expr><name>t_ends</name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>c_context</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>p_ends</name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>c_old</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>t_cur</name> <operator>&lt;</operator> <name><name>diff</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>ranges</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>&amp;&amp;</operator> <name>t_cur</name> <operator>&lt;</operator> <name>t_end</name></expr>;</condition> <incr><expr><name>t_cur</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>t_cur</name></expr></argument>, <argument><expr><name>t_ends</name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>c_new</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<for>for <control>(<init>;</init> <condition><expr><name>t_cur</name> <operator>&lt;</operator> <name>t_end</name></expr>;</condition> <incr><expr><name>t_cur</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>t_cur</name></expr></argument>, <argument><expr><name>t_ends</name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>c_context</name></expr></argument>, <argument><expr><name>c_reset</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t_ends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_diff_hacky</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>output_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dump_diff_hacky_one</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>process_diff_filepair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>diff_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>rg</name> <init>= <expr><name>range</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>range_set</name></name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_ranges</name></name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmfile_t</name></type> <name>file_parent</name></decl>, <decl><type ref="prev"/><name>file_target</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rg</name> <operator>=</operator> <name><name>rg</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rg</name><operator>-&gt;</operator><name>ranges</name><operator>.</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_target</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_target</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_parent</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_parent</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>file_parent</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_parent</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>diff_ranges_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>collect_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_parent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to generate diff for %s"</literal></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rg</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_set_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_map_across_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rg</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>, <argument><expr><name>diff_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rg</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>range_set_move</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rg</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_ranges_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>diff_out</name><operator>)</operator><operator>-&gt;</operator><name><name>parent</name><operator>.</operator><name>nr</name></name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>diff_filepair_dup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>new_filepair</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_filepair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_filepair</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>one</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_filepair</name><operator>-&gt;</operator><name>two</name></name> <operator>=</operator> <name><name>pair</name><operator>-&gt;</operator><name>two</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_filepair</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_filepair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>new_filepair</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_diffqueues</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>dq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>dq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name><name>dq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>queue</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_all_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>range_out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>range_out</name> <operator>=</operator> <call><name>line_log_data_copy</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_ranges</name></name> <modifier>*</modifier></type><name>pairdiff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>process_diff_filepair</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>, <argument><expr><operator>*</operator><name>range_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pairdiff</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>













<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>rg</name> <init>= <expr><name>range</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>changed</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rg</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rg</name> <operator>=</operator> <name><name>rg</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rg</name><operator>-&gt;</operator><name>pair</name></name> <operator>=</operator> <call><name>diff_filepair_dup</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rg</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>, <argument><expr><name>pairdiff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_ranges</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pairdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>line_log_print</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>show_log</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_NO_OUTPUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name> <init>= <expr><call><name>lookup_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dump_diff_hacky</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_ranges_ordinary_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>parent_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>queue_diffs</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>process_all_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parent_range</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>parent_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free_line_log_data</name><argument_list>(<argument><expr><name>parent_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_ranges_merge_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>diffqueues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nparents</name> <init>= <expr><call><name>commit_list_count</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nparents</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>rev</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nparents</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>diffqueues</name></expr></argument>, <argument><expr><name>nparents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>cand</name></expr></argument>, <argument><expr><name>nparents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>parents</name></expr></argument>, <argument><expr><name>nparents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparents</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>parents</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_diffs</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rev</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>diffqueues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparents</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cand</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>process_all_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cand</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>diffqueues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>add_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cand</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_commit_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_list_append</name><argument_list>(<argument><expr><name><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_diffqueues</name><argument_list>(<argument><expr><name>nparents</name></expr></argument>, <argument><expr><name>diffqueues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparents</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>add_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cand</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>clear_commit_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_diffqueues</name><argument_list>(<argument><expr><name>nparents</name></expr></argument>, <argument><expr><name>diffqueues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>



</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_ranges_arbitrary_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>line_log_data</name></name> <modifier>*</modifier></type><name>range</name> <init>= <expr><call><name>lookup_line_range</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name> <operator>||</operator> <operator>!</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>process_ranges_ordinary_commit</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>process_ranges_merge_commit</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TREESAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>rewrite_result</name></name></type> <name>line_log_rewrite_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>parents</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_ok</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_ok</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_ok</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_noparents</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>line_log_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>rev</name><operator>-&gt;</operator><name>commits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>out</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>process_ranges_arbitrary_commit</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>to_free</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name>out</name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rewrite_parents</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>line_log_rewrite_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>rev</name><operator>-&gt;</operator><name>commits</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
