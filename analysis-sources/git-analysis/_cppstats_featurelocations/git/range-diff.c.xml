<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\range-diff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"range-diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linear-assignment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pretty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apply.h"</cpp:file></cpp:include>

<struct>struct <name>patch_util</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>patch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>shown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diffsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>diff_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>find_end_of_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>eol</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>buffer</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>read_patches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>other_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>cp</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>, <decl><type ref="prev"/><name>contents</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>util</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_header</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>, <argument><expr><literal type="string">"--no-color"</literal></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>, <argument><expr><literal type="string">"--no-merges"</literal></expr></argument>,
<argument><expr><literal type="string">"--reverse"</literal></expr></argument>, <argument><expr><literal type="string">"--date-order"</literal></expr></argument>, <argument><expr><literal type="string">"--decorate=no"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-prefix"</literal></expr></argument>,





<argument><expr><literal type="string">"--output-indicator-new=&gt;"</literal></expr></argument>,
<argument><expr><literal type="string">"--output-indicator-old=&lt;"</literal></expr></argument>,
<argument><expr><literal type="string">"--output-indicator-context=#"</literal></expr></argument>,
<argument><expr><literal type="string">"--no-abbrev-commit"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>other_arg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>other_arg</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not start `log`"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strbuf_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>contents</name></expr></argument>, <argument><expr><name><name>cp</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read `log` output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>contents</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>contents</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name>size</name> <operator>-=</operator> <name>len</name></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>len</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>find_end_of_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"commit "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>util</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>util</name> <operator>=</operator> <name>util</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>util</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>util</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>util</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not parse commit '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>util</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"diff --git"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name></type> <name>patch</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>root</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>util</name><operator>-&gt;</operator><name>diff_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>diff_offset</name></name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>parse_git_diff_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linenr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not parse git header '%.*s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" ##"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>.</operator><name>is_new</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s (new)"</literal></expr></argument>, <argument><expr><name><name>patch</name><operator>.</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>patch</name><operator>.</operator><name>is_delete</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s (deleted)"</literal></expr></argument>, <argument><expr><name><name>patch</name><operator>.</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>patch</name><operator>.</operator><name>is_rename</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s =&gt; %s"</literal></expr></argument>, <argument><expr><name><name>patch</name><operator>.</operator><name>old_name</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>.</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>patch</name><operator>.</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>.</operator><name>is_delete</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_filename</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>patch</name><operator>.</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>current_filename</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>patch</name><operator>.</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>.</operator><name>new_mode</name></name> <operator>&amp;&amp;</operator> <name><name>patch</name><operator>.</operator><name>old_mode</name></name> <operator>&amp;&amp;</operator>
<name><name>patch</name><operator>.</operator><name>old_mode</name></name> <operator>!=</operator> <name><name>patch</name><operator>.</operator><name>new_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (mode change %06o =&gt; %06o)"</literal></expr></argument>,
<argument><expr><name><name>patch</name><operator>.</operator><name>old_mode</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>.</operator><name>new_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" ##"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>in_header</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Author: "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" ##Metadata ##\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" ##Commit message ##\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Notes"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>line</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" ##%.*s ##\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;=</operator> <name>line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"@@ "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"@@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"@@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current_filename</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %s:"</literal></expr></argument>, <argument><expr><name>current_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>







<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>diffsize</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>util</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>util</name> <operator>=</operator> <name>util</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>patch_util_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>keydata</name></expr> ?</condition><then> <expr><name>keydata</name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>diff</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_exact_matches</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>(</operator><name>hashmap_cmp_fn</name><operator>)</operator><name>patch_util_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>util</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>patch</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <name><name>util</name><operator>-&gt;</operator><name>patch</name></name> <operator>+</operator> <name><name>util</name><operator>-&gt;</operator><name>diff_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>util</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><call><name>strhash</name><argument_list>(<argument><expr><name><name>util</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>util</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>util</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>patch</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <name><name>util</name><operator>-&gt;</operator><name>patch</name></name> <operator>+</operator> <name><name>util</name><operator>-&gt;</operator><name>diff_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>util</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><call><name>strhash</name><argument_list>(<argument><expr><name><name>util</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>hashmap_remove_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>util</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>-&gt;</operator><name>matching</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"already assigned!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>other</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <name><name>other</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>hashmap_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diffsize_consume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diffsize_hunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ob</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcline</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>diffsize_consume</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diffsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xpparam_t</name></type> <name>pp</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>cfg</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf1</name></decl>, <decl><type ref="prev"/><name>mf2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf1</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf1</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf2</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf2</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>,
<argument><expr><name>diffsize_hunk</name></expr></argument>, <argument><expr><name>diffsize_consume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to generate diff"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>COST_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_correspondences</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>creation_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cost</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a2b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b2a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>cost</name></expr></argument>, <argument><expr><call><name>st_mult</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>a2b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>b2a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>a_util</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>b_util</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>b_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>diffsize</name><argument_list>(<argument><expr><name><name>a_util</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>, <argument><expr><name><name>b_util</name><operator>-&gt;</operator><name>diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>COST_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>a_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name><name>a_util</name><operator>-&gt;</operator><name>diffsize</name></name> <operator>*</operator> <name>creation_factor</name> <operator>/</operator> <literal type="number">100</literal></expr> </then><else>: <expr><name>COST_MAX</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>util</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>util</name><operator>-&gt;</operator><name>matching</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name><name>util</name><operator>-&gt;</operator><name>diffsize</name></name> <operator>*</operator> <name>creation_factor</name> <operator>/</operator> <literal type="number">100</literal></expr> </then><else>: <expr><name>COST_MAX</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>compute_assignment</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>, <argument><expr><name>a2b</name></expr></argument>, <argument><expr><name>b2a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>a2b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a2b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>a_util</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>b_util</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>a2b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <name><name>a2b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a2b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b2a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_pair_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>patch_no_width</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dashes</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>a_util</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>b_util</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><ternary><condition><expr><name>a_util</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>a_util</name><operator>-&gt;</operator><name>oid</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>b_util</name><operator>-&gt;</operator><name>oid</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_reset</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_old</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_new</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_commit</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>DIFF_COMMIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dashes</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addchars</name><argument_list>(<argument><expr><name>dashes</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><name>oid</name></expr></argument>,
<argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_util</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>color_old</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>a_util</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>color_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a_util</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>, <argument><expr><name><name>b_util</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>color_commit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name>color_commit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>status</name> <operator>==</operator> <literal type="char">'!'</literal></expr> ?</condition><then> <expr><name>color_old</name></expr> </then><else>: <expr><name>color</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a_util</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%*s: %s "</literal></expr></argument>, <argument><expr><name>patch_no_width</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>dashes</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%*d: %s "</literal></expr></argument>, <argument><expr><name>patch_no_width</name></expr></argument>, <argument><expr><name><name>a_util</name><operator>-&gt;</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a_util</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>color_reset</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>color_reset</name></expr></argument>, <argument><expr><name>color_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_util</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %*s: %s"</literal></expr></argument>, <argument><expr><name>patch_no_width</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>dashes</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %*d: %s"</literal></expr></argument>, <argument><expr><name>patch_no_width</name></expr></argument>, <argument><expr><name><name>b_util</name><operator>-&gt;</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b_util</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>lookup_commit_reference</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>color_reset</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pp_commit_easy</name><argument_list>(<argument><expr><name>CMIT_FMT_ONELINE</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>color_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>diffopt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>userdiff_driver</name></name></type> <name>section_headers</name> <init>= <expr><block>{
<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <block>{ <expr><literal type="string">"^ ##(.*) ##$\n"</literal>
<literal type="string">"^.?@@ (.*)$"</literal></expr>, <expr><name>REG_EXTENDED</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>get_filespec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><call><name>alloc_filespec</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0100644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>should_munmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>is_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <operator>&amp;</operator><name>section_headers</name></expr>;</expr_stmt>

<return>return <expr><name>spec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>patch_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>diff_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>,
<argument><expr><call><name>get_filespec</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_filespec</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_flush</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>, <decl><type ref="prev"/><name>dashes</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>patch_no_width</name> <init>= <expr><call><name>decimal_width</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>nr</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>









<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_util</name></name> <modifier>*</modifier></type><name>a_util</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_util</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a_util</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b_util</name> <operator>=</operator> <ternary><condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>util</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>


<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name><name>a_util</name><operator>-&gt;</operator><name>shown</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a_util</name> <operator>=</operator> <ternary><condition><expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name><name>a_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>output_pair_header</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>patch_no_width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dashes</name></expr></argument>, <argument><expr><name>a_util</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name><name>b_util</name><operator>-&gt;</operator><name>matching</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>output_pair_header</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>patch_no_width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dashes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>b_util</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_util</name> <operator>=</operator> <ternary><condition><expr><operator>++</operator><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>util</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_util</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>b_util</name><operator>-&gt;</operator><name>matching</name></name></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_pair_header</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>patch_no_width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dashes</name></expr></argument>, <argument><expr><name>a_util</name></expr></argument>, <argument><expr><name>b_util</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>diffopt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_NO_OUTPUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>patch_diff</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>b_util</name><operator>-&gt;</operator><name>matching</name></name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name>diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>a_util</name><operator>-&gt;</operator><name>shown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>output_prefix_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_range_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>range1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>range2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>creation_factor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dual_color</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>other_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>branch1</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>branch2</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_patches</name><argument_list>(<argument><expr><name>range1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch1</name></expr></argument>, <argument><expr><name>other_arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not parse log for '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>range1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <call><name>read_patches</name><argument_list>(<argument><expr><name>range2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch2</name></expr></argument>, <argument><expr><name>other_arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not parse log for '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>range2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>indent</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diffopt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>diffopt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>.</operator><name>output_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <name>DIFF_FORMAT_PATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>flags</name><operator>.</operator><name>suppress_diff_headers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>flags</name><operator>.</operator><name>dual_color_diffed_diffs</name></name> <operator>=</operator> <name>dual_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>flags</name><operator>.</operator><name>suppress_hunk_header_line_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>output_prefix</name></name> <operator>=</operator> <name>output_prefix_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>output_prefix_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>indent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_setup_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_exact_matches</name><argument_list>(<argument><expr><operator>&amp;</operator><name>branch1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_correspondences</name><argument_list>(<argument><expr><operator>&amp;</operator><name>branch1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch2</name></expr></argument>, <argument><expr><name>creation_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><operator>&amp;</operator><name>branch1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>branch1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>branch2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
