<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\remote.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>REMOTE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOTE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refspec.h"</cpp:file></cpp:include>









<enum>enum <block>{
<decl><name>REMOTE_UNCONFIGURED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>REMOTE_CONFIG</name></decl>,
<decl><name>REMOTE_REMOTES</name></decl>,
<decl><name>REMOTE_BRANCHES</name></decl>
}</block>;</enum>

<struct>struct <name>remote</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>origin</name></decl>, <decl><type ref="prev"/><name>configured_in_repo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>foreign_vcs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>url_nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>url_alloc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pushurl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pushurl_nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pushurl_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>refspec</name></name></type> <name>push</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>refspec</name></name></type> <name>fetch</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>int</name></type> <name>fetch_tags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_default_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mirror</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prune</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prune_tags</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>receivepack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uploadpack</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>http_proxy</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>http_proxy_authmethod</name></decl>;</decl_stmt>
}</block>;</struct>






<function_decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>pushremote_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>remote_is_configured</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_repo</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> <name>each_remote_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>int</name></type> <name>for_each_remote</name><parameter_list>(<parameter><decl><type><name>each_remote_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>remote_has_url</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>ref</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>old_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>new_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>old_oid_expect</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>
<name>force</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>forced_update</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>expect_old_sha1</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>exact_oid</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>deletion</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>REF_NOT_MATCHED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>REF_MATCHED</name></decl>,
<decl><name>REF_UNADVERTISED_NOT_ALLOWED</name></decl>
}</block> <decl><name>match_status</name></decl>;</enum>







<enum>enum <block>{
<decl><name>FETCH_HEAD_MERGE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>FETCH_HEAD_NOT_FOR_MERGE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FETCH_HEAD_IGNORE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block> <decl><name>fetch_head_status</name></decl>;</enum>

<enum>enum <block>{
<decl><name>REF_STATUS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>REF_STATUS_OK</name></decl>,
<decl><name>REF_STATUS_REJECT_NONFASTFORWARD</name></decl>,
<decl><name>REF_STATUS_REJECT_ALREADY_EXISTS</name></decl>,
<decl><name>REF_STATUS_REJECT_NODELETE</name></decl>,
<decl><name>REF_STATUS_REJECT_FETCH_FIRST</name></decl>,
<decl><name>REF_STATUS_REJECT_NEEDS_FORCE</name></decl>,
<decl><name>REF_STATUS_REJECT_STALE</name></decl>,
<decl><name>REF_STATUS_REJECT_SHALLOW</name></decl>,
<decl><name>REF_STATUS_UPTODATE</name></decl>,
<decl><name>REF_STATUS_REMOTE_REJECT</name></decl>,
<decl><name>REF_STATUS_EXPECTING_REPORT</name></decl>,
<decl><name>REF_STATUS_ATOMIC_PUSH_FAILED</name></decl>
}</block> <decl><name>status</name></decl>;</enum>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>remote_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>peer_ref</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_NORMAL</name></cpp:macro> <cpp:value>(1u &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_HEADS</name></cpp:macro> <cpp:value>(1u &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_TAGS</name></cpp:macro> <cpp:value>(1u &lt;&lt; 2)</cpp:value></cpp:define>

<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>find_ref_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>alloc_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>copy_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>copy_ref_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sort_ref_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>count_refspec_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>matched_ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ref_compare_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_ref_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>free_one_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>oid_array</name>;</struct_decl>
<struct_decl>struct <name>packet_reader</name>;</struct_decl>
<struct_decl>struct <name>argv_array</name>;</struct_decl>
<struct_decl>struct <name>string_list</name>;</struct_decl>
<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>get_remote_heads</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>extra_have</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>shallow_points</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>get_remote_refs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd_out</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_push</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>ref_prefixes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>server_options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>resolve_remote_symref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref_remove_duplicates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref_map</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>query_refspecs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>apply_refspecs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_push_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>match_push_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>set_ref_status_for_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force_update</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>get_fetch_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>refspec</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>get_remote_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>remote_find_tracking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>refspec</name></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>branch</name> <block>{


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pushremote_name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>merge_name</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>merge</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>merge_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>merge_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_tracking_ref</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_for_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>explicit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pushremote_for_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>explicit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_ref_for_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_push</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>branch_has_merge_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>branch_merge_matches</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>branch_get_upstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>branch_get_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>


<enum>enum <name>match_refs_flags</name> <block>{
<decl><name>MATCH_REFS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MATCH_REFS_ALL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>MATCH_REFS_MIRROR</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>MATCH_REFS_PRUNE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>MATCH_REFS_FOLLOW_TAGS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>


<enum>enum <name>ahead_behind_flags</name> <block>{
<decl><name>AHEAD_BEHIND_UNSPECIFIED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>AHEAD_BEHIND_QUICK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>AHEAD_BEHIND_FULL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
}</block>;</enum>


<function_decl><type><name>int</name></type> <name>stat_tracking_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_ours</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_theirs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>upstream_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_push</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ahead_behind_flags</name></name></type> <name>abf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>format_tracking_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ahead_behind_flags</name></name></type> <name>abf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>get_local_heads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>guess_remote_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>all</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>get_stale_heads</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>fetch_map</name></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAS_OPT_NAME</name></cpp:macro> <cpp:value>"force-with-lease"</cpp:value></cpp:define>

<struct>struct <name>push_cas_option</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>use_tracking_for_rest</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<struct>struct <name>push_cas</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>expect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>use_tracking</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>entry</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alloc</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>parseopt_push_cas_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_empty_cas</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>push_cas_option</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>apply_push_cas</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>push_cas_option</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
