<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\revision.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"grep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"reflog-walk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"patch-ids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decorate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log-tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line-log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mailmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-slab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache-tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bisect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"worktree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-reach.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prio-queue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>show_early_output_fn_t</name></type> <name>show_early_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term_bad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term_good</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>implement_shared_commit_slab</name><argument_list>(<argument><expr><name>revision_sources</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>show_object_with_name</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_blob_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>blob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blob</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>blob</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_tree_contents_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_tree_gently</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>object_type</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_TREE</name></expr>:</case>
<expr_stmt><expr><call><name>mark_tree_uninteresting</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>lookup_tree</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OBJ_BLOB</name></expr>:</case>
<expr_stmt><expr><call><name>mark_blob_uninteresting</name><argument_list>(<argument><expr><call><name>lookup_blob</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>





<expr_stmt><expr><call><name>free_tree_buffer</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mark_tree_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mark_tree_contents_uninteresting</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>path_and_oids_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>trees</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>path_and_oids_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hashmap_cmp_fn_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>eptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry_or_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>path_and_oids_entry</name></name> <modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>eptr</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>path_and_oids_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>entry_or_key</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>path_and_oids_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>paths_and_oids_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>path_and_oids_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>paths_and_oids_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>path_and_oids_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<macro><name>hashmap_for_each_entry</name><argument_list>(<argument>map</argument>, <argument>&amp;iter</argument>, <argument>entry</argument>, <argument>ent</argument> )</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>trees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>hashmap_free_entries</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr>struct <name>path_and_oids_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>paths_and_oids_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name>strhash</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>path_and_oids_entry</name></name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>path_and_oids_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>.</operator><name>ent</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>key</name><operator>.</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidset_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>.</operator><name>trees</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hashmap_get_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>path_and_oids_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidset_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>trees</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_put</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>trees</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_children_by_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_tree_gently</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>object_type</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OBJ_TREE</name></expr>:</case>
<expr_stmt><expr><call><name>paths_and_oids_insert</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>lookup_tree</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OBJ_BLOB</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>lookup_blob</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free_tree_buffer</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mark_trees_uninteresting_sparse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>trees</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>has_interesting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>has_uninteresting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>map_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>path_and_oids_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oidset_iter_init</name><argument_list>(<argument><expr><name>trees</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>!</operator><name>has_interesting</name> <operator>||</operator> <operator>!</operator><name>has_uninteresting</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>oid</name> <operator>=</operator> <call><name>oidset_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>lookup_tree</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_uninteresting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>has_interesting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_uninteresting</name> <operator>||</operator> <operator>!</operator><name>has_interesting</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>paths_and_oids_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidset_iter_init</name><argument_list>(<argument><expr><name>trees</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>oid</name> <operator>=</operator> <call><name>oidset_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>lookup_tree</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_children_by_path</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<macro><name>hashmap_for_each_entry</name><argument_list>(<argument>&amp;map</argument>, <argument>&amp;map_iter</argument>, <argument>entry</argument>, <argument>ent</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>mark_trees_uninteresting_sparse</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>trees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>paths_and_oids_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>commit_stack</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMIT_STACK_INIT</name></cpp:macro> <cpp:value>{ NULL, 0, 0 }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>commit_stack_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>stack</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit_stack_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>stack</name><operator>-&gt;</operator><name>nr</name></name></expr> ?</condition><then> <expr><name><name>stack</name><operator>-&gt;</operator><name>items</name><index>[<expr><operator>--</operator><name><name>stack</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>commit_stack_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_one_parent_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit_stack</name></name> <modifier>*</modifier></type><name>pending</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt>









<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_stack_push</name><argument_list>(<argument><expr><name>pending</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mark_parents_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_stack</name></name></type> <name>pending</name> <init>= <expr><name>COMMIT_STACK_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_one_parent_uninteresting</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><name><name>pending</name><operator>.</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_one_parent_uninteresting</name><argument_list>(<argument><expr><call><name>commit_stack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pending</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>commit_stack_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pending_object_with_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>interpret_branch_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_reflog_for_walk</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>buf</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add_object_array_with_path</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pending_object_with_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_pending_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_pending_object_with_mode</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>S_IFINVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_head_to_pending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>get_reference</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>oid_object_info</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>lookup_commit</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>repo_parse_commit</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>object</name> <operator>=</operator> <operator>(</operator>struct <name>object</name> <operator>*</operator><operator>)</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>object</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name> <operator>&amp;&amp;</operator> <call><name>is_promisor_object</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad object %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>object</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_pending_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><call><name>get_reference</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>handle_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_array_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>mode</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name> <init>= <expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>




<while>while <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tag</name></name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><operator>(</operator>struct <name>tag</name> <operator>*</operator><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><call><name>get_tagged_oid</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing_links</name></name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name> <operator>&amp;&amp;</operator>
<call><name>is_promisor_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tag</name><operator>-&gt;</operator><name>tagged</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad object %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tag</name><operator>-&gt;</operator><name>tagged</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>





<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to parse commit %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mark_parents_uninteresting</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>||</operator> <operator>!</operator><call><name>generation_numbers_enabled</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>sources</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>revision_sources_at</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>sources</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>slot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>commit</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><operator>(</operator>struct <name>tree</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mark_tree_contents_uninteresting</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s is unknown object"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>everybody_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>interesting_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>orig</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>interesting_cache</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><operator>*</operator><name>interesting_cache</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>interesting_cache</name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>relevant_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>UNINTERESTING</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>one_relevant_parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>orig</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>relevant</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>orig</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name> <operator>||</operator> <operator>!</operator><name><name>orig</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>orig</name><operator>-&gt;</operator><name>item</name></name></expr>;</return></block_content></block></if></if_stmt>










<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>relevant_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>relevant</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>relevant</name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>relevant</name></expr>;</return>
</block_content>}</block></function>


















<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tree_difference</name> <init>= <expr><name>REV_TREE_SAME</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>file_add_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>addremove</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>oid_valid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fullpath</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dirty_submodule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><ternary><condition><expr><name>addremove</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><name>REV_TREE_NEW</name></expr> </then><else>: <expr><name>REV_TREE_OLD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>change_fn_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tree_difference</name> <operator>|=</operator> <name>diff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>remove_empty_trees</name></name> <operator>||</operator> <name>tree_difference</name> <operator>!=</operator> <name>REV_TREE_NEW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>file_change</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>old_mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_mode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>old_oid_valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_oid_valid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fullpath</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>old_dirty_submodule</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_dirty_submodule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>tree_difference</name> <operator>=</operator> <name>REV_TREE_DIFFERENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rev_compare_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>t1</name> <init>= <expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>t2</name> <init>= <expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REV_TREE_NEW</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REV_TREE_OLD</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_by_decoration</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>get_name_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REV_TREE_DIFFERENT</name></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REV_TREE_SAME</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tree_difference</name> <operator>=</operator> <name>REV_TREE_SAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>diff_tree_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t2</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>pruning</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>REV_TREE_DIFFERENT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>tree_difference</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rev_same_tree_as_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>t1</name> <init>= <expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tree_difference</name> <operator>=</operator> <name>REV_TREE_SAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>diff_tree_oid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>pruning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>tree_difference</name> <operator>==</operator> <name>REV_TREE_SAME</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>treesame_state</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nparents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>treesame</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>treesame_state</name></name> <modifier>*</modifier></type><name>initialise_treesame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><call><name>commit_list_count</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>treesame_state</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>st_add</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>nparents</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>treesame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>compact_treesame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nth_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>treesame_state</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_same</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>nth_parent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"compact_treesame %u"</literal></expr></argument>, <argument><expr><name>nth_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>old_same</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rev_same_tree_as_empty</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TREESAME</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TREESAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>old_same</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>treesame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name> <operator>||</operator> <name>nth_parent</name> <operator>&gt;=</operator> <name><name>st</name><operator>-&gt;</operator><name>nparents</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"compact_treesame %u"</literal></expr></argument>, <argument><expr><name>nth_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_same</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>treesame</name><index>[<expr><name>nth_parent</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>treesame</name></name> <operator>+</operator> <name>nth_parent</name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>treesame</name></name> <operator>+</operator> <name>nth_parent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>nparents</name></name> <operator>-</operator> <name>nth_parent</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>st</name><operator>-&gt;</operator><name>nparents</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"compact_treesame parents mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>treesame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>dense</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TREESAME</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TREESAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>add_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>treesame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>old_same</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>update_treesame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name> <operator>&amp;&amp;</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>treesame_state</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>relevant_parents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>relevant_change</name></decl>, <decl><type ref="prev"/><name>irrelevant_change</name></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>treesame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"update_treesame %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>relevant_parents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>relevant_change</name> <operator>=</operator> <name>irrelevant_change</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>relevant_commit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>relevant_change</name> <operator>|=</operator> <operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>treesame</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>relevant_parents</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>irrelevant_change</name> <operator>|=</operator> <operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>treesame</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>relevant_parents</name></expr> ?</condition><then> <expr><name>relevant_change</name></expr> </then><else>: <expr><name>irrelevant_change</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TREESAME</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TREESAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>limiting_can_increase_treesame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<return>return <expr><name><name>revs</name><operator>-&gt;</operator><name>prune</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>dense</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>try_to_simplify_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>treesame_state</name></name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>relevant_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>irrelevant_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>relevant_parents</name></decl>, <decl><type ref="prev"/><name>nth_parent</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>prune</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rev_same_tree_as_empty</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TREESAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>dense</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr><operator>,</operator> <expr><name>nth_parent</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>relevant_parents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><operator>(</operator><name>parent</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>nth_parent</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>relevant_commit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>relevant_parents</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nth_parent</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>treesame</name><operator>.</operator><name>name</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>initialise_treesame</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>irrelevant_change</name> <operator>||</operator> <name>relevant_change</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>treesame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_commit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot simplify commit %s (because of %s)"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>rev_compare_tree</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REV_TREE_SAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>||</operator> <operator>!</operator><call><name>relevant_commit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>treesame</name><index>[<expr><name>nth_parent</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TREESAME</name></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>REV_TREE_NEW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>remove_empty_trees</name></name> <operator>&amp;&amp;</operator>
<call><name>rev_same_tree_as_empty</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><call><name>parse_commit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot simplify commit %s (invalid %s)"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parents</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>REV_TREE_OLD</name></expr>:</case>
<case>case <expr><name>REV_TREE_DIFFERENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>relevant_commit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>relevant_change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>irrelevant_change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad tree compare for commit %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>











<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>relevant_parents</name></expr> ?</condition><then> <expr><operator>!</operator><name>relevant_change</name></expr> </then><else>: <expr><operator>!</operator><name>irrelevant_change</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TREESAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>left_flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ADDED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>include_check</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>revs</name><operator>-&gt;</operator><name>include_check</name></name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>include_check_data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_commit_gently</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_parents_uninteresting</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SEEN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_list_insert_by_date</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>try_to_simplify_commit</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>left_flag</name> <operator>=</operator> <operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>parent</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>parent</name></expr>;</condition> <incr><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gently</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing_links</name></name> <operator>||</operator>
<name><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_commit_gently</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>gently</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name> <operator>&amp;&amp;</operator>
<call><name>is_promisor_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>sources</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>revision_sources_at</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>sources</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>slot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <operator>*</operator><call><name>revision_sources_at</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>sources</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>left_flag</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SEEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_list_insert_by_date</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cherry_pick_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>right_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_ids</name></name></type> <name>ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cherry_flag</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>BOUNDARY</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>left_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>right_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left_count</name> <operator>||</operator> <operator>!</operator><name>right_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>left_first</name> <operator>=</operator> <name>left_count</name> <operator>&lt;</operator> <name>right_count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_patch_ids</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ids</name><operator>.</operator><name>diffopts</name><operator>.</operator><name>pathspec</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pathspec</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>BOUNDARY</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>left_first</name> <operator>!=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_commit_patch_id</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>cherry_flag</name> <operator>=</operator> <ternary><condition><expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_mark</name></name></expr> ?</condition><then> <expr><name>PATCHSAME</name></expr> </then><else>: <expr><name>SHOWN</name></expr></else></ternary></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>patch_id</name></name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>BOUNDARY</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>left_first</name> <operator>==</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>has_commit_patch_id</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>cherry_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>cherry_flag</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free_patch_ids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOP</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>still_interesting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slop</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>interesting_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>date</name> <operator>&lt;=</operator> <name><name>src</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SLOP</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>everybody_uninteresting</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>interesting_cache</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SLOP</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><name>slop</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>limit_to_ancestry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>rlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>made_progress</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>bottom</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TMP_MARK</name></expr>;</expr_stmt></block_content></block></for>





<do>do <block>{<block_content>
<expr_stmt><expr><name>made_progress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>rlist</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>TMP_MARK</name> <operator>|</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>parents</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init>
<condition><expr><name>parents</name></expr>;</condition>
<incr><expr><name>parents</name> <operator>=</operator> <name><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TMP_MARK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TMP_MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>made_progress</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><name>made_progress</name></expr>)</condition>;</do>










<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TMP_MARK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TMP_MARK</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>bottom</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TMP_MARK</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name>rlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>collect_bottom_commits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>elem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bottom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>elem</name></expr>;</condition> <incr><expr><name>elem</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>bottom</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>limit_left_right</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>right_only</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else 
if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>limit_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>slop</name> <init>= <expr><name>SLOP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>date</name> <init>= <expr><name>TIME_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>newlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>newlist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>bottom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>interesting_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>ancestry_path</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bottom</name> <operator>=</operator> <call><name>collect_bottom_commits</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bottom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--ancestry-path given but there are no bottom commits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><call><name>pop_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>show_early_output_fn_t</name></type> <name>show</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>commit</name> <operator>==</operator> <name>interesting_cache</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>interesting_cache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>process_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mark_parents_uninteresting</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slop</name> <operator>=</operator> <call><name>still_interesting</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>slop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interesting_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slop</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>date</name></name> <operator>&gt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>date</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>show</name> <operator>=</operator> <name>show_early_output</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>show</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>newlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>show_early_output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_pick</name></name> <operator>||</operator> <name><name>revs</name><operator>-&gt;</operator><name>cherry_mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cherry_pick_list</name><argument_list>(<argument><expr><name>newlist</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>left_only</name></name> <operator>||</operator> <name><name>revs</name><operator>-&gt;</operator><name>right_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>limit_left_right</name><argument_list>(<argument><expr><name>newlist</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>limit_to_ancestry</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>newlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>limiting_can_increase_treesame</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name>newlist</name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>TREESAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_treesame</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>add_rev_cmdline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_cmdline_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>cmdline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nr</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>rev</name></name></expr></argument>, <argument><expr><name>nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>rev</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>rev</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>rev</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>whence</name> <operator>=</operator> <name>whence</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>rev</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_rev_cmdline_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>commit_list</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>commit_list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><operator>&amp;</operator><name><name>commit_list</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>whence</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>commit_list</name> <operator>=</operator> <name><name>commit_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<struct>struct <name>all_refs_cb</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>all_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warned_bad_reflog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>all_revs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_for_errormsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>ref_excluded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>ref_excludes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref_excludes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>ref_excludes</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wildmatch</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_one_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ref_excluded</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>get_reference</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_revs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_revs</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>REV_CMD_REF</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_oid</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_revs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_all_refs_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>all_refs_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>all_revs</name></name> <operator>=</operator> <name>revs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>all_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>rev_input_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>wt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_ref_exclusion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_excludes_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ref_excludes_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>*</operator><name>ref_excludes_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>ref_excludes_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ref_excludes_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_ref_exclusion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_excludes_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exclude</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ref_excludes_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ref_excludes_p</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>ref_excludes_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ref_excludes_p</name><operator>)</operator><operator>-&gt;</operator><name>strdup_strings</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>*</operator><name>ref_excludes_p</name></expr></argument>, <argument><expr><name>exclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>for_each</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>each_ref_fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>refs</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_all_refs_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>handle_one_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_one_reflog_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>cb</name><operator>-&gt;</operator><name>all_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>all_revs</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>warned_bad_reflog</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"reflog of '%s' references pruned commits"</literal></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>name_for_errormsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>warned_bad_reflog</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_one_reflog_ent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>ooid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>noid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>email</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>handle_one_reflog_commit</name><argument_list>(<argument><expr><name>ooid</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_one_reflog_commit</name><argument_list>(<argument><expr><name>noid</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_one_reflog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname_in_wt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>refname</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>warned_bad_reflog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_worktree_ref</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>wt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>, <argument><expr><name>refname_in_wt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>name_for_errormsg</name></name> <operator>=</operator> <name><name>refname</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refs_for_each_reflog_ent</name><argument_list>(<argument><expr><call><name>get_main_ref_store</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>refname</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name>handle_one_reflog_ent</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_other_reflogs_to_pending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>all_refs_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>worktrees</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>worktrees</name> <operator>=</operator> <call><name>get_worktrees</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>worktrees</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wt</name><operator>-&gt;</operator><name>is_current</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>wt</name></name> <operator>=</operator> <name>wt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refs_for_each_reflog</name><argument_list>(<argument><expr><call><name>get_worktree_ref_store</name><argument_list>(<argument><expr><name>wt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>handle_one_reflog</name></expr></argument>,
<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free_worktrees</name><argument_list>(<argument><expr><name>worktrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_reflogs_to_pending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>all_revs</name></name> <operator>=</operator> <name>revs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>all_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>wt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_reflog</name><argument_list>(<argument><expr><name>handle_one_reflog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>single_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_other_reflogs_to_pending</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_cache_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_tree</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>baselen</name> <init>= <expr><name><name>path</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>entry_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>lookup_tree</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><literal type="number">040000</literal></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>subtree_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_tree_sub</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>down</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>baselen</name></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_cache_tree</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>cache_tree</name></name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>baselen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_add_index_objects_to_pending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>blob</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blob</name> <operator>=</operator> <call><name>lookup_blob</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blob</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to add index blob to traversal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>blob</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>blob</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>istate</name><operator>-&gt;</operator><name>cache_tree</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_cache_tree</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_tree</name></name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_index_objects_to_pending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>worktrees</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_add_index_objects_to_pending</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>single_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>worktrees</name> <operator>=</operator> <call><name>get_worktrees</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>worktrees</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name></type> <name>istate</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wt</name><operator>-&gt;</operator><name>is_current</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>read_index_from</name><argument_list>(<argument><expr><operator>&amp;</operator><name>istate</name></expr></argument>,
<argument><expr><call><name>worktree_git_path</name><argument_list>(<argument><expr><name>wt</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_worktree_git_dir</name><argument_list>(<argument><expr><name>wt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_add_index_objects_to_pending</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>istate</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>discard_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free_worktrees</name><argument_list>(<argument><expr><name>worktrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>add_alternate_refs_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_one_alternate_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">".alternate"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>add_alternate_refs_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>vdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>get_reference</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>REV_CMD_REV</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_alternate_refs_to_pending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>add_alternate_refs_data</name></name></type> <name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>revs</name></name> <operator>=</operator> <name>revs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_alternate_ref</name><argument_list>(<argument><expr><name>add_one_alternate_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_parents_only</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>exclude_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>^=</operator> <name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_committish</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>get_reference</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>ignore_missing</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_TAG</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator>struct <name>tag</name><operator>*</operator><operator>)</operator><name>it</name><operator>)</operator><operator>-&gt;</operator><name>tagged</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>tag</name><operator>*</operator><operator>)</operator><name>it</name><operator>)</operator><operator>-&gt;</operator><name><name>tagged</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>it</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exclude_parent</name> <operator>&amp;&amp;</operator>
<name>exclude_parent</name> <operator>&gt;</operator> <call><name>commit_list_count</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>parents</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr><operator>,</operator> <expr><name>parent_number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><name>parents</name></expr>;</condition>
<incr><expr><name>parents</name> <operator>=</operator> <name><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>parent_number</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exclude_parent</name> <operator>&amp;&amp;</operator> <name>parent_number</name> <operator>!=</operator> <name>exclude_parent</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <operator>&amp;</operator><name><name>parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>arg_</name></expr></argument>, <argument><expr><name>REV_CMD_PARENTS_ONLY</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>repo_init_revisions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>revs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <name>DEFAULT_ABBREV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_merges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>repo</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>flags</name><operator>.</operator><name>quick</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>add_remove</name></name> <operator>=</operator> <name>file_add_remove</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>change</name></name> <operator>=</operator> <name>file_change</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>change_fn_data</name></name> <operator>=</operator> <name>revs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>=</operator> <name>REV_SORT_IN_GRAPH_ORDER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>dense</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>skip_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>commit_format</name></name> <operator>=</operator> <name>CMIT_FMT_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log_default</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_grep_defaults</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grep_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>status_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>repo_diff_setup</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>prefix_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_display_notes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pending_commit_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>commit_list</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>commit_list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><operator>&amp;</operator><name><name>commit_list</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>commit_list</name> <operator>=</operator> <name><name>commit_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_show_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>bases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prune</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>prune_num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--merge without HEAD?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>lookup_commit_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"MERGE_HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--merge without MERGE_HEAD?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>lookup_commit_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="string">"MERGE_HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>head</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>other</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"MERGE_HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bases</name> <operator>=</operator> <call><name>get_merge_bases</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>bases</name></expr></argument>, <argument><expr><name>REV_CMD_MERGE_BASE</name></expr></argument>, <argument><expr><name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_commit_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>bases</name></expr></argument>, <argument><expr><name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name>bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SYMMETRIC_LEFT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ce_path_match</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prune_num</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name>prune</name></expr></argument>, <argument><expr><name>prune_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prune</name><index>[<expr><name>prune_num</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prune</name><index>[<expr><name>prune_num</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>ce_same_name</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>, <argument><expr><name>PATHSPEC_ALL_MAGIC</name> <operator>&amp;</operator> <operator>~</operator><name>PATHSPEC_LITERAL</name></expr></argument>,
<argument><expr><name>PATHSPEC_PREFER_FULL</name> <operator>|</operator> <name>PATHSPEC_LITERAL_PATH</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>prune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dotdot_missing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dotdot</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symmetric</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dotdot</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><ternary><condition><expr><name>symmetric</name></expr>
?</condition><then> <expr><literal type="string">"Invalid symmetric difference expression %s"</literal></expr>
</then><else>: <expr><literal type="string">"Invalid revision range %s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_dotdot_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dotdot</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cant_be_filename</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_context</name></name> <modifier>*</modifier></type><name>a_oc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_context</name></name> <modifier>*</modifier></type><name>b_oc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>a_oid</name></decl>, <decl><type ref="prev"/><name>b_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>a_obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a_flags</name></decl>, <decl><type ref="prev"/><name>b_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symmetric</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags_exclude</name> <init>= <expr><name>flags</name> <operator>^</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oc_flags</name> <init>= <expr><name>GET_OID_COMMITTISH</name> <operator>|</operator> <name>GET_OID_RECORD_PATH</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a_name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>a_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a_name</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_name</name> <operator>=</operator> <name>dotdot</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b_name</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symmetric</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b_name</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>b_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_name</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_with_context</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>, <argument><expr><name>oc_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a_oid</name></expr></argument>, <argument><expr><name>a_oc</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>get_oid_with_context</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>b_name</name></expr></argument>, <argument><expr><name>oc_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_oid</name></expr></argument>, <argument><expr><name>b_oc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cant_be_filename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dotdot</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_non_filename</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dotdot</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a_obj</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_obj</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a_obj</name> <operator>||</operator> <operator>!</operator><name>b_obj</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>dotdot_missing</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dotdot</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>symmetric</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symmetric</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b_flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a_flags</name> <operator>=</operator> <name>flags_exclude</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>exclude</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lookup_commit_reference</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a_obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lookup_commit_reference</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b_obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>dotdot_missing</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dotdot</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>symmetric</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exclude</name> <operator>=</operator> <call><name>get_merge_bases</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>exclude</name></expr></argument>, <argument><expr><name>REV_CMD_MERGE_BASE</name></expr></argument>,
<argument><expr><name>flags_exclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_commit_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>exclude</name></expr></argument>, <argument><expr><name>flags_exclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name>exclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a_flags</name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name>SYMMETRIC_LEFT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>a_obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>a_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b_obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>b_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>a_obj</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>, <argument><expr><name>REV_CMD_LEFT</name></expr></argument>, <argument><expr><name>a_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>b_obj</name></expr></argument>, <argument><expr><name>b_name</name></expr></argument>, <argument><expr><name>REV_CMD_RIGHT</name></expr></argument>, <argument><expr><name>b_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>a_obj</name></expr></argument>, <argument><expr><name>a_name</name></expr></argument>, <argument><expr><name><name>a_oc</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>a_oc</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>b_obj</name></expr></argument>, <argument><expr><name>b_name</name></expr></argument>, <argument><expr><name><name>b_oc</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>b_oc</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_dotdot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cant_be_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_context</name></name></type> <name>a_oc</name></decl>, <decl><type ref="prev"/><name>b_oc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dotdot</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dotdot</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a_oc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a_oc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_oc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b_oc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dotdot</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handle_dotdot_1</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dotdot</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>cant_be_filename</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>a_oc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dotdot</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a_oc</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b_oc</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>handle_revision_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>revarg_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_context</name></name></type> <name>oc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cant_be_filename</name> <init>= <expr><name>revarg_opt</name> <operator>&amp;</operator> <name>REVARG_CANNOT_BE_FILENAME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>get_sha1_flags</name> <init>= <expr><name>GET_OID_RECORD_PATH</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr> ?</condition><then> <expr><name>flags</name> <operator>|</operator> <name>BOTTOM</name></expr> </then><else>: <expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>BOTTOM</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cant_be_filename</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handle_dotdot</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>revarg_opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"^@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mark</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mark</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_parents_only</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mark</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"^!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mark</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mark</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_parents_only</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>flags</name> <operator>^</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mark</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"^-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mark</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exclude_parent</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mark</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>exclude_parent</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>mark</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>!</operator><name>exclude_parent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mark</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_parents_only</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>flags</name> <operator>^</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name><operator>)</operator></expr></argument>, <argument><expr><name>exclude_parent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mark</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>local_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>local_flags</name> <operator>=</operator> <name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>revarg_opt</name> <operator>&amp;</operator> <name>REVARG_COMMITTISH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>get_sha1_flags</name> <operator>|=</operator> <name>GET_OID_COMMITTISH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_with_context</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>get_sha1_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cant_be_filename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verify_non_filename</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>get_reference</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>flags</name> <operator>^</operator> <name>local_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_rev_cmdline</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>arg_</name></expr></argument>, <argument><expr><name>REV_CMD_REV</name></expr></argument>, <argument><expr><name>flags</name> <operator>^</operator> <name>local_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_path</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>oc</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>oc</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>oc</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_pathspec_from_stdin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>prune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>strbuf_getline</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>prune</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_revisions_from_stdin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>prune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_dashdash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_warning</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_warning</name> <operator>=</operator> <name>warn_on_object_refname_ambiguity</name></expr>;</expr_stmt>
<expr_stmt><expr><name>warn_on_object_refname_ambiguity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>strbuf_getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seen_dashdash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"options not supported in --stdin mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>handle_revision_arg</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>REVARG_CANNOT_BE_FILENAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad revision '%s'"</literal></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>seen_dashdash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_pathspec_from_stdin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>prune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>warn_on_object_refname_ambiguity</name> <operator>=</operator> <name>save_warning</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_grep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptn</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>grep_pat_token</name></name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>append_grep_pattern</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name></name></expr></argument>, <argument><expr><name>ptn</name></expr></argument>, <argument><expr><literal type="string">"command line"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_header_grep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>grep_header_field</name></name></type> <name>field</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>append_header_grep_pattern</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_message_grep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_grep</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>GREP_PATTERN_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_revision_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unkc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>unkv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>setup_revision_opt</name></name><modifier>*</modifier></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--all"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--branches"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--tags"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--remotes"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--reflog"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--not"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-walk"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--do-walk"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--bisect"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--glob="</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--indexed-objects"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--alternate-refs"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--exclude="</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--branches="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--tags="</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--remotes="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-walk="</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>unkv</name><index>[<expr><operator>(</operator><operator>*</operator><name>unkc</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"max-count"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>skip_count</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strtol_i</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"'%s': not a non-negative integer"</literal></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"-n requires an argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"max-age"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"since"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name> <operator>=</operator> <call><name>approxidate</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name> <operator>=</operator> <call><name>approxidate</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"min-age"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name> <operator>=</operator> <call><name>approxidate</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"until"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name> <operator>=</operator> <call><name>approxidate</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--first-parent"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--ancestry-path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>ancestry_path</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--walk-reflogs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_reflog_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--default"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"bad --default argument"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--merge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--topo-order"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>=</operator> <name>REV_SORT_IN_GRAPH_ORDER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--simplify-merges"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_merges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>rewrite_parents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--simplify-by-decoration"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_merges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>rewrite_parents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_by_decoration</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>prune</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--date-order"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>=</operator> <name>REV_SORT_BY_COMMIT_DATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--author-date-order"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>=</operator> <name>REV_SORT_BY_AUTHOR_DATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--early-output"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>early_output</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--early-output="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strtoul_ui</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>early_output</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"'%s': not a non-negative integer"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--parents"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>rewrite_parents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>print_parents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--dense"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>dense</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--sparse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>dense</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--in-commit-order"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tree_blobs_in_commit_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--remove-empty"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>remove_empty_trees</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--merges"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>min_parents</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-merges"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--min-parents="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>min_parents</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-min-parents"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>min_parents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--max-parents="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-max-parents"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--boundary"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>boundary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--left-right"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>left_right</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--left-only"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>right_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--left-only is incompatible with --right-only"</literal>
<literal type="string">" or --cherry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>left_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--right-only"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>left_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--right-only is incompatible with --left-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>right_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--cherry"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>left_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--cherry is incompatible with --left-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_mark</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>right_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--count"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--cherry-mark"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_pick</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--cherry-mark is incompatible with --cherry-pick"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_mark</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--cherry-pick"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--cherry-pick is incompatible with --cherry-mark"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_pick</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--objects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--objects-edge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>edge_hint</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--objects-edge-aggressive"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>edge_hint</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>edge_hint_aggressive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--verify-objects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tag_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>verify_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--unpacked"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>unpacked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--unpacked="</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--unpacked=&lt;packfile&gt; no longer supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>tree_in_recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_merges</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>dense_combined_merges</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>combine_merges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--combined-all-paths"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>combined_all_paths</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--cc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>dense_combined_merges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>combine_merges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>verbose_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--pretty"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>verbose_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pretty_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_commit_format</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--pretty="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--format="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>verbose_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pretty_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_commit_format</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--expand-tabs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-expand-tabs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--expand-tabs="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strtol_i</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"'%s': not a non-negative integer"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--show-notes"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--notes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>enable_default_display_notes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>show_notes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_notes_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--show-signature"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_signature</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-show-signature"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_signature</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--show-linear-break"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>break_bar</name></name> <operator>=</operator> <literal type="string">" .........."</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>track_linear</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>track_first_time</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--show-linear-break="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>break_bar</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>track_linear</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>track_first_time</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--show-notes="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--notes="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--show-notes="</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name><operator>.</operator><name>use_default_notes</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name><operator>.</operator><name>use_default_notes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>enable_ref_display_notes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>show_notes</name></name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_notes_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-notes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>disable_display_notes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>show_notes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_notes_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--standard-notes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_notes_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name><operator>.</operator><name>use_default_notes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-standard-notes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>notes_opt</name><operator>.</operator><name>use_default_notes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--oneline"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>verbose_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_commit_format</name><argument_list>(<argument><expr><literal type="string">"oneline"</literal></expr></argument>, <argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pretty_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--graph"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>rewrite_parents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>graph_init</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--root"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_root_diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-commit-id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_commit_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--always"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>always_show_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-abbrev"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--abbrev"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <name>DEFAULT_ABBREV</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--abbrev="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>&lt;</operator> <name>MINIMUM_ABBREV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <name>MINIMUM_ABBREV</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>&gt;</operator> <name>hexsz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <name>hexsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--abbrev-commit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev_commit_given</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-abbrev-commit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>abbrev_commit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--full-diff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>full_diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--full-history"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--relative-date"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>date_mode</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DATE_RELATIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>date_mode_explicit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_date_format</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>date_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>date_mode_explicit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--log-size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>show_log_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_header_grep</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>GREP_HEADER_AUTHOR</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"committer"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_header_grep</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>GREP_HEADER_COMMITTER</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"grep-reflog"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_header_grep</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>GREP_HEADER_REFLOG</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"grep"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_message_grep</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--grep-debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--basic-regexp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>pattern_type_option</name></name> <operator>=</operator> <name>GREP_PATTERN_TYPE_BRE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--extended-regexp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-E"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>pattern_type_option</name></name> <operator>=</operator> <name>GREP_PATTERN_TYPE_ERE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--regexp-ignore-case"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>ignore_case</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pickaxe_opts</name></name> <operator>|=</operator> <name>DIFF_PICKAXE_IGNORE_CASE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--fixed-strings"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-F"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>pattern_type_option</name></name> <operator>=</operator> <name>GREP_PATTERN_TYPE_FIXED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--perl-regexp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-P"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>pattern_type_option</name></name> <operator>=</operator> <name>GREP_PATTERN_TYPE_PCRE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--all-match"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>all_match</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--invert-grep"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>invert_grep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"encoding"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>git_log_output_encoding</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>git_log_output_encoding</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--reverse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>reverse</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--children"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"children"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--ignore-missing"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>allow_exclude_promisor_objects</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--exclude-promisor-objects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fetch_if_missing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"exclude_promisor_objects can only be used when fetch_if_missing is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opts</name> <init>= <expr><call><name>diff_opt_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>unkv</name><index>[<expr><operator>(</operator><operator>*</operator><name>unkc</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>opts</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>track_linear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--show-linear-break and --graph are incompatible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parse_revision_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>usagestr</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>handle_revision_opt</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cpidx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unknown option `%s'"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>usagestr</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argv</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>for_each_bisect_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name>each_ref_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>bisect_refs</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bisect_refs</name></expr></argument>, <argument><expr><literal type="string">"refs/bisect/%s"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>refs_for_each_fullref_in</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name><name>bisect_refs</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bisect_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>for_each_bad_bisect_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name>each_ref_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>for_each_bisect_ref</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>, <argument><expr><name>term_bad</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>for_each_good_bisect_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name>each_ref_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>for_each_bisect_ref</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>, <argument><expr><name>term_good</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_revision_pseudo_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>submodule</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argcount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>submodule</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>single_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"--single-worktree cannot be used together with submodule"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>get_submodule_ref_store</name><argument_list>(<argument><expr><name>submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>get_main_ref_store</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>











<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>, <argument><expr><name>refs_for_each_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>, <argument><expr><name>refs_head_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>single_worktree</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_all_refs_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>other_head_refs</name><argument_list>(<argument><expr><name>handle_one_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--branches"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>, <argument><expr><name>refs_for_each_branch_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--bisect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_bisect_terms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term_bad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term_good</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>, <argument><expr><name>for_each_bad_bisect_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name> <operator>^</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name><operator>)</operator></expr></argument>,
<argument><expr><name>for_each_good_bisect_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>bisect</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--tags"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>, <argument><expr><name>refs_for_each_tag_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--remotes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>, <argument><expr><name>refs_for_each_remote_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"glob"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_all_refs_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_glob_ref</name><argument_list>(<argument><expr><name>handle_one_ref</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argcount</name> <operator>=</operator> <call><name>parse_long_opt</name><argument_list>(<argument><expr><literal type="string">"exclude"</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>argcount</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--branches="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_all_refs_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_glob_ref_in</name><argument_list>(<argument><expr><name>handle_one_ref</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--tags="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_all_refs_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_glob_ref_in</name><argument_list>(<argument><expr><name>handle_one_ref</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--remotes="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>all_refs_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_all_refs_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_glob_ref_in</name><argument_list>(<argument><expr><name>handle_one_ref</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"refs/remotes/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_ref_exclusion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>ref_excludes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--reflog"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_reflogs_to_pending</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--indexed-objects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_index_objects_to_pending</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--alternate-refs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_alternate_refs_to_pending</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>*</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--not"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>^=</operator> <name>UNINTERESTING</name> <operator>|</operator> <name>BOTTOM</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-walk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <name>REVISION_WALK_NO_WALK_SORTED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-walk="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"sorted"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <name>REVISION_WALK_NO_WALK_SORTED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"unsorted"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <name>REVISION_WALK_NO_WALK_UNSORTED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid argument to --no-walk"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--do-walk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--single-worktree"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>single_worktree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>NORETURN</name></type> <name>diagnose_missing_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>refname</name> <operator>=</operator> <call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>refname</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REF_ISBROKEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"your current branch appears to be broken"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"your current branch '%s' does not have any commits yet"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>setup_revisions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>setup_revision_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>seen_dashdash</name></decl>, <decl><type ref="prev"/><name>got_rev_arg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>revarg_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>prune_data</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>submodule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_end_of_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>submodule</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>submodule</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>assume_dashdash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seen_dashdash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>seen_dashdash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune_data</name></expr></argument>, <argument><expr><name>argv</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>seen_dashdash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>revarg_opt</name> <operator>=</operator> <ternary><condition><expr><name>opt</name></expr> ?</condition><then> <expr><name><name>opt</name><operator>-&gt;</operator><name>revarg_opt</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seen_dashdash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>revarg_opt</name> <operator>|=</operator> <name>REVARG_CANNOT_BE_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>left</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seen_end_of_options</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>handle_revision_pseudo_opt</name><argument_list>(<argument><expr><name>submodule</name></expr></argument>,
<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>argv</name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>opts</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--stdin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>disable_stdin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>left</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>read_from_stdin</name></name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--stdin given twice?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>read_revisions_from_stdin</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prune_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--end-of-options"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seen_end_of_options</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>handle_revision_opt</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>argv</name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>opts</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>handle_revision_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>revarg_opt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>seen_dashdash</name> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad revision '%s'"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>verify_filename</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>argv_array_pushv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune_data</name></expr></argument>, <argument><expr><name>argv</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>got_rev_arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>prune_data</name><operator>.</operator><name>argc</name></name></expr>)</condition> <block>{<block_content>














<expr_stmt><expr><call><name>parse_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>prune_data</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prune_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name> <operator>=</operator> <ternary><condition><expr><name>opt</name></expr> ?</condition><then> <expr><name><name>opt</name><operator>-&gt;</operator><name>def</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>tweak</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>opt</name><operator>-&gt;</operator><name>tweak</name></name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>show_merge</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prepare_show_merge</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>rev_input_given</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_rev_arg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_context</name></name></type> <name>oc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_with_context</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diagnose_missing_default</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>get_reference</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pending_object_with_mode</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>def</name></name></expr></argument>, <argument><expr><name><name>oc</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>output_format</name></name> <operator>&amp;</operator> <operator>~</operator><name>DIFF_FORMAT_NO_OUTPUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KINDS_MASK</name><operator>)</operator> <operator>||</operator>
<name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>filter</name></name> <operator>||</operator>
<name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>objfind</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_history</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>generation_numbers_enabled</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>pruning</name><operator>.</operator><name>pathspec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>prune</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>full_diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pathspec</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>combine_merges</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_merges</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>combined_all_paths</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>combine_merges</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--combined-all-paths makes no sense without -c or --cc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>abbrev</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>abbrev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>line_level_traverse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_setup_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grep_commit_pattern_type</name><argument_list>(<argument><expr><name>GREP_PATTERN_TYPE_UNSPECIFIED</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_encoding_utf8</name><argument_list>(<argument><expr><call><name>get_log_output_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>ignore_locale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>compile_grep_patterns</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reverse</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine --reverse with --walk-reflogs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>limited</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine --walk-reflogs with history-limiting options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>rewrite_parents</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine --parents and --children"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reverse</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine --reverse with --graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine --walk-reflogs with --graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine --no-walk with --graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>use_reflog_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot use --grep-reflog without --walk-reflogs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>bisect</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--first-parent is incompatible with --bisect"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>line_level_traverse</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>output_format</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>DIFF_FORMAT_PATCH</name> <operator>|</operator> <name>DIFF_FORMAT_NO_OUTPUT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-L does not yet support diff formats besides -p and -s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>expand_tabs_in_log_default</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>left</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>add_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_duplicate_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>treesame_state</name></name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>treesame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>surviving_parents</name></decl>;</decl_stmt>


<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>surviving_parents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TMP_MARK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compact_treesame</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>surviving_parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TMP_MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>surviving_parents</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TMP_MARK</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>surviving_parents</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>merge_simplify_state</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>simplified</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>merge_simplify_state</name></name> <modifier>*</modifier></type><name>locate_simplify_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_simplify_state</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>merge_simplification</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>merge_simplification</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mark_redundant_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>reduce_heads</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>marked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>po</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pn</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>orig_cnt</name> <init>= <expr><call><name>commit_list_count</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>commit_list_count</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>po</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pn</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>po</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pn</name> <operator>&amp;&amp;</operator> <name><name>po</name><operator>-&gt;</operator><name>item</name></name> <operator>==</operator> <name><name>pn</name><operator>-&gt;</operator><name>item</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pn</name> <operator>=</operator> <name><name>pn</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>po</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TMP_MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>marked</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>po</name><operator>=</operator><name><name>po</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>cnt</name> <operator>||</operator> <name>cnt</name><operator>+</operator><name>marked</name> <operator>!=</operator> <name>orig_cnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"mark_redundant_parents %d %d %d %d"</literal></expr></argument>, <argument><expr><name>orig_cnt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>marked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>marked</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mark_treesame_root_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>marked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>parents</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TMP_MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>marked</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>marked</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>leave_one_treesame_to_parent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>treesame_state</name></name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>lookup_decoration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>treesame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>unmarked</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>marked</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>treesame</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TMP_MARK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>marked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>marked</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unmarked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unmarked</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


































<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unmarked</name> <operator>&amp;&amp;</operator> <name>marked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>marked</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TMP_MARK</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_marked_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nth_parent</name></decl>, <decl><type ref="prev"/><name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nth_parent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TMP_MARK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TMP_MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>removed</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compact_treesame</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>nth_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nth_parent</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>removed</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_treesame</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>nth_parent</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>simplify_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_simplify_state</name></name> <modifier>*</modifier></type><name>st</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>locate_simplify_state</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>simplified</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tail</name></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>simplified</name></name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>
<return>return <expr><name>tail</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pst</name> <operator>=</operator> <call><name>locate_simplify_state</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pst</name><operator>-&gt;</operator><name>simplified</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><call><name>commit_list_insert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>next</name></expr>;</expr_stmt>
<return>return <expr><name>tail</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pst</name> <operator>=</operator> <call><name>locate_simplify_state</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <name><name>pst</name><operator>-&gt;</operator><name>simplified</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>remove_duplicate_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>




















<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>marked</name> <init>= <expr><call><name>mark_redundant_parents</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>marked</name> <operator>+=</operator> <call><name>mark_treesame_root_parents</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>marked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>marked</name> <operator>-=</operator> <call><name>leave_one_treesame_to_parent</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>marked</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>remove_marked_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnt</name> <operator>||</operator>
<operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>parent</name> <operator>=</operator> <call><name>one_relevant_parent</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>simplified</name></name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>pst</name> <operator>=</operator> <call><name>locate_simplify_state</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>simplified</name></name> <operator>=</operator> <name><name>pst</name><operator>-&gt;</operator><name>simplified</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>tail</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simplify_merges</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>yet_to_do</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>prune</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>yet_to_do</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yet_to_do</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name>yet_to_do</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>yet_to_do</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yet_to_do</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name>yet_to_do</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>pop_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>simplify_one</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>


<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>merge_simplify_state</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>pop_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>locate_simplify_state</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>simplified</name></name> <operator>==</operator> <name>commit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_children</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_child</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_revision_walk</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_object_flags</name><argument_list>(<argument><expr><name>SEEN</name> <operator>|</operator> <name>ADDED</name> <operator>|</operator> <name>SHOWN</name> <operator>|</operator> <name>TOPO_WALK_EXPLORED</name> <operator>|</operator> <name>TOPO_WALK_INDEGREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mark_uninteresting</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name> <operator>|</operator> <name>SEEN</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>define_commit_slab</name><argument_list>(<argument><expr><name>indegree_slab</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_commit_slab</name><argument_list>(<argument><expr><name>author_date_slab</name></expr></argument>, <argument><expr><name>timestamp_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>topo_walk_info</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>min_generation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>prio_queue</name></name></type> <name>explore_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>prio_queue</name></name></type> <name>indegree_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>prio_queue</name></name></type> <name>topo_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>indegree_slab</name></name></type> <name>indegree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>author_date_slab</name></name></type> <name>author_date</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>test_flag_and_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>explore_walk_step</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>prio_queue_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_commit_gently</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>==</operator> <name>REV_SORT_BY_AUTHOR_DATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>record_author_date</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>author_date</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>process_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_parents_uninteresting</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_flag_and_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>TOPO_WALK_EXPLORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>explore_to_depth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>gen_cutoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>prio_queue_peek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>generation</name></name> <operator>&gt;=</operator> <name>gen_cutoff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>explore_walk_step</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indegree_walk_step</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>prio_queue_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_commit_gently</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>explore_to_depth</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><call><name>indegree_slab_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>test_flag_and_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>TOPO_WALK_INDEGREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_indegrees_to_depth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>gen_cutoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>prio_queue_peek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>generation</name></name> <operator>&gt;=</operator> <name>gen_cutoff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indegree_walk_step</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_topo_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_prio_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_prio_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_prio_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_indegree_slab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_author_date_slab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>author_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_topo_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reset_topo_walk</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>topo_walk_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>topo_walk_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_indegree_slab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default> 
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name><operator>.</operator><name>compare</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REV_SORT_BY_COMMIT_DATE</name></expr>:</case>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name><operator>.</operator><name>compare</name></name> <operator>=</operator> <name>compare_commits_by_commit_date</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REV_SORT_BY_AUTHOR_DATE</name></expr>:</case>
<expr_stmt><expr><call><name>init_author_date_slab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>author_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name><operator>.</operator><name>compare</name></name> <operator>=</operator> <name>compare_commits_by_author_date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name><operator>.</operator><name>cb_data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>author_date</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name><operator>.</operator><name>compare</name></name> <operator>=</operator> <name>compare_commits_by_gen_then_commit_date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name><operator>.</operator><name>compare</name></name> <operator>=</operator> <name>compare_commits_by_gen_then_commit_date</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>min_generation</name></name> <operator>=</operator> <name>GENERATION_NUMBER_INFINITY</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_commit_gently</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>test_flag_and_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>explore_queue</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>TOPO_WALK_EXPLORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_flag_and_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree_queue</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>TOPO_WALK_INDEGREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>generation</name></name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>min_generation</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>min_generation</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>generation</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>indegree_slab_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>==</operator> <name>REV_SORT_BY_AUTHOR_DATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>record_author_date</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>author_date</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>compute_indegrees_to_depth</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>min_generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><call><name>indegree_slab_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>==</operator> <name>REV_SORT_IN_GRAPH_ORDER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prio_queue_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>next_topo_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>prio_queue_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>indegree_slab_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expand_topo_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>topo_walk_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>process_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing_links</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Failed to traverse parents of commit %s"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_commit_gently</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>generation</name></name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>min_generation</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>min_generation</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>generation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_indegrees_to_depth</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>min_generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pi</name> <operator>=</operator> <call><name>indegree_slab_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>indegree</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pi</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>topo_queue</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>prepare_revision_walk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_array</name></name></type> <name>old_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name> <init>= <expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_pending</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>old_pending</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>old_pending</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_array_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>old_pending</name><operator>.</operator><name>objects</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><call><name>handle_commit</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SEEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>commit_list_append</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>object_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_merges</name></name> <operator>||</operator>
<operator>(</operator><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name> <operator>&amp;&amp;</operator> <call><name>limiting_can_increase_treesame</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>treesame</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"treesame"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>for_each_packed_object</name><argument_list>(<argument><expr><name>mark_uninteresting</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>,
<argument><expr><name>FOR_EACH_OBJECT_PROMISOR_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name> <operator>!=</operator> <name>REVISION_WALK_NO_WALK_UNSORTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_list_sort_by_date</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>no_walk</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>limit_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sort_in_topological_order</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>topo_order</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_topo_walk</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>line_level_traverse</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>line_log_filter</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>simplify_merges</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>simplify_merges</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_children</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>rewrite_result</name></name></type> <name>rewrite_one_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>process_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_error</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_ok</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_ok</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_noparents</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>one_relevant_parent</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rewrite_one_ok</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_queue_into_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>prio_queue_peek</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>list</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>date</name></name> <operator>&gt;=</operator> <name><name>item</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>commit_list_insert</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>prio_queue_get</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>rewrite_result</name></name></type> <name>rewrite_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>prio_queue</name></name></type> <name>queue</name> <init>= <expr><block>{ <expr><name>compare_commits_by_commit_date</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>rewrite_result</name></name></type> <name>ret</name> <init>= <expr><call><name>rewrite_one_1</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>merge_queue_into_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_prio_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rewrite_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name>rewrite_parent_fn_t</name></type> <name>rewrite_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>pp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>rewrite_parent</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>rewrite_one_ok</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>rewrite_one_noparents</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>rewrite_one_error</name></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>remove_duplicate_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_rewrite_person</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>mailmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>person</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>namelen</name></decl>, <decl><type ref="prev"/><name>maillen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ident_split</name></name></type> <name>ident</name></decl>;</decl_stmt>

<expr_stmt><expr><name>person</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>person</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>person</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>person</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>endp</name> <operator>-</operator> <name>person</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>split_ident_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>, <argument><expr><name>person</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mail</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>mail_begin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maillen</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>mail_end</name></name> <operator>-</operator> <name><name>ident</name><operator>.</operator><name>mail_begin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>name_begin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>name_end</name></name> <operator>-</operator> <name><name>ident</name><operator>.</operator><name>name_begin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>map_user</name><argument_list>(<argument><expr><name>mailmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mail</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maillen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>namemail</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>namemail</name></expr></argument>, <argument><expr><literal type="string">"%.*s &lt;%.*s&gt;"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>namelen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>maillen</name></expr></argument>, <argument><expr><name>mail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_splice</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ident</name><operator>.</operator><name>name_begin</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>ident</name><operator>.</operator><name>mail_end</name></name> <operator>-</operator> <name><name>ident</name><operator>.</operator><name>name_begin</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>namemail</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>namemail</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>namemail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>pattern_list</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>header_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>use_reflog_filter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"reflog "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_reflog_message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>reflog_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>get_log_output_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>logmsg_reencode</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>grep_filter</name><operator>.</operator><name>header_list</name></name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>mailmap</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_rewrite_person</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\nauthor "</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>mailmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_rewrite_person</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\ncommitter "</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>mailmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>show_notes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>format_display_notes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>grep_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>grep_filter</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>grep_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>grep_filter</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unuse_commit_buffer</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>invert_grep</name></name></expr> ?</condition><then> <expr><operator>!</operator><name>retval</name></expr> </then><else>: <expr><name>retval</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>want_ancestry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>revs</name><operator>-&gt;</operator><name>rewrite_parents</name></name> <operator>||</operator> <name><name>revs</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>timestamp_t</name></type> <name>comparison_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr> ?</condition><then>
<expr><call><name>get_reflog_timestamp</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>commit_action</name></name></type> <name>get_commit_action</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_ignore</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>unpacked</name></name> <operator>&amp;&amp;</operator> <call><name>has_object_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_ignore</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_ignore</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>comparison_date</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>min_age</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_ignore</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>min_parents</name></name> <operator>||</operator> <operator>(</operator><name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>commit_list_count</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>min_parents</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>max_parents</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_ignore</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>commit_match</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_ignore</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>prune</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>dense</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TREESAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>want_ancestry</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_ignore</name></expr>;</return></block_content></block></if></if_stmt>







<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>relevant_commit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_show</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>commit_ignore</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>commit_show</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>define_commit_slab</name><argument_list>(<argument><expr><name>saved_parents</name></expr></argument>, <argument><expr>struct <name>commit_list</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_PARENT_LIST</name></cpp:macro> <cpp:value>((struct commit_list *)-1)</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type> <name>save_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>saved_parents</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_saved_parents</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>saved_parents_at</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>copy_commit_list</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>EMPTY_PARENT_LIST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_saved_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_saved_parents</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>get_saved_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parents</name> <operator>=</operator> <operator>*</operator><call><name>saved_parents_at</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>saved_parents_slab</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parents</name> <operator>==</operator> <name>EMPTY_PARENT_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>parents</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>commit_action</name></name></type> <name>simplify_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>commit_action</name></name></type> <name>action</name> <init>= <expr><call><name>get_commit_action</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>commit_show</name> <operator>&amp;&amp;</operator>
<name><name>revs</name><operator>-&gt;</operator><name>prune</name></name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>dense</name></name> <operator>&amp;&amp;</operator> <call><name>want_ancestry</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>full_diff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>save_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rewrite_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>rewrite_one</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>commit_error</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>action</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>track_linear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>track_first_time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>linear</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>track_first_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>previous_parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>item</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> 
<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>linear</name></name> <operator>=</operator> <name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reverse</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>linear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>TRACK_LINEAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>previous_parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>previous_parents</name></name> <operator>=</operator> <call><name>copy_commit_list</name><argument_list>(<argument><expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>get_revision_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>next_reflog_entry</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>next_topo_commit</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>pop_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ADDED</name> <operator>|</operator> <name>SEEN</name> <operator>|</operator> <name>SHOWN</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>limited</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>comparison_date</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>max_age</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reflog_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>try_to_simplify_commit</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>topo_walk_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_topo_walk</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>process_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing_links</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Failed to traverse parents of commit %s"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>simplify_commit</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>commit_ignore</name></expr>:</case>
<continue>continue;</continue>
<case>case <expr><name>commit_error</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Failed to simplify parents of commit %s"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>track_linear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>track_linear</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>commit</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>entry_unshown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHOWN</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>gc_boundary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <name><name>array</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>object_array_filter</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>entry_unshown</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_boundary_commit_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name> <init>= <expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>boundary_commits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_array_entry</name></name> <modifier>*</modifier></type><name>objects</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>objects</name></name></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CHILD_SHOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SHOWN</name> <operator>|</operator> <name>BOUNDARY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>BOUNDARY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name>sort_in_topological_order</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>sort_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>get_revision_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>boundary</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>pop_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_revision_1</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>skip_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>skip_count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_revision_1</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>boundary</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>boundary</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>





<expr_stmt><expr><call><name>create_boundary_commit_list</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_revision_internal</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>








<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CHILD_SHOWN</name> <operator>|</operator> <name>SHOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CHILD_SHOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gc_boundary</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>boundary_commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_object_array</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>boundary_commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>get_revision</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>reversed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reverse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reversed</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>get_revision_internal</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reversed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name> <operator>=</operator> <name>reversed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>reverse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>reverse_output_stage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>reverse_output_stage</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>pop_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>track_linear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>linear</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>TRACK_LINEAR</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_revision_internal</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>graph_update</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_saved_parents</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>previous_parents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>previous_parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>-&gt;</operator><name>previous_parents</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_revision_mark</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>BOUNDARY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"-"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"^"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCHSAME</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"="</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>revs</name> <operator>||</operator> <name><name>revs</name><operator>-&gt;</operator><name>left_right</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SYMMETRIC_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"&lt;"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="string">"&gt;"</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"*"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>cherry_mark</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"+"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>put_revision_mark</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mark</name> <init>= <expr><call><name>get_revision_mark</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
