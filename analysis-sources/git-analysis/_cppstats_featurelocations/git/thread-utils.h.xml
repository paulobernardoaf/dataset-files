<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\thread-utils.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THREAD_COMPAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_COMPAT_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_PTHREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_THREADS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_THREADS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_key_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_init</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>, <parameter><type><name>attr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dummy_pthread_init(mutex)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_lock</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_unlock</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_destroy</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_init</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>attr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dummy_pthread_init(cond)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_wait</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_signal</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_broadcast</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_cond_destroy</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_key_create</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>attr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dummy_pthread_init(key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_key_delete</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_create</name><parameter_list>(<parameter><type><name>thread</name></type></parameter>, <parameter><type><name>attr</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dummy_pthread_create(thread, attr, fn, data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_join</name><parameter_list>(<parameter><type><name>thread</name></type></parameter>, <parameter><type><name>retval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dummy_pthread_join(thread, retval)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_setspecific</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_getspecific</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>dummy_pthread_create</name><parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>pthread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,
<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dummy_pthread_join</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>pthread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>retval</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dummy_pthread_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>online_cpus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>init_recursive_mutex</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
