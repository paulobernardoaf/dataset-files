<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\transport.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkt-line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fetch-pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"send-pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"walker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bundle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refspec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"branch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigchain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport-internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transport_use_color</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>transport_colors</name><index>[]</index><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>GIT_COLOR_RESET</name></expr>,
<expr><name>GIT_COLOR_RED</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>color_transport</name> <block>{
<decl><name>TRANSPORT_COLOR_RESET</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TRANSPORT_COLOR_REJECTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transport_color_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"color.transport.reset"</literal></expr>,
<expr><literal type="string">"color.transport.rejected"</literal></expr>
}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name> <init>= <expr><literal type="string">"color.transport"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>transport_use_color</name> <operator>=</operator> <call><name>git_config_colorbool</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>want_color_stderr</name><argument_list>(<argument><expr><name>transport_use_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_string</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>color_parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>transport_colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>transport_get_color</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>color_transport</name></name></type> <name>ix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>want_color_stderr</name><argument_list>(<argument><expr><name>transport_use_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>transport_colors</name><index>[<expr><name>ix</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_upstreams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pretend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>localname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remotename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_OK</name> <operator>&amp;&amp;</operator>
<name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_UPTODATE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>localname</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>remotename</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><name>localname</name></expr></argument>, <argument><expr><name>RESOLVE_REF_READING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&amp;&amp;</operator> <name>flag</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name> <operator>&amp;&amp;</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>localname</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>localname</name> <operator>||</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>localname</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remotename</name> <operator>||</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>remotename</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pretend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>install_branch_config</name><argument_list>(<argument><expr><name>BRANCH_CONFIG_VERBOSE</name></expr></argument>,
<argument><expr><name>localname</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name><name>transport</name><operator>-&gt;</operator><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>remotename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Would set upstream of '%s' to '%s' of '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>localname</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>remotename</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>,
<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<struct>struct <name>bundle_transport_data</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bundle_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>get_refs_from_bundle_called</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>get_refs_from_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>for_push</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>ref_prefixes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bundle_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>for_push</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>get_refs_from_bundle_called</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>read_bundle_header</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read bundle '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>references</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref_list_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>references</name><operator>.</operator><name>list</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>alloc_ref</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_refs_from_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nr_heads</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>to_fetch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bundle_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>get_refs_from_bundle_called</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_refs_from_bundle</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>unbundle</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>transport</name><operator>-&gt;</operator><name>progress</name></name></expr> ?</condition><then> <expr><name>BUNDLE_VERBOSE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>close_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bundle_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>git_transport_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_options</name></name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>got_remote_heads</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>protocol_version</name></name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>extra_have</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>shallow</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_git_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_transport_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_UPLOADPACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>uploadpack</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_RECEIVEPACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>receivepack</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_THIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>thin</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_FOLLOWTAGS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>followtags</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_KEEP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>keep</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_UPDATE_SHALLOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>update_shallow</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_DEPTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"transport: invalid depth option '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_DEEPEN_SINCE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>deepen_since</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_DEEPEN_NOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>deepen_not</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>string_list</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_DEEPEN_RELATIVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>deepen_relative</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_FROM_PROMISOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>from_promisor</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_NO_DEPENDENTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>no_dependents</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRANS_OPT_LIST_OBJECTS_FILTER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_objects_filter_die_if_populated</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>filter_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_list_objects_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>filter_options</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_push</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>CONNECT_VERBOSE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TRANSPORT_FAMILY_ALL</name></expr>:</case> <break>break;</break>
<case>case <expr><name>TRANSPORT_FAMILY_IPV4</name></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CONNECT_IPV4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TRANSPORT_FAMILY_IPV6</name></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CONNECT_IPV6</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>git_connect</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>for_push</name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>receivepack</name></name></expr> </then><else>:
<expr><name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>uploadpack</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>die_if_server_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transport</name><operator>-&gt;</operator><name>server_options</name></name> <operator>||</operator> <operator>!</operator><name><name>transport</name><operator>-&gt;</operator><name>server_options</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"see protocol.version in 'git help config' for more details"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"server options require protocol version 2 or later"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_push</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>ref_prefixes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>must_list_refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packet_reader</name></name></type> <name>reader</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>connect_setup</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>for_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packet_reader_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PACKET_READ_CHOMP_NEWLINE</name> <operator>|</operator>
<name>PACKET_READ_GENTLE_ON_EOF</name> <operator>|</operator>
<name>PACKET_READ_DIE_ON_ERR_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>discover_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>protocol_v2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>must_list_refs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_remote_refs</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs</name></expr></argument>, <argument><expr><name>for_push</name></expr></argument>,
<argument><expr><name>ref_prefixes</name></expr></argument>,
<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>server_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>protocol_v1</name></expr>:</case>
<case>case <expr><name>protocol_v0</name></expr>:</case>
<expr_stmt><expr><call><name>die_if_server_options</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_remote_heads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>for_push</name></expr> ?</condition><then> <expr><name>REF_NORMAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>extra_have</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>shallow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>protocol_unknown_version</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown protocol version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>.</operator><name>line_peeked</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"buffer must be empty at the end of handshake()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>refs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>get_refs_via_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_push</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>ref_prefixes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>handshake</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>for_push</name></expr></argument>, <argument><expr><name>ref_prefixes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_refs_via_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nr_heads</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>to_fetch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>uploadpack</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>uploadpack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>keep_pack</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>keep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>lock_pack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>use_thin_pack</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>thin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>include_tag</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>followtags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <operator>(</operator><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <operator>(</operator><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>no_progress</name></name> <operator>=</operator> <operator>!</operator><name><name>transport</name><operator>-&gt;</operator><name>progress</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>deepen_since</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>deepen_since</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>deepen_not</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>deepen_not</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>deepen_relative</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>deepen_relative</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>check_self_contained_and_connected</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>check_self_contained_and_connected</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>cloning</name></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>cloning</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>update_shallow</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>update_shallow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>from_promisor</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>from_promisor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>no_dependents</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>no_dependents</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>filter_options</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>filter_options</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>stateless_rpc</name></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>server_options</name></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>server_options</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>negotiation_tips</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>negotiation_tips</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>must_list_refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_heads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>to_fetch</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>exact_oid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>must_list_refs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>refs_tmp</name> <operator>=</operator> <call><name>handshake</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>must_list_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>protocol_v2</name></expr>:</case>
<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>fetch_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>refs_tmp</name></expr> ?</condition><then> <expr><name>refs_tmp</name></expr> </then><else>: <expr><name><name>transport</name><operator>-&gt;</operator><name>remote_refs</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>to_fetch</name></expr></argument>, <argument><expr><name>nr_heads</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>shallow</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>transport</name><operator>-&gt;</operator><name>pack_lockfile</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>protocol_v1</name></expr>:</case>
<case>case <expr><name>protocol_v0</name></expr>:</case>
<expr_stmt><expr><call><name>die_if_server_options</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>refs</name> <operator>=</operator> <call><name>fetch_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>refs_tmp</name></expr> ?</condition><then> <expr><name>refs_tmp</name></expr> </then><else>: <expr><name><name>transport</name><operator>-&gt;</operator><name>remote_refs</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>to_fetch</name></expr></argument>, <argument><expr><name>nr_heads</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>shallow</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>transport</name><operator>-&gt;</operator><name>pack_lockfile</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>protocol_unknown_version</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown protocol version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>finish_connect</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>self_contained_and_connected</name></name> <operator>=</operator>
<name><name>args</name><operator>.</operator><name>self_contained_and_connected</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>connectivity_checked</name></name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>connectivity_checked</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>refs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>report_unmatched_refs</name><argument_list>(<argument><expr><name>to_fetch</name></expr></argument>, <argument><expr><name>nr_heads</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_refs</name><argument_list>(<argument><expr><name>refs_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_refs</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_had_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_STATUS_NONE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_UPTODATE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport_refs_pushed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_STATUS_NONE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_UPTODATE</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transport_update_tracking_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>refspec_item</name></name></type> <name>rs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_OK</name> <operator>&amp;&amp;</operator> <name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_UPTODATE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rs</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remote_find_tracking</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"updating local tracking ref '%s'\n"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>.</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>deletion</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>delete_ref</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rs</name><operator>.</operator><name>dst</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_ref</name><argument_list>(<argument><expr><literal type="string">"update by push"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>.</operator><name>dst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rs</name><operator>.</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_ref_status</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>summary</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>porcelain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>summary_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>porcelain</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%c\t%s:%s\t"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%c\t:%s\t"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s (%s)\n"</literal></expr></argument>, <argument><expr><name>summary</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>red</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reset</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>push_had_errors</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>red</name> <operator>=</operator> <call><name>transport_get_color</name><argument_list>(<argument><expr><name>TRANSPORT_COLOR_REJECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>transport_get_color</name><argument_list>(<argument><expr><name>TRANSPORT_COLOR_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s%c %-*s%s "</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>,
<argument><expr><name>summary</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s -&gt; %s"</literal></expr></argument>, <argument><expr><call><name>prettify_refname</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>prettify_refname</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>prettify_refname</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_ok_ref_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>porcelain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>summary_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>deletion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="string">"[deleted]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"[new tag]"</literal></expr> </then><else>:
<expr><literal type="string">"[new branch]"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>quickref</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_add_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quickref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>,
<argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>forced_update</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quickref</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"forced update"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quickref</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_add_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quickref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>,
<argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>quickref</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quickref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_one_push_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>porcelain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>summary_width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>transport_anonymize_url</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><ternary><condition><expr><name>porcelain</name></expr> ?</condition><then> <expr><name>stdout</name></expr> </then><else>: <expr><name>stderr</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"To %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_STATUS_NONE</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="string">"[no match]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REJECT_NODELETE</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"remote does not support deleting refs"</literal></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_UPTODATE</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><literal type="string">"[up to date]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>,
<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REJECT_NONFASTFORWARD</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>,
<argument><expr><literal type="string">"non-fast-forward"</literal></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REJECT_ALREADY_EXISTS</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>,
<argument><expr><literal type="string">"already exists"</literal></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REJECT_FETCH_FIRST</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>,
<argument><expr><literal type="string">"fetch first"</literal></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REJECT_NEEDS_FORCE</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>,
<argument><expr><literal type="string">"needs force"</literal></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REJECT_STALE</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>,
<argument><expr><literal type="string">"stale info"</literal></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REJECT_SHALLOW</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>,
<argument><expr><literal type="string">"new shallow roots not allowed"</literal></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_REMOTE_REJECT</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[remote rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ref</name><operator>-&gt;</operator><name>deletion</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>remote_status</name></name></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_EXPECTING_REPORT</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[remote failure]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ref</name><operator>-&gt;</operator><name>deletion</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"remote failed to report status"</literal></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_ATOMIC_PUSH_FAILED</name></expr>:</case>
<expr_stmt><expr><call><name>print_ref_status</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="string">"[rejected]"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name></expr></argument>,
<argument><expr><literal type="string">"atomic push failed"</literal></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_STATUS_OK</name></expr>:</case>
<expr_stmt><expr><call><name>print_ok_ref_status</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>measure_abbrev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sofar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>find_unique_abbrev_r</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>w</name> <operator>&lt;</operator> <name>sofar</name><operator>)</operator></expr> ?</condition><then> <expr><name>sofar</name></expr> </then><else>: <expr><name>w</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport_summary_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maxw</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>refs</name></expr>;</condition> <incr><expr><name>refs</name> <operator>=</operator> <name><name>refs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>maxw</name> <operator>=</operator> <call><name>measure_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>maxw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxw</name> <operator>=</operator> <call><name>measure_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><name>maxw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>maxw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxw</name> <operator>=</operator> <name>FALLBACK_DEFAULT_ABBREV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>maxw</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transport_print_push_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>porcelain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>reject_reasons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>summary_width</name> <init>= <expr><call><name>transport_summary_width</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>transport_color_config</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not parse transport.color.* config"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>resolve_refdup</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>RESOLVE_REF_READING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_UPTODATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_one_push_status</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_one_push_status</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>reject_reasons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_NONE</name> <operator>&amp;&amp;</operator>
<name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_UPTODATE</name> <operator>&amp;&amp;</operator>
<name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_one_push_status</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><name>porcelain</name></expr></argument>, <argument><expr><name>summary_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_REJECT_NONFASTFORWARD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>head</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>reject_reasons</name> <operator>|=</operator> <name>REJECT_NON_FF_HEAD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>reject_reasons</name> <operator>|=</operator> <name>REJECT_NON_FF_OTHER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_REJECT_ALREADY_EXISTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>reject_reasons</name> <operator>|=</operator> <name>REJECT_ALREADY_EXISTS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_REJECT_FETCH_FIRST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>reject_reasons</name> <operator>|=</operator> <name>REJECT_FETCH_FIRST</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_REJECT_NEEDS_FORCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>reject_reasons</name> <operator>|=</operator> <name>REJECT_NEEDS_FORCE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_transport_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>send_pack_args</name></name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>transport_color_config</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_refs_via_connect</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>send_mirror</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_MIRROR</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>force_update</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_FORCE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>use_thin_pack</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>thin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <operator>(</operator><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <operator>(</operator><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>progress</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>dry_run</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_DRY_RUN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>porcelain</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_PORCELAIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>atomic</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_ATOMIC</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>push_options</name></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>push_options</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_CERT_ALWAYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>push_cert</name></name> <operator>=</operator> <name>SEND_PACK_PUSH_CERT_ALWAYS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_CERT_IF_ASKED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>push_cert</name></name> <operator>=</operator> <name>SEND_PACK_PUSH_CERT_IF_ASKED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>push_cert</name></name> <operator>=</operator> <name>SEND_PACK_PUSH_CERT_NEVER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>protocol_v2</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"support for protocol v2 not implemented yet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>protocol_v1</name></expr>:</case>
<case>case <expr><name>protocol_v0</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>send_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>extra_have</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>protocol_unknown_version</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown protocol version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>finish_connect</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_git</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>executable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>git_connect</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr></argument>,
<argument><expr><name>executable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disconnect_git</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>transport</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_connect</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>transport_vtable</name></name></type> <name>taken_over_vtable</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>get_refs_via_connect</name></expr>,
<expr><name>fetch_refs_via_pack</name></expr>,
<expr><name>git_transport_push</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>disconnect_git</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>transport_take_over</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"taking over transport requires non-NULL "</literal>
<literal type="string">"smart_options field."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <operator>*</operator><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>taken_over_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>options</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>cannot_reuse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>external_specification_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>url</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>protocol_whitelist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>enabled</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>allowed</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_ALLOW_PROTOCOL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>string_list_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allowed</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>allowed</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>protocol_allow_config</name> <block>{
<decl><name>PROTOCOL_ALLOW_NEVER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PROTOCOL_ALLOW_USER_ONLY</name></decl>,
<decl><name>PROTOCOL_ALLOW_ALWAYS</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>protocol_allow_config</name></name></type> <name>parse_protocol_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PROTOCOL_ALLOW_ALWAYS</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PROTOCOL_ALLOW_NEVER</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PROTOCOL_ALLOW_USER_ONLY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown value for config '%s': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>protocol_allow_config</name></name></type> <name>get_protocol_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"protocol.%s.allow"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>protocol_allow_config</name></name></type> <name>ret</name> <init>=
<expr><call><name>parse_protocol_config</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"protocol.allow"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>protocol_allow_config</name></name></type> <name>ret</name> <init>=
<expr><call><name>parse_protocol_config</name><argument_list>(<argument><expr><literal type="string">"protocol.allow"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"git"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"ssh"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PROTOCOL_ALLOW_ALWAYS</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"ext"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PROTOCOL_ALLOW_NEVER</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><name>PROTOCOL_ALLOW_USER_ONLY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_transport_allowed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from_user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>whitelist</name> <init>= <expr><call><name>protocol_whitelist</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>whitelist</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>string_list_has_string</name><argument_list>(<argument><expr><name>whitelist</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>get_protocol_config</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PROTOCOL_ALLOW_ALWAYS</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>PROTOCOL_ALLOW_NEVER</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>PROTOCOL_ALLOW_USER_ONLY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>from_user</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from_user</name> <operator>=</operator> <call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_PROTOCOL_FROM_USER"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>from_user</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"invalid protocol_allow_config type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transport_check_allowed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_transport_allowed</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"transport '%s' not allowed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>transport_vtable</name></name></type> <name>bundle_vtable</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>get_refs_from_bundle</name></expr>,
<expr><name>fetch_refs_from_bundle</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>close_bundle</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>transport_vtable</name></name></type> <name>builtin_smart_vtable</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>get_refs_via_connect</name></expr>,
<expr><name>fetch_refs_via_pack</name></expr>,
<expr><name>git_transport_push</name></expr>,
<expr><name>connect_git</name></expr>,
<expr><name>disconnect_git</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>helper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"No remote provided to transport_get()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>got_remote_refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>remote</name></name> <operator>=</operator> <name>remote</name></expr>;</expr_stmt>
<expr_stmt><expr><name>helper</name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>foreign_vcs</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name> <operator>&amp;&amp;</operator> <name><name>remote</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>url</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>url</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>is_urlschemechar</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>url</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>helper</name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>helper</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>transport_helper_init</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"rsync:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git-over-rsync is no longer supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>url_is_local_not_ssh</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_file</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_bundle</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bundle_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>transport_check_allowed</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>bundle_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_url</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"file://"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"git://"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"ssh://"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"git+ssh://"</literal></expr></argument>)</argument_list></call> 
<operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"ssh+git://"</literal></expr></argument>)</argument_list></call></expr> 
)</condition> <block>{<block_content>




<decl_stmt><decl><type><name><name>struct</name> <name>git_transport_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>builtin_smart_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>options</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>got_remote_heads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>external_specification_len</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>transport_helper_init</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>thin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>uploadpack</name></name> <operator>=</operator> <literal type="string">"git-upload-pack"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>remote</name><operator>-&gt;</operator><name>uploadpack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>uploadpack</name></name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>uploadpack</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>receivepack</name></name> <operator>=</operator> <literal type="string">"git-receive-pack"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>remote</name><operator>-&gt;</operator><name>receivepack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>receivepack</name></name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>receivepack</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport_set_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>git_reports</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>protocol_reports</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>git_reports</name> <operator>=</operator> <call><name>set_git_option</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>set_option</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>protocol_reports</name> <operator>=</operator> <call><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>set_option</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>git_reports</name> <operator>||</operator> <operator>!</operator><name>protocol_reports</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>git_reports</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>protocol_reports</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transport_set_verbosity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbosity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force_progress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <ternary><condition><expr><name>verbosity</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>verbosity</name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>force_progress</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>force_progress</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <name>verbosity</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>die_with_unpushed_submodules</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>needs_pushing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following submodule paths contain changes that can\n"</literal>
<literal type="string">"not be found on any remote:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>needs_pushing</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>needs_pushing</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nPlease try\n\n"</literal>
<literal type="string">" git push --recurse-submodules=on-demand\n\n"</literal>
<literal type="string">"or cd to the path and use\n\n"</literal>
<literal type="string">" git push\n\n"</literal>
<literal type="string">"to push them to a remote.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><name>needs_pushing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Aborting."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_pre_push_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>proc</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>find_hook</name><argument_list>(<argument><expr><literal type="string">"pre-push"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>.</operator><name>trace2_hook_name</name></name> <operator>=</operator> <literal type="string">"pre-push"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sigchain_push</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>peer_ref</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_REJECT_NONFASTFORWARD</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_REJECT_STALE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>REF_STATUS_UPTODATE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer_ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>proc</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>reject_reasons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>reject_reasons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>transport_color_config</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>push_refs</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>local_refs</name> <init>= <expr><call><name>get_local_heads</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match_flags</name> <init>= <expr><name>MATCH_REFS_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name> <init>= <expr><operator>(</operator><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quiet</name> <init>= <expr><operator>(</operator><name><name>transport</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>porcelain</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_PORCELAIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pretend</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_DRY_RUN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>push_ret</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>ref_prefixes</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_push_refs</name><argument_list>(<argument><expr><name>local_refs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>refspec_ref_prefixes</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_prefixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"get_refs_list"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remote_refs</name> <operator>=</operator> <call><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_refs_list</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ref_prefixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"get_refs_list"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_prefixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match_flags</name> <operator>|=</operator> <name>MATCH_REFS_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_MIRROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match_flags</name> <operator>|=</operator> <name>MATCH_REFS_MIRROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_PRUNE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match_flags</name> <operator>|=</operator> <name>MATCH_REFS_PRUNE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_FOLLOW_TAGS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match_flags</name> <operator>|=</operator> <name>MATCH_REFS_FOLLOW_TAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match_push_refs</name><argument_list>(<argument><expr><name>local_refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remote_refs</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>match_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name></name> <operator>&amp;&amp;</operator>
<name><name>transport</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>cas</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_empty_cas</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>cas</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_push_cas</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>cas</name></name></expr></argument>,
<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>remote</name></name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_ref_status_for_push</name><argument_list>(<argument><expr><name>remote_refs</name></expr></argument>,
<argument><expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_MIRROR</name></expr></argument>,
<argument><expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_FORCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_NO_HOOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>run_pre_push_hook</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>TRANSPORT_RECURSE_SUBMODULES_ON_DEMAND</name> <operator>|</operator>
<name>TRANSPORT_RECURSE_SUBMODULES_ONLY</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>remote_refs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>commits</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"push_submodules"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>push_unpushed_submodules</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>,
<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>remote</name></name></expr></argument>,
<argument><expr><name>rs</name></expr></argument>,
<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>push_options</name></name></expr></argument>,
<argument><expr><name>pretend</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"push_submodules"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to push all needed submodules"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"push_submodules"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_RECURSE_SUBMODULES_CHECK</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>TRANSPORT_RECURSE_SUBMODULES_ON_DEMAND</name> <operator>|</operator>
<name>TRANSPORT_RECURSE_SUBMODULES_ONLY</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name>pretend</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>remote_refs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>needs_pushing</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>commits</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"check_submodules"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>find_unpushed_submodules</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>,
<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>needs_pushing</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"check_submodules"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die_with_unpushed_submodules</name><argument_list>(<argument><expr><operator>&amp;</operator><name>needs_pushing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>needs_pushing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"check_submodules"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_RECURSE_SUBMODULES_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"push_refs"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>push_ret</name> <operator>=</operator> <call><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>push_refs</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><literal type="string">"push_refs"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>push_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>push_had_errors</name><argument_list>(<argument><expr><name>remote_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>push_ret</name> <operator>|</operator> <name>err</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_ATOMIC</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>err</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>it</name></expr>;</condition> <incr><expr><name>it</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_STATUS_NONE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_UPTODATE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_OK</name></expr>:</case>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>REF_STATUS_ATOMIC_PUSH_FAILED</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name> <operator>||</operator> <name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transport_print_push_status</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>,
<argument><expr><name>verbose</name> <operator>|</operator> <name>porcelain</name></expr></argument>, <argument><expr><name>porcelain</name></expr></argument>,
<argument><expr><name>reject_reasons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_SET_UPSTREAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_upstreams</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>, <argument><expr><name>pretend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>TRANSPORT_PUSH_DRY_RUN</name> <operator>|</operator>
<name>TRANSPORT_RECURSE_SUBMODULES_ONLY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transport_update_tracking_ref</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>remote</name></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>porcelain</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>push_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>quiet</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>transport_refs_pushed</name><argument_list>(<argument><expr><name>remote_refs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Everything up-to-date\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>transport_get_remote_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>ref_prefixes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transport</name><operator>-&gt;</operator><name>got_remote_refs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>remote_refs</name></name> <operator>=</operator>
<call><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>get_refs_list</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ref_prefixes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>got_remote_refs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>transport</name><operator>-&gt;</operator><name>remote_refs</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport_fetch_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr_heads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr_refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>heads</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>rm</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>rm</name> <operator>=</operator> <name>refs</name></expr>;</init> <condition><expr><name>rm</name></expr>;</condition> <incr><expr><name>rm</name> <operator>=</operator> <name><name>rm</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nr_refs</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>peer_ref</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rm</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rm</name><operator>-&gt;</operator><name>peer_ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rm</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>heads</name></expr></argument>, <argument><expr><name>nr_heads</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nr_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>heads</name><index>[<expr><name>nr_heads</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rm</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nr_heads</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>heads</name></expr></argument>, <argument><expr><name>nr_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rm</name> <operator>=</operator> <name>refs</name></expr>;</init> <condition><expr><name>rm</name></expr>;</condition> <incr><expr><name>rm</name> <operator>=</operator> <name><name>rm</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>heads</name><index>[<expr><name>nr_heads</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rm</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>fetch</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>nr_heads</name></expr></argument>, <argument><expr><name>heads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>heads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transport_unlock_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>pack_lockfile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>pack_lockfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>transport</name><operator>-&gt;</operator><name>pack_lockfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>connect</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>connect</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>exec</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"operation not supported by protocol"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>disconnect</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>transport</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type><name>transport_anonymize_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scheme_prefix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>anon_part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>anon_len</name></decl>, <decl><type ref="prev"/><name>prefix_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>anon_part</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>url_is_local_not_ssh</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>anon_part</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>literal_copy</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>anon_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>++</operator><name>anon_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scheme_prefix</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scheme_prefix</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>anon_part</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>literal_copy</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>url</name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name>scheme_prefix</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case> <case>case <expr><literal type="char">'.'</literal></expr>:</case> <case>case <expr><literal type="char">'-'</literal></expr>:</case>
<break>break;</break> 
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<goto>goto <name>literal_copy</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>scheme_prefix</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>anon_part</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>literal_copy</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <name>scheme_prefix</name> <operator>-</operator> <name>url</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%.*s%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prefix_len</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>anon_len</name></expr></argument>, <argument><expr><name>anon_part</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>literal_copy</name>:</label>
<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
