<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\send-pack.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkt-line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sideband.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"send-pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gpg-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>option_parse_push_signed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>SEND_PACK_PUSH_CERT_NEVER</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>git_parse_maybe_bool</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>SEND_PACK_PUSH_CERT_ALWAYS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>SEND_PACK_PUSH_CERT_NEVER</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"if-asked"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>SEND_PACK_PUSH_CERT_IF_ASKED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad %s argument: %s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>feed_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>negative</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>has_object_file_with_flags</name><argument_list>(<argument><expr><name>oid</name></expr></argument>,
<argument><expr><name>OBJECT_INFO_SKIP_FETCH_OBJECT</name> <operator>|</operator>
<name>OBJECT_INFO_QUICK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>pack_objects</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>send_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>po</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>po_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"pack-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--all-progress-implied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--revs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>use_thin_pack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--thin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>use_ofs_delta</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--delta-base-offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>quiet</name></name> <operator>||</operator> <operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--shallow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>po</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name><operator>.</operator><name>out</name></name> <operator>=</operator> <ternary><condition><expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>fd</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>po</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"git pack-objects failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>po_in</name> <operator>=</operator> <call><name>xfdopen</name><argument_list>(<argument><expr><name><name>po</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>extra</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>feed_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extra</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>po_in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><name>refs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>feed_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><name>po_in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>feed_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>, <argument><expr><name>po_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>refs</name> <operator>=</operator> <name><name>refs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>po_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>po_in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"error writing to pack-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>po_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>LARGE_PACKET_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>xread</name><argument_list>(<argument><expr><name><name>po</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LARGE_PACKET_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>LARGE_PACKET_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>po</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <literal type="number">141</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"pack-objects died of signal %d"</literal></expr></argument>, <argument><expr><name>rc</name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>receive_unpack_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unexpected flush packet while reading remote unpack status"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"unpack "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to parse remote unpack status: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"remote unpack failed: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>receive_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>hint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hint</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>receive_unpack_status</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"ok "</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"ng "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid ref status from remote: %s"</literal></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>refname</name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>msg</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>find_ref_by_name</name><argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hint</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>find_ref_by_name</name><argument_list>(<argument><expr><name>refs</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"remote reported status on unknown ref: %s"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hint</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>REF_STATUS_EXPECTING_REPORT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"remote reported status on unexpected ref: %s"</literal></expr></argument>,
<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <name><name>reader</name><operator>-&gt;</operator><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'k'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>REF_STATUS_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>REF_STATUS_REMOTE_REJECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>remote_status</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hint</name> <operator>=</operator> <name><name>hint</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sideband_demux</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><name>data</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>async_with_fork</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recv_sideband</name><argument_list>(<argument><expr><literal type="string">"send-pack"</literal></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>advertise_shallow_grafts_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit_graft</name></name> <modifier>*</modifier></type><name>graft</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>graft</name><operator>-&gt;</operator><name>nr_parent</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"shallow %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graft</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>advertise_shallow_grafts_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>for_each_commit_graft</name><argument_list>(<argument><expr><name>advertise_shallow_grafts_cb</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REF_NO_PUSH</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REF_STATUS_REJECTED</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REF_UPTODATE</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_to_send_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>send_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>send_mirror</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CHECK_REF_NO_PUSH</name></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_STATUS_REJECT_NONFASTFORWARD</name></expr>:</case>
<case>case <expr><name>REF_STATUS_REJECT_ALREADY_EXISTS</name></expr>:</case>
<case>case <expr><name>REF_STATUS_REJECT_FETCH_FIRST</name></expr>:</case>
<case>case <expr><name>REF_STATUS_REJECT_NEEDS_FORCE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_REJECT_STALE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_REJECT_NODELETE</name></expr>:</case>
<return>return <expr><name>CHECK_REF_STATUS_REJECTED</name></expr>;</return>
<case>case <expr><name>REF_STATUS_UPTODATE</name></expr>:</case>
<return>return <expr><name>CHECK_REF_UPTODATE</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>line</name> <operator>+</operator> <name>len</name></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_push_cert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>req_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>send_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cap_string</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_cert_nonce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>signing_key</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><call><name>get_signing_key</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>cert</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>update_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"certificate version 0.1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"pusher %s "</literal></expr></argument>, <argument><expr><name>signing_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>datestamp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>url</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>args</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>anon_url</name> <init>= <expr><call><name>transport_anonymize_url</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"pushee %s\n"</literal></expr></argument>, <argument><expr><name>anon_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>anon_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>push_cert_nonce</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"nonce %s\n"</literal></expr></argument>, <argument><expr><name>push_cert_nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>push_options</name></name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>args-&gt;push_options</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"push-option %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_to_send_update</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>update_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s\n"</literal></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>update_seen</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_return</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sign_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><name>signing_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to sign the push certificate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"push-cert%c%s"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cap_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>cert</name><operator>.</operator><name>buf</name></name></expr>;</init> <condition><expr><name>cp</name> <operator>&lt;</operator> <name><name>cert</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>cert</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>next_line</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>cert</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>cert</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>,
<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>np</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"push-cert-end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>free_return</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>signing_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>update_seen</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>atomic_push_failure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>send_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>failing_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>peer_ref</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>send_mirror</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_STATUS_EXPECTING_REPORT</name></expr>:</case>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>REF_STATUS_ATOMIC_PUSH_FAILED</name></expr>;</expr_stmt>
<continue>continue;</continue>
<default>default:</default>
<break>break;</break> 
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"atomic push failed for ref %s. status: %d\n"</literal></expr></argument>,
<argument><expr><name><name>failing_ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>failing_ref</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONCE_LEN_LIMIT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reject_invalid_nonce</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NONCE_LEN_LIMIT</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"the receiving end asked to sign an invalid nonce &lt;%.*s&gt;"</literal></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>nonce</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>ch</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator>
<name>ch</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator>
<name>ch</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"the receiving end asked to sign an invalid nonce &lt;%.*s&gt;"</literal></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>send_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>send_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>remote_refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>extra_have</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in</name> <init>= <expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out</name> <init>= <expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>req_buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>cap_buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_pack_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allow_deleting_refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status_report</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_sideband</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quiet_supported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>agent_supported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_atomic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atomic_supported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_push_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>push_options_supported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cmds_sent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>async</name></name></type> <name>demux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_cert_nonce</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packet_reader</name></name></type> <name>reader</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"report-status"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status_report</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"delete-refs"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>allow_deleting_refs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"ofs-delta"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>use_ofs_delta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"side-band-64k"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_sideband</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quiet_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"agent"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>agent_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"no-thin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>use_thin_pack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"atomic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>atomic_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"push-options"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_options_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>push_cert</name></name> <operator>!=</operator> <name>SEND_PACK_PUSH_CERT_NEVER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>push_cert_nonce</name> <operator>=</operator> <call><name>server_feature_value</name><argument_list>(<argument><expr><literal type="string">"push-cert"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>push_cert_nonce</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reject_invalid_nonce</name><argument_list>(<argument><expr><name>push_cert_nonce</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>push_cert_nonce</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>push_cert_nonce</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>push_cert</name></name> <operator>==</operator> <name>SEND_PACK_PUSH_CERT_ALWAYS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the receiving end does not support --signed push"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>push_cert</name></name> <operator>==</operator> <name>SEND_PACK_PUSH_CERT_IF_ASKED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"not sending a push certificate since the"</literal>
<literal type="string">" receiving end does not support --signed"</literal>
<literal type="string">" push"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote_refs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No refs in common and none specified; doing nothing.\n"</literal>
<literal type="string">"Perhaps you should specify a branch such as 'master'.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>atomic</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>atomic_supported</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the receiving end does not support --atomic push"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>use_atomic</name> <operator>=</operator> <name>atomic_supported</name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>atomic</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>push_options</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>push_options_supported</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the receiving end does not support push options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>use_push_options</name> <operator>=</operator> <name>push_options_supported</name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>push_options</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status_report</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>, <argument><expr><literal type="string">" report-status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>, <argument><expr><literal type="string">" side-band-64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quiet_supported</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>quiet</name></name> <operator>||</operator> <operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>progress</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>, <argument><expr><literal type="string">" quiet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_atomic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>, <argument><expr><literal type="string">" atomic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_push_options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>, <argument><expr><literal type="string">" push-options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>agent_supported</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>, <argument><expr><literal type="string">" agent=%s"</literal></expr></argument>, <argument><expr><call><name>git_user_agent_sanitized</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>deletion</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>allow_deleting_refs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>REF_STATUS_REJECT_NODELETE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>advertise_shallow_grafts_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>dry_run</name></name> <operator>&amp;&amp;</operator> <name>push_cert_nonce</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmds_sent</name> <operator>=</operator> <call><name>generate_push_cert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr><name><name>cap_buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>push_cert_nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>check_to_send_update</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><name>CHECK_REF_STATUS_REJECTED</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><name>use_atomic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atomic_push_failure</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>deletion</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_pack_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>dry_run</name></name> <operator>||</operator> <operator>!</operator><name>status_report</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>REF_STATUS_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>REF_STATUS_EXPECTING_REPORT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_hex</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_hex</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>dry_run</name></name> <operator>||</operator> <name>push_cert_nonce</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_to_send_update</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_hex</name> <operator>=</operator> <call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_hex</name> <operator>=</operator> <call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>new_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmds_sent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>,
<argument><expr><literal type="string">"%s %s %s%c%s"</literal></expr></argument>,
<argument><expr><name>old_hex</name></expr></argument>, <argument><expr><name>new_hex</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>cap_buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmds_sent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>,
<argument><expr><name>old_hex</name></expr></argument>, <argument><expr><name>new_hex</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>use_push_options</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packet_buf_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>args-&gt;push_options</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>dry_run</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmds_sent</name> <operator>||</operator> <call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>req_buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>req_buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>LARGE_PACKET_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>req_buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>req_buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name> <operator>&amp;&amp;</operator> <name>cmds_sent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>demux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>proc</name></name> <operator>=</operator> <name>sideband_demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>isolate_sigpipe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>start_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"send-pack: unable to fork off sideband demultiplexer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>demux</name><operator>.</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>packet_reader_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PACKET_READ_CHOMP_NEWLINE</name> <operator>|</operator>
<name>PACKET_READ_DIE_ON_ERR_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_pack_data</name> <operator>&amp;&amp;</operator> <name>cmds_sent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pack_objects</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>, <argument><expr><name>extra_have</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_connection_is_socket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>status_report</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>receive_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>demux</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name> <operator>&amp;&amp;</operator> <name>cmds_sent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status_report</name> <operator>&amp;&amp;</operator> <name>cmds_sent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>receive_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>remote_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sideband</name> <operator>&amp;&amp;</operator> <name>cmds_sent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>demux</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"error in sideband demultiplexer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>porcelain</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>remote_refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_STATUS_NONE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_UPTODATE</name></expr>:</case>
<case>case <expr><name>REF_STATUS_OK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
