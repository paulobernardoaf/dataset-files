<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\http.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HTTP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/easy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>






<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_CURL_MULTI</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x071000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CURL_MULTI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAX_REQUESTS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x070704</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curl_global_cleanup</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x070800</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curl_global_init</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070c00</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curl_global_init</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_global_init_mem(a, xmalloc, free, xrealloc, xstrdup, xcalloc)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBCURL_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x070c04</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>LIBCURL_VERSION_NUM</name> <operator>==</operator> <literal type="number">0x071000</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_CURL_EASY_DUPHANDLE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x070a03</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLE_HTTP_RETURNED_ERROR</name></cpp:macro> <cpp:value>CURLE_HTTP_NOT_FOUND</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x070c03</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_CURL_IOCTL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURLOPT_USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CURLOPT_FTP_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLOPT_USE_SSL</name></cpp:macro> <cpp:value>CURLOPT_FTP_SSL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLUSESSL_TRY</name></cpp:macro> <cpp:value>CURLFTPSSL_TRY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>slot_results</name> <block>{
<decl_stmt><decl><type><name>CURLcode</name></type> <name>curl_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>http_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>auth_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>http_connectcode</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>active_request_slot</name> <block>{
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_use</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>curl_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>http_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>finished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slot_results</name></name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_data</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>buffer</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>posn</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>size_t</name></type> <name>fread_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>eltsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>strbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>fwrite_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>eltsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>strbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>fwrite_null</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>eltsize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>strbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CURL_IOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>curlioerr</name></type> <name>ioctl_buffer</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>get_active_slot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>start_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>run_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>finish_all_active_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>run_one_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>slot_results</name></name> <modifier>*</modifier></type><name>results</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>fill_active_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>add_fill_function</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fill</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>step_active_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>http_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>proactive_auth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>http_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>http_copy_default_headers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>long</name> <name>int</name></type> <name>git_curl_ipresolve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>active_requests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>http_is_verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>http_post_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>credential</name></name></type> <name>http_auth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>curl_errorstr</name><index>[<expr><name>CURL_ERROR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<enum>enum <name>http_follow_config</name> <block>{
<decl><name>HTTP_FOLLOW_NONE</name></decl>,
<decl><name>HTTP_FOLLOW_ALWAYS</name></decl>,
<decl><name>HTTP_FOLLOW_INITIAL</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>http_follow_config</name></name></type> <name>http_follow_config</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>missing__target</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return 
<expr><operator>(</operator><name>result</name> <operator>==</operator> <name>CURLE_FILE_COULDNT_READ_FILE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>code</name> <operator>==</operator> <literal type="number">404</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>CURLE_HTTP_RETURNED_ERROR</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>code</name> <operator>==</operator> <literal type="number">550</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>CURLE_FTP_COULDNT_RETR_FILE</name><operator>)</operator></expr>
;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>missing_target</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>missing__target((a)-&gt;http_code, (a)-&gt;curl_result)</cpp:value></cpp:define>







<function_decl><type><name>void</name></type> <name>normalize_curl_result</name><parameter_list>(<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>http_code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errorstr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>errorlen</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>append_remote_object_url</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>only_two_digit_prefix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get_remote_object_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>only_two_digit_prefix</name></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <name>http_get_options</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>no_cache</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
<decl><type ref="prev"/><name>initial_request</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>content_type</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>charset</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>effective_url</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base_url</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>extra_headers</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MISSING_TARGET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_ERROR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_START_FAILED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_REAUTH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NOAUTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>






<function_decl><type><name>int</name></type> <name>http_get_strbuf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>http_get_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>http_fetch_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>http_get_info_packs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>packs_head</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>http_pack_request</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>packfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tmpfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>new_http_pack_request</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>finish_http_pack_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>preq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>release_http_pack_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>preq</name></decl></parameter>)</parameter_list>;</function_decl>


<struct>struct <name>http_object_request</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tmpfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>localfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>curl_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errorstr</name><index>[<expr><name>CURL_ERROR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>http_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>real_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>git_hash_ctx</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>git_zstream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>new_http_object_request</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>process_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>finish_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>abort_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>release_http_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>freq</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>setup_curl_trace</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
