<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\t\helper\test-hashmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<struct>struct <name>test_entry</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>padding</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_entry_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>cmp_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>eptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry_or_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ignore_case</name> <init>= <expr><ternary><condition><expr><name>cmp_data</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>cmp_data</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test_entry</name></name> <modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>keydata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>eptr</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>test_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>entry_or_key</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>test_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_case</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>key</name></expr> ?</condition><then> <expr><name>key</name></expr> </then><else>: <expr><name><name>e2</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>key</name></expr> ?</condition><then> <expr><name>key</name></expr> </then><else>: <expr><name><name>e2</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>test_entry</name></name> <modifier>*</modifier></type><name>alloc_test_entry</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>klen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>vlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>test_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>st_add4</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <name>klen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_METHOD_FNV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_METHOD_I</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_METHOD_IDIV10</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_METHOD_0</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_METHOD_X2</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SPARSE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ADD</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>method</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>HASH_METHOD_FNV</name></expr>:</case>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>strhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HASH_METHOD_I</name></expr>:</case>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HASH_METHOD_IDIV10</name></expr>:</case>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HASH_METHOD_0</name></expr>:</case>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;</operator> <name>HASH_METHOD_X2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>hash</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>perf_hashmap</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>test_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>hashes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>TEST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>TEST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>alloc_test_entry</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hashes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>hash</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;</operator> <name>TEST_ADD</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>test_entry_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ent</name></expr></argument>, <argument><expr><name><name>hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>hashmap_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>test_entry_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <name>TEST_SPARSE</name><operator>)</operator></expr> ?</condition><then> <expr><name>TEST_SIZE</name> <operator>/</operator> <literal type="number">10</literal></expr> </then><else>: <expr><name>TEST_SIZE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ent</name></expr></argument>, <argument><expr><name><name>hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>hashmap_get_from_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name><name>hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>hashmap_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELIM</name></cpp:macro> <cpp:value>" \t\r\n"</cpp:value></cpp:define>













<function><type><name>int</name></type> <name>cmd__hashmap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>line</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>icase</name></decl>;</decl_stmt>


<expr_stmt><expr><name>icase</name> <operator>=</operator> <name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"ignorecase"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>test_entry_cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icase</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>strbuf_getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>test_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <ternary><condition><expr><name>icase</name></expr> ?</condition><then> <expr><call><name>strihash</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strhash</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>alloc_test_entry</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"put"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>alloc_test_entry</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hashmap_put_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><call><name>get_value</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hashmap_get_entry_from_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>,
<argument><expr>struct <name>test_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>hashmap_for_each_entry_from</name><argument_list>(<argument>&amp;map</argument>, <argument>entry</argument>, <argument>ent</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>get_value</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p1</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>rm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>rm</name> <operator>=</operator> <call><name>hashmap_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <ternary><condition><expr><name>rm</name></expr> ?</condition><then> <expr><call><name>container_of</name><argument_list>(<argument><expr><name>rm</name></expr></argument>, <argument><expr>struct <name>test_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><call><name>get_value</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"iterate"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>

<macro><name>hashmap_for_each_entry</name><argument_list>(<argument>&amp;map</argument>, <argument>&amp;iter</argument>, <argument>entry</argument>,
<argument>ent</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>get_value</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%u %u\n"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>.</operator><name>tablesize</name></name></expr></argument>,
<argument><expr><call><name>hashmap_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"intern"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p1</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>i1</name> <init>= <expr><call><name>strintern</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>i2</name> <init>= <expr><call><name>strintern</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>i1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"strintern(%s) returns %s\n"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i1</name> <operator>==</operator> <name>p1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"strintern(%s) returns input pointer\n"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i1</name> <operator>!=</operator> <name>i2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"strintern(%s) != strintern(%s)"</literal></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"perfhashmap"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perf_hashmap</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unknown command %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_free_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr>struct <name>test_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
