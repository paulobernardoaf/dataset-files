<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\t\helper\test-drop-caches.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GIT_WINDOWS_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lazyload.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwRet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>szVolumeAccessPath</name><index>[]</index></name> <init>= <expr><literal type="string">"\\\\.\\XXXX:"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hVolWrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dos_drive_prefix</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dwRet</name> <operator>=</operator> <call><name>GetCurrentDirectory</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>dwRet</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>dwRet</name> <operator>&gt;</operator> <name>MAX_PATH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Error getting current directory"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dos_drive_prefix</name> <operator>=</operator> <call><name>has_dos_drive_prefix</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dos_drive_prefix</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"'%s': invalid drive letter"</literal></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>szVolumeAccessPath</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>dos_drive_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>szVolumeAccessPath</name><index>[<expr><name>dos_drive_prefix</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hVolWrite</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>szVolumeAccessPath</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>INVALID_HANDLE_VALUE</name> <operator>==</operator> <name>hVolWrite</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to open volume for writing, need admin access"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>hVolWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to flush volume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hVolWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name>success</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_SUCCESS</name></cpp:macro> <cpp:value>(0x00000000L)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_PRIVILEGE_NOT_HELD</name></cpp:macro> <cpp:value>(0xC0000061L)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>_SYSTEM_INFORMATION_CLASS</name> <block>{
<decl><name>SystemMemoryListInformation</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>,
}</block></enum></type> <name>SYSTEM_INFORMATION_CLASS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_SYSTEM_MEMORY_LIST_COMMAND</name> <block>{
<decl><name>MemoryCaptureAccessedBits</name></decl>,
<decl><name>MemoryCaptureAndResetAccessedBits</name></decl>,
<decl><name>MemoryEmptyWorkingSets</name></decl>,
<decl><name>MemoryFlushModifiedList</name></decl>,
<decl><name>MemoryPurgeStandbyList</name></decl>,
<decl><name>MemoryPurgeLowPriorityStandbyList</name></decl>,
<decl><name>MemoryCommandMax</name></decl>
}</block></enum></type> <name>SYSTEM_MEMORY_LIST_COMMAND</name>;</typedef>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>GetPrivilege</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>TokenHandle</name></decl></parameter>, <parameter><decl><type><name>LPCSTR</name></type> <name>lpName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bResult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LUID</name></type> <name>luid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TOKEN_PRIVILEGES</name></type> <name>tpPreviousState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TOKEN_PRIVILEGES</name></type> <name>tpNewState</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dwBufferLength</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bResult</name> <operator>=</operator> <call><name>LookupPrivilegeValueA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lpName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>luid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bResult</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tpNewState</name><operator>.</operator><name>PrivilegeCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tpNewState</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Luid</name> <operator>=</operator> <name>luid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tpNewState</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Attributes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bResult</name> <operator>=</operator> <call><name>AdjustTokenPrivileges</name><argument_list>(<argument><expr><name>TokenHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tpNewState</name></expr></argument>,
<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>tpNewState</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>tpNewState</name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tpPreviousState</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwBufferLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bResult</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tpPreviousState</name><operator>.</operator><name>PrivilegeCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tpPreviousState</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Luid</name> <operator>=</operator> <name>luid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tpPreviousState</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Attributes</name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>bResult</name> <operator>=</operator> <call><name>AdjustTokenPrivileges</name><argument_list>(<argument><expr><name>TokenHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tpPreviousState</name></expr></argument>,
<argument><expr><name>dwBufferLength</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bResult</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_dropcaches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProcess</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hToken</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_PROC_ADDR</name><argument_list>(<argument><expr><name><name>ntdll</name><operator>.</operator><name>dll</name></name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>NtSetSystemInformation</name></expr></argument>, <argument><expr><name>INT</name></expr></argument>, <argument><expr><name>PVOID</name></expr></argument>, <argument><expr><name>ULONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SYSTEM_MEMORY_LIST_COMMAND</name></type> <name>command</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenProcessToken</name><argument_list>(<argument><expr><name>hProcess</name></expr></argument>, <argument><expr><name>TOKEN_QUERY</name> <operator>|</operator> <name>TOKEN_ADJUST_PRIVILEGES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hToken</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Can't open current process token"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetPrivilege</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>, <argument><expr><literal type="string">"SeProfileSingleProcessPrivilege"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Can't get SeProfileSingleProcessPrivilege"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INIT_PROC_ADDR</name><argument_list>(<argument><expr><name>NtSetSystemInformation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Could not find NtSetSystemInformation() function"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>command</name> <operator>=</operator> <name>MemoryPurgeStandbyList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtSetSystemInformation</name><argument_list>(
<argument><expr><name>SystemMemoryListInformation</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>command</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYSTEM_MEMORY_LIST_COMMAND</name></expr></argument>)</argument_list></sizeof></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>STATUS_PRIVILEGE_NOT_HELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Insufficient privileges to purge the standby list, need admin access"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <name>STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to execute the memory list command %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_dropcaches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"echo 3 | sudo tee /proc/sys/vm/drop_caches"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_dropcaches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"sudo purge"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_dropcaches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"drop caches not implemented on this platform"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>cmd__drop_caches</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cmd_sync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cmd_dropcaches</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
