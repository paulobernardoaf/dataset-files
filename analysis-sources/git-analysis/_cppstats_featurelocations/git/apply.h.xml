<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\apply.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APPLY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<struct_decl>struct <name>repository</name>;</struct_decl>

<enum>enum <name>apply_ws_error_action</name> <block>{
<decl><name>nowarn_ws_error</name></decl>,
<decl><name>warn_on_ws_error</name></decl>,
<decl><name>die_on_ws_error</name></decl>,
<decl><name>correct_ws_error</name></decl>
}</block>;</enum>

<enum>enum <name>apply_ws_ignore</name> <block>{
<decl><name>ignore_ws_none</name></decl>,
<decl><name>ignore_ws_change</name></decl>
}</block>;</enum>

<enum>enum <name>apply_verbosity</name> <block>{
<decl><name>verbosity_silent</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>verbosity_normal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>verbosity_verbose</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_SYMLINK_GOES_AWAY</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_SYMLINK_IN_RESULT</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>

<struct>struct <name>apply_state</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock_file</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>apply</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cached</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>check</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>check_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>update_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ita_only</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>diffstat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>numstat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>summary</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>allow_overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apply_in_reverse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apply_with_reject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>threeway</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unidiff_zero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unsafe_paths</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>index_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>apply_verbosity</name></name></type> <name>apply_verbosity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fake_ancestor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patch_input_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_termination</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_value_known</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>p_context</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>limit_by_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_include</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>linenr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>symlink_changes</name></decl>;</decl_stmt> 






<decl_stmt><decl><type><name>int</name></type> <name>max_change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_len</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>fn_table</name></decl>;</decl_stmt>






<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>saved_error_routine</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>saved_warn_routine</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>warn</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name><name>enum</name> <name>apply_ws_error_action</name></name></type> <name>ws_error_action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>apply_ws_ignore</name></name></type> <name>ws_ignore_action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whitespace_option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>whitespace_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>squelch_whitespace_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>applied_after_fixing_ws</name></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>patch</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>def_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_mode</name></decl>, <decl><type ref="prev"/><name>new_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_new</name></decl>, <decl><type ref="prev"/><name>is_delete</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rejected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines_added</name></decl>, <decl><type ref="prev"/><name>lines_deleted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extension_linenr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_toplevel_relative</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>inaccurate_eof</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_binary</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_copy</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_rename</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>recount</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>conflicted_threeway</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>direct_to_threeway</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crlf_in_old</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>fragments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>resultsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>old_oid_prefix</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>new_oid_prefix</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name><name>threeway_stage</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>apply_parse_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>force_apply</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>apply_usage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>init_apply_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clear_apply_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>check_apply_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_apply</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>parse_git_diff_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linenr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_OPT_INACCURATE_EOF</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_OPT_RECOUNT</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define> 

<function_decl><type><name>int</name></type> <name>apply_all_patches</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
