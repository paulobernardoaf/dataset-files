<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\commit-reach.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMMIT_REACH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMIT_REACH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-slab.h"</cpp:file></cpp:include>

<struct_decl>struct <name>commit_list</name>;</struct_decl>
<struct_decl>struct <name>ref_filter</name>;</struct_decl>
<struct_decl>struct <name>object_id</name>;</struct_decl>
<struct_decl>struct <name>object_array</name>;</struct_decl>

<function_decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>repo_get_merge_bases</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>rev1</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>rev2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>repo_get_merge_bases_many</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>twos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>repo_get_merge_bases_many_dirty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>twos</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_THE_REPOSITORY_COMPATIBILITY_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_merge_bases</name><parameter_list>(<parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_merge_bases(the_repository, r1, r2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_merge_bases_many</name><parameter_list>(<parameter><type><name>one</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>two</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_merge_bases_many(the_repository, one, n, two)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_merge_bases_many_dirty</name><parameter_list>(<parameter><type><name>one</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>twos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_merge_bases_many_dirty(the_repository, one, n, twos)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>get_octopus_merge_bases</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_descendant_of</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>with_commit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>repo_in_merge_bases</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>reference</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>repo_in_merge_bases_many</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nr_reference</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>reference</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_THE_REPOSITORY_COMPATIBILITY_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_merge_bases</name><parameter_list>(<parameter><type><name>c1</name></type></parameter>, <parameter><type><name>c2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_in_merge_bases(the_repository, c1, c2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_merge_bases_many</name><parameter_list>(<parameter><type><name>c1</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>cs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_in_merge_bases_many(the_repository, c1, n, cs)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function_decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>reduce_heads</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>heads</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>reduce_heads_replace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>heads</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ref_newer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>contains_result</name> <block>{
<decl><name>CONTAINS_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CONTAINS_NO</name></decl>,
<decl><name>CONTAINS_YES</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>define_commit_slab</name><argument_list>(<argument><expr><name>contains_cache</name></expr></argument>, <argument><expr>enum <name>contains_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>int</name></type> <name>commit_contains</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>contains_cache</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>can_all_from_reach_with_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>with_flag</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>assign_flag</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>min_commit_date</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>min_generation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>can_all_from_reach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>commit_date_cutoff</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>get_reachable_subset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_from</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_to</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>reachable_flag</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
