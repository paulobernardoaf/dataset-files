<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\zlib.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zerr_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_MEM_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"out of memory"</literal></expr>;</return>
<case>case <expr><name>Z_VERSION_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"wrong version"</literal></expr>;</return>
<case>case <expr><name>Z_NEED_DICT</name></expr>:</case>
<return>return <expr><literal type="string">"needs dictionary"</literal></expr>;</return>
<case>case <expr><name>Z_DATA_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"data stream error"</literal></expr>;</return>
<case>case <expr><name>Z_STREAM_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"stream consistency error"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown error"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_BUF_MAX</name></cpp:macro> <cpp:value>((uInt) 1024 * 1024 * 1024)</cpp:value></cpp:define> 
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uInt</name></type> <name>zlib_buf_cap</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ZLIB_BUF_MAX</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name>ZLIB_BUF_MAX</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zlib_pre_call</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <call><name>zlib_buf_cap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <call><name>zlib_buf_cap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avail_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zlib_post_call</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes_consumed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes_produced</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_consumed</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_in</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_produced</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_out</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>next_out</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>total_out</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>total_out</name></name> <operator>+</operator> <name>bytes_produced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"total_out mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>total_in</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>total_in</name></name> <operator>+</operator> <name>bytes_consumed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"total_in mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_in</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>total_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>-=</operator> <name>bytes_consumed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>-=</operator> <name>bytes_produced</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_inflate_init</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"inflateInit: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_inflate_init_gzip_only</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>windowBits</name> <init>= <expr><literal type="number">15</literal> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>windowBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"inflateInit2: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_inflate_end</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"inflateEnd: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_inflate</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_in</name></name> <operator>!=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>flush</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_MEM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"inflate: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_out</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>status</name> <operator>==</operator> <name>Z_OK</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>Z_BUF_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>Z_BUF_ERROR</name></expr>:</case>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<return>return <expr><name>status</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"inflate: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_DEFLATE_BOUND</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ZLIB_VERNUM</name> <operator>&lt;</operator> <literal type="number">0x1200</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deflateBound</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) + (((s) + 7) &gt;&gt; 3) + (((s) + 63) &gt;&gt; 6) + 11)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>unsigned</name> <name>long</name></type> <name>git_deflate_bound</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>deflateBound</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_deflate_init</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>strm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"deflateInit: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_git_deflate_init</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>windowBits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>strm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>deflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><name>Z_DEFLATED</name></expr></argument>, <argument><expr><name>windowBits</name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"deflateInit2: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_deflate_init_gzip</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>do_git_deflate_init</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_deflate_init_raw</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>do_git_deflate_init</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_deflate_abort</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_deflate_end</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>git_deflate_abort</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"deflateEnd: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_deflate_end_gently</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_deflate</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zlib_pre_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_in</name></name> <operator>!=</operator> <name><name>strm</name><operator>-&gt;</operator><name>avail_in</name></name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>flush</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_MEM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"deflate: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>zlib_post_call</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>strm</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_out</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>status</name> <operator>==</operator> <name>Z_OK</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>Z_BUF_ERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>Z_BUF_ERROR</name></expr>:</case>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<return>return <expr><name>status</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"deflate: %s (%s)"</literal></expr></argument>, <argument><expr><call><name>zerr_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>strm</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"no message"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
</unit>
