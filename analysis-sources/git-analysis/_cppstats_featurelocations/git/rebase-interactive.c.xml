<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\rebase-interactive.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sequencer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rebase-interactive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-slab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>edit_todo_list_advice</name><index>[]</index></name> <init>=
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"You can fix this with 'git rebase --edit-todo' "</literal>
<literal type="string">"and then run 'git rebase --continue'.\n"</literal>
<literal type="string">"Or you can abort the rebase with 'git rebase"</literal>
<literal type="string">" --abort'.\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<enum>enum <name>missing_commit_check_level</name> <block>{
<decl><name>MISSING_COMMIT_CHECK_IGNORE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MISSING_COMMIT_CHECK_WARN</name></decl>,
<decl><name>MISSING_COMMIT_CHECK_ERROR</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>missing_commit_check_level</name></name></type> <name>get_missing_commit_check_level</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_get_value</name><argument_list>(<argument><expr><literal type="string">"rebase.missingcommitscheck"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ignore"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MISSING_COMMIT_CHECK_IGNORE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"warn"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MISSING_COMMIT_CHECK_WARN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MISSING_COMMIT_CHECK_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized setting %s for option "</literal>
<literal type="string">"rebase.missingCommitsCheck. Ignoring."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MISSING_COMMIT_CHECK_IGNORE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>append_todo_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>command_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortrevisions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortonto</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nCommands:\n"</literal>
<literal type="string">"p, pick &lt;commit&gt; = use commit\n"</literal>
<literal type="string">"r, reword &lt;commit&gt; = use commit, but edit the commit message\n"</literal>
<literal type="string">"e, edit &lt;commit&gt; = use commit, but stop for amending\n"</literal>
<literal type="string">"s, squash &lt;commit&gt; = use commit, but meld into previous commit\n"</literal>
<literal type="string">"f, fixup &lt;commit&gt; = like \"squash\", but discard this commit's log message\n"</literal>
<literal type="string">"x, exec &lt;command&gt; = run command (the rest of the line) using shell\n"</literal>
<literal type="string">"b, break = stop here (continue rebase later with 'git rebase --continue')\n"</literal>
<literal type="string">"d, drop &lt;commit&gt; = remove commit\n"</literal>
<literal type="string">"l, label &lt;label&gt; = label current HEAD with a name\n"</literal>
<literal type="string">"t, reset &lt;label&gt; = reset HEAD to a label\n"</literal>
<literal type="string">"m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [#&lt;oneline&gt;]\n"</literal>
<literal type="string">". create a merge commit using the original merge commit's\n"</literal>
<literal type="string">". message (or the oneline, if no original merge commit was\n"</literal>
<literal type="string">". specified). Use -c &lt;commit&gt; to reword the commit message.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"These lines can be re-ordered; they are executed from top to bottom.\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>edit_todo</name> <init>= <expr><operator>!</operator><operator>(</operator><name>shortrevisions</name> <operator>&amp;&amp;</operator> <name>shortonto</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>edit_todo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_commented_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Rebase %s onto %s (%d command)"</literal></expr></argument>,
<argument><expr><literal type="string">"Rebase %s onto %s (%d commands)"</literal></expr></argument>,
<argument><expr><name>command_count</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>shortrevisions</name></expr></argument>, <argument><expr><name>shortonto</name></expr></argument>, <argument><expr><name>command_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add_commented_lines</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_missing_commit_check_level</name><argument_list>()</argument_list></call> <operator>==</operator> <name>MISSING_COMMIT_CHECK_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nDo not remove any line. Use 'drop' "</literal>
<literal type="string">"explicitly to remove a commit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nIf you remove a line here "</literal>
<literal type="string">"THAT COMMIT WILL BE LOST.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_add_commented_lines</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edit_todo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nYou are editing the todo file "</literal>
<literal type="string">"of an ongoing interactive rebase.\n"</literal>
<literal type="string">"To continue rebase after editing, run:\n"</literal>
<literal type="string">" git rebase --continue\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nHowever, if you remove everything, "</literal>
<literal type="string">"the rebase will be aborted.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_add_commented_lines</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>edit_todo_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>new_todo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortrevisions</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortonto</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>todo_file</name> <init>= <expr><call><name>rebase_path_todo</name><argument_list>()</argument_list></call></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>todo_backup</name> <init>= <expr><call><name>rebase_path_todo_backup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>initial</name> <init>= <expr><name>shortrevisions</name> <operator>&amp;&amp;</operator> <name>shortonto</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incorrect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initial</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>incorrect</name> <operator>=</operator> <call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>todo_list</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>todo_list</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>file_exists</name><argument_list>(<argument><expr><call><name>rebase_path_dropped</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>todo_list_write_to_file</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>todo_list</name></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>, <argument><expr><name>shortrevisions</name></expr></argument>, <argument><expr><name>shortonto</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>TODO_LIST_SHORTEN_IDS</name> <operator>|</operator> <name>TODO_LIST_APPEND_TODO_HELP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>incorrect</name> <operator>&amp;&amp;</operator>
<call><name>todo_list_write_to_file</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>todo_list</name></expr></argument>, <argument><expr><name>todo_backup</name></expr></argument>,
<argument><expr><name>shortrevisions</name></expr></argument>, <argument><expr><name>shortonto</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>TODO_LIST_APPEND_TODO_HELP</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>TODO_LIST_SHORTEN_IDS</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rebase_path_todo_backup</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>launch_sequence_editor</name><argument_list>(<argument><expr><name>todo_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_todo</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_stripspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_todo</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initial</name> <operator>&amp;&amp;</operator> <name><name>new_todo</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>new_todo</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>new_todo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>edit_todo_list_advice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>incorrect</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>todo_list_check_against_backup</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>new_todo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>rebase_path_dropped</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>incorrect</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>rebase_path_dropped</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>todo_list_check</name><argument_list>(<argument><expr><name>todo_list</name></expr></argument>, <argument><expr><name>new_todo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>rebase_path_dropped</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>define_commit_slab</name><argument_list>(<argument>commit_seen</argument>, <argument>unsigned char</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>






<function><type><name>int</name></type> <name>todo_list_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>old_todo</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>new_todo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>missing_commit_check_level</name></name></type> <name>check_level</name> <init>= <expr><call><name>get_missing_commit_check_level</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>missing</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_seen</name></name></type> <name>commit_seen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_commit_seen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commit_seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>check_level</name> <operator>==</operator> <name>MISSING_COMMIT_CHECK_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>leave_check</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>new_todo</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>new_todo</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>commit</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><call><name>commit_seen_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commit_seen</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>old_todo</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>todo_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>old_todo</name><operator>-&gt;</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>commit</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>commit</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><call><name>commit_seen_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commit_seen</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing</name></expr></argument>, <argument><expr><literal type="string">" - %s %.*s\n"</literal></expr></argument>,
<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>item</name><operator>-&gt;</operator><name>arg_len</name></name></expr></argument>,
<argument><expr><call><name>todo_item_get_arg</name><argument_list>(<argument><expr><name>old_todo</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>commit_seen_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commit_seen</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>missing</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>leave_check</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>check_level</name> <operator>==</operator> <name>MISSING_COMMIT_CHECK_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Warning: some commits may have been dropped accidentally.\n"</literal>
<literal type="string">"Dropped commits (newer to older):\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>missing</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"To avoid this message, use \"drop\" to "</literal>
<literal type="string">"explicitly remove a commit.\n\n"</literal>
<literal type="string">"Use 'git config rebase.missingCommitsCheck' to change "</literal>
<literal type="string">"the level of warnings.\n"</literal>
<literal type="string">"The possible behaviours are: ignore, warn, error.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>edit_todo_list_advice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>leave_check</name>:</label>
<expr_stmt><expr><call><name>clear_commit_seen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commit_seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>todo_list_check_against_backup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>todo_list</name></name></type> <name>backup</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backup</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>rebase_path_todo_backup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>backup</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_todo_list_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>todo_list</name></name></type> <name>old_todo</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>, <decl><type ref="prev"/><name>new_todo</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_todo</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>rebase_path_todo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rebase_path_todo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_todo</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>rebase_path_todo_backup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rebase_path_todo_backup</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>old_todo</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>new_todo</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>edit_todo_list_advice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_todo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
