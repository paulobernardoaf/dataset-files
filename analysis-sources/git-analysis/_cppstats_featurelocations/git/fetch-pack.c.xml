<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\fetch-pack.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkt-line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sideband.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fetch-pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oidset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connected.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fetch-negotiator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fsck.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transfer_unpack_limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fetch_unpack_limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>unpack_limit</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prefer_ofs_delta</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>no_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>deepen_since_ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>deepen_not_ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fetch_fsck_objects</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transfer_fsck_objects</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>agent_supported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>server_supports_filtering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lock_file</name></name></type> <name>shallow_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alternate_shallow_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>fsck_msg_types</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE</name></cpp:macro> <cpp:value>(1U &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALTERNATE</name></cpp:macro> <cpp:value>(1U &lt;&lt; 1)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IN_VAIN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>multi_ack</name></decl>, <decl><type ref="prev"/><name>use_sideband</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_TIP_SHA1</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_REACHABLE_SHA1</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>allow_unadvertised_object_request</name></decl>;</decl_stmt>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>print_verbose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>alternate_object_cache</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_one_alternate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vcache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>alternate_object_cache</name></name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name>vcache</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALTERNATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALTERNATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>cache</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>for_each_cached_alternate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>alternate_object_cache</name></name></type> <name>cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>for_each_alternate_ref</name><argument_list>(<argument><expr><name>cache_one_alternate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name><name>cache</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rev_list_insert_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>deref_tag</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,
<argument><expr><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>negotiator</name><operator>-&gt;</operator><name>add_tip</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rev_list_insert_ref_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rev_list_insert_ref</name><argument_list>(<argument><expr><name>cb_data</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>ack_type</name> <block>{
<decl><name>NAK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ACK</name></decl>,
<decl><name>ACK_continue</name></decl>,
<decl><name>ACK_common</name></decl>,
<decl><name>ACK_ready</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>consume_shallow_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen</name></name></expr>)</condition> <block>{<block_content>




<while>while <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"shallow "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"unshallow "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git fetch-pack: expected shallow list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git fetch-pack: expected a flush packet after shallow list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>ack_type</name></name></type> <name>get_ack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>result_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git fetch-pack: expected ACK/NAK, got a flush packet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>pktlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"NAK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NAK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"ACK "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_oid_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>result_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>p</name> <operator>-</operator> <name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ACK</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"continue"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ACK_continue</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"common"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ACK_common</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ready"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ACK_ready</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git fetch-pack: expected ACK/NAK, got '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>send_sideband</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>LARGE_PACKET_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to write to remote"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_one_alternate_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rev_list_insert_ref</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_FLUSH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIPESAFE_FLUSH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LARGE_FLUSH</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>next_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stateless_rpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stateless_rpc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>LARGE_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">11</literal> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>PIPESAFE_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>PIPESAFE_FLUSH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_tips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>negotiation_tips</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>negotiation_tips</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>rev_list_insert_ref_oid</name></expr></argument>, <argument><expr><name>negotiator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>negotiation_tips</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rev_list_insert_ref</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>negotiation_tips</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>result_oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fetching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flushes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flush_at</name> <init>= <expr><name>INITIAL_FLUSH</name></expr></init></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>in_vain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_continue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>req_buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>state_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packet_reader</name></name></type> <name>reader</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name> <operator>&amp;&amp;</operator> <name>multi_ack</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--stateless-rpc requires multi_ack_detailed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>packet_reader_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PACKET_READ_CHOMP_NEWLINE</name> <operator>|</operator>
<name>PACKET_READ_DIE_ON_ERR_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mark_tips</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>negotiation_tips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_cached_alternate</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>insert_one_alternate_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fetching</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>refs</name></expr> ;</condition> <incr><expr><name>refs</name> <operator>=</operator> <name><name>refs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>old_oid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_hex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>














<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookup_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMPLETE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>remote_hex</name> <operator>=</operator> <call><name>oid_to_hex</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fetching</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>c</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>multi_ack</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" multi_ack_detailed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>multi_ack</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" multi_ack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no_done</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" no-done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" side-band-64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" side-band"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_relative</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" deepen-relative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>use_thin_pack</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" thin-pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_progress</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" no-progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>include_tag</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" include-tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prefer_ofs_delta</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" ofs-delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>deepen_since_ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" deepen-since"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>deepen_not_ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" deepen-not"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>agent_supported</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" agent=%s"</literal></expr></argument>,
<argument><expr><call><name>git_user_agent_sanitized</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>filter_options</name><operator>.</operator><name>choice</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">" filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"want %s%s\n"</literal></expr></argument>, <argument><expr><name>remote_hex</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"want %s\n"</literal></expr></argument>, <argument><expr><name>remote_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>fetching</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fetching</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_shallow_commits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"deepen %d"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_since</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>max_age</name> <init>= <expr><call><name>approxidate</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>deepen_since</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"deepen-since %"</literal><name>PRItime</name></expr></argument>, <argument><expr><name>max_age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_not</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen_not</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>deepen_not</name><operator>-&gt;</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"deepen-not %s"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>server_supports_filtering</name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>filter_options</name><operator>.</operator><name>choice</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name> <init>=
<expr><call><name>expand_list_objects_filter_spec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>filter_options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"filter %s"</literal></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>packet_buf_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state_len</name> <operator>=</operator> <name><name>req_buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>send_request</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"shallow "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid shallow line: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>register_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"unshallow "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid unshallow line: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lookup_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"object not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error in object: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unregister_shallow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no shallow found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expected shallow/unshallow, got %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>send_request</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"negotiation_v0_v1"</literal></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flushes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>oid</name> <operator>=</operator> <call><name><name>negotiator</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"have %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"have %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_vain</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush_at</name> <operator>&lt;=</operator> <operator>++</operator><name>count</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ack</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packet_buf_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_request</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><name>state_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flushes</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flush_at</name> <operator>=</operator> <call><name>next_flush</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name> <operator>&amp;&amp;</operator> <name>count</name> <operator>==</operator> <name>INITIAL_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>consume_shallow_list</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>ack</name> <operator>=</operator> <call><name>get_ack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"got %s %d %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ack"</literal></expr></argument>,
<argument><expr><name>ack</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>ack</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACK</name></expr>:</case>
<expr_stmt><expr><name>flushes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_ack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
<case>case <expr><name>ACK_common</name></expr>:</case>
<case>case <expr><name>ACK_ready</name></expr>:</case>
<case>case <expr><name>ACK_continue</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>=
<expr><call><name>lookup_commit</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,
<argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>was_common</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid commit %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>was_common</name> <operator>=</operator> <call><name><name>negotiator</name><operator>-&gt;</operator><name>ack</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name>
<operator>&amp;&amp;</operator> <name>ack</name> <operator>==</operator> <name>ACK_common</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>was_common</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"have %s\n"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state_len</name> <operator>=</operator> <name><name>req_buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>in_vain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name>
<operator>||</operator> <name>ack</name> <operator>!=</operator> <name>ACK_common</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_vain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_continue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ack</name> <operator>==</operator> <name>ACK_ready</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_ready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><name>ack</name></expr>)</condition>;</do>
<expr_stmt><expr><name>flushes</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_continue</name> <operator>&amp;&amp;</operator> <name>MAX_IN_VAIN</name> <operator>&lt;</operator> <name>in_vain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"giving up"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>got_ready</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"negotiation_v0_v1"</literal></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_ready</name> <operator>||</operator> <operator>!</operator><name>no_done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_request</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>multi_ack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flushes</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_ready</name> <operator>||</operator> <operator>!</operator><name>no_done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>consume_shallow_list</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>flushes</name> <operator>||</operator> <name>multi_ack</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ack</name> <init>= <expr><call><name>get_ack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ack</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"got %s (%d) %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ack"</literal></expr></argument>,
<argument><expr><name>ack</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ack</name> <operator>==</operator> <name>ACK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>multi_ack</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flushes</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>count</name></expr> ?</condition><then> <expr><name>retval</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>complete</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mark_complete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tag</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator>struct <name>tag</name> <operator>*</operator><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>tagged</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>COMPLETE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>tagged</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMPLETE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>COMPLETE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mark_complete_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mark_complete</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_recent_complete_commits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>timestamp_t</name></type> <name>cutoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>complete</name> <operator>&amp;&amp;</operator> <name>cutoff</name> <operator>&lt;=</operator> <name><name>complete</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Marking %s as complete"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>complete</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pop_most_recent_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>complete</name></expr></argument>, <argument><expr><name>COMPLETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_refs_to_oidset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>oids</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>refs</name></expr>;</condition> <incr><expr><name>refs</name> <operator>=</operator> <name><name>refs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>refs</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_unmatched_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<return>return <expr><name><name>ref</name><operator>-&gt;</operator><name>match_status</name></name> <operator>==</operator> <name>REF_NOT_MATCHED</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>parse_oid_hex</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>newlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>newtail</name> <init>= <expr><operator>&amp;</operator><name>newlist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>unmatched</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>tip_oids</name> <init>= <expr><name>OIDSET_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strict</name> <init>= <expr><operator>!</operator><operator>(</operator><name>allow_unadvertised_object_request</name> <operator>&amp;</operator>
<operator>(</operator><name>ALLOW_TIP_SHA1</name> <operator>|</operator> <name>ALLOW_REACHABLE_SHA1</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <operator>*</operator><name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>free_one_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nr_sought</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>match_status</name> <operator>=</operator> <name>REF_MATCHED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep</name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>fetch_all</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name> <operator>||</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>newtail</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newtail</name> <operator>=</operator> <operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>unmatched</name></expr>;</expr_stmt>
<expr_stmt><expr><name>unmatched</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_sought</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_unmatched_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_refs_to_oidset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tip_oids</name></expr></argument>, <argument><expr><name>unmatched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_refs_to_oidset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tip_oids</name></expr></argument>, <argument><expr><name>newlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_sought</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_unmatched_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict</name> <operator>||</operator> <call><name>oidset_contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tip_oids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>match_status</name></name> <operator>=</operator> <name>REF_MATCHED</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>newtail</name> <operator>=</operator> <call><name>copy_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newtail</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>newtail</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>match_status</name></name> <operator>=</operator> <name>REF_UNADVERTISED_NOT_ALLOWED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tip_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_refs</name><argument_list>(<argument><expr><name>unmatched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>refs</name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_alternate_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>unused</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mark_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>loose_object_iter</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>loose_object_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>refs</name></decl>;</decl_stmt>
}</block>;</struct>











<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_complete_and_common_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_save_commit_buffer</name> <init>= <expr><name>save_commit_buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>cutoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>save_commit_buffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"parse_remote_refs_and_find_cutoff"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <operator>*</operator><name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_object_file_with_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>,
<argument><expr><name>OBJECT_INFO_QUICK</name> <operator>|</operator>
<name>OBJECT_INFO_SKIP_FETCH_OBJECT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cutoff</name> <operator>||</operator> <name>cutoff</name> <operator>&lt;</operator> <name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"parse_remote_refs_and_find_cutoff"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"mark_complete_local_refs"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>mark_complete_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_cached_alternate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mark_alternate_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_list_sort_by_date</name><argument_list>(<argument><expr><operator>&amp;</operator><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cutoff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_recent_complete_commits</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>cutoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"mark_complete_local_refs"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"mark_common_remote_refs"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <operator>*</operator><name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>deref_tag</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,
<argument><expr><call><name>lookup_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMPLETE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>negotiator</name><operator>-&gt;</operator><name>known_common</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><literal type="string">"mark_common_remote_refs"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_commit_buffer</name> <operator>=</operator> <name>old_save_commit_buffer</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>everything_local</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>ref</name> <operator>=</operator> <operator>*</operator><name>refs</name></expr>;</init> <condition><expr><name>ref</name></expr> ;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>lookup_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMPLETE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"want %s (%s)"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"already have %s (%s)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sideband_demux</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>xd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recv_sideband</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>, <argument><expr><name><name>xd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_promisor_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keep_name</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>promisor_name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suffix_stripped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>promisor_name</name></expr></argument>, <argument><expr><name>keep_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>suffix_stripped</name> <operator>=</operator> <call><name>strbuf_strip_suffix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>promisor_name</name></expr></argument>, <argument><expr><literal type="string">".keep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>suffix_stripped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"name of pack lockfile should end with .keep (was '%s')"</literal></expr></argument>,
<argument><expr><name>keep_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>promisor_name</name></expr></argument>, <argument><expr><literal type="string">".promisor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>xfopen</name><argument_list>(<argument><expr><name><name>promisor_name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_sought</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>old_oid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>promisor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>xd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pack_lockfile</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>async</name></name></type> <name>demux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_keep</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>keep_pack</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pass_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>cmd</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>demux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>proc</name></name> <operator>=</operator> <name>sideband_demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>xd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>isolate_sigpipe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>start_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"fetch-pack: unable to fork off sideband demultiplexer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>demux</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name><name>xd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>keep_pack</name></name> <operator>&amp;&amp;</operator> <name>unpack_limit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_pack_header</name><argument_list>(<argument><expr><name><name>demux</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"protocol error: bad pack header"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pass_header</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>hdr_entries</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>unpack_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_keep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>do_keep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alternate_shallow_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--shallow-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>alternate_shallow_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_keep</name> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>from_promisor</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pack_lockfile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmd_name</name> <operator>=</operator> <literal type="string">"index-pack"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>no_progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>use_thin_pack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--fix-thin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_keep</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>lock_pack</name></name> <operator>||</operator> <name>unpack_limit</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>HOST_NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xgethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>,
<argument><expr><literal type="string">"--keep=fetch-pack %"</literal><name>PRIuMAX</name> <literal type="string">" on %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>check_self_contained_and_connected</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--check-self-contained-and-connected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>do_keep</name> <operator>&amp;&amp;</operator> <name>pack_lockfile</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>from_promisor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--promisor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>cmd_name</name> <operator>=</operator> <literal type="string">"unpack-objects"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>quiet</name></name> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>no_progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>check_self_contained_and_connected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pass_header</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--pack_header=%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>hdr_version</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>hdr_entries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>fetch_fsck_objects</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>fetch_fsck_objects</name></expr>
</then><else>: <expr><ternary><condition><expr><name>transfer_fsck_objects</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>transfer_fsck_objects</name></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>from_promisor</name></name></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--fsck-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--strict%s"</literal></expr></argument>,
<argument><expr><name><name>fsck_msg_types</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name><name>demux</name><operator>.</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"fetch-pack: unable to fork off %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_keep</name> <operator>&amp;&amp;</operator> <name>pack_lockfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pack_lockfile</name> <operator>=</operator> <call><name>index_pack_lockfile</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_sideband</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>||</operator> <operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>check_self_contained_and_connected</name></name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>self_contained_and_connected</name></name> <operator>=</operator>
<name><name>args</name><operator>-&gt;</operator><name>check_self_contained_and_connected</name></name> <operator>&amp;&amp;</operator>
<name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sideband</name> <operator>&amp;&amp;</operator> <call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error in sideband demultiplexer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>do_keep</name> <operator>&amp;&amp;</operator> <name>pack_lockfile</name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>from_promisor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_promisor_file</name><argument_list>(<argument><expr><operator>*</operator><name>pack_lockfile</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_ref_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>ref</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a_</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>ref</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b_</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>do_fetch_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>orig_ref</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pack_lockfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>the_repository</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>copy_ref_list</name><argument_list>(<argument><expr><name>orig_ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>agent_feature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>agent_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name></type> <name>negotiator_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negotiator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>negotiator</name> <operator>=</operator> <operator>&amp;</operator><name>negotiator_alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fetch_negotiator_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>negotiator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sort_ref_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>ref_compare_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>, <argument><expr><name>cmp_ref_by_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>agent_feature</name> <operator>=</operator> <call><name>server_feature_value</name><argument_list>(<argument><expr><literal type="string">"agent"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>agent_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>agent_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>agent_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server version is %.*s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>agent_len</name></expr></argument>, <argument><expr><name>agent_feature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"shallow"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"shallow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server does not support shallow clients"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen_since</name></name> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen_not</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"multi_ack_detailed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"multi_ack_detailed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_ack</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"no-done"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no-done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>no_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"multi_ack"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"multi_ack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_ack</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"side-band-64k"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"side-band-64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>use_sideband</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"side-band"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"side-band"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>use_sideband</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"allow-tip-sha1-in-want"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"allow-tip-sha1-in-want"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>allow_unadvertised_object_request</name> <operator>|=</operator> <name>ALLOW_TIP_SHA1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"allow-reachable-sha1-in-want"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"allow-reachable-sha1-in-want"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>allow_unadvertised_object_request</name> <operator>|=</operator> <name>ALLOW_REACHABLE_SHA1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"thin-pack"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"thin-pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>use_thin_pack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"no-progress"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no-progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>no_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"include-tag"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"include-tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>include_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"ofs-delta"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ofs-delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prefer_ofs_delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"filter"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>server_supports_filtering</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>filter_options</name><operator>.</operator><name>choice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"filtering not recognized by server, ignoring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"deepen-since"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"deepen-since"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deepen_since_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_since</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server does not support --shallow-since"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"deepen-not"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"deepen-not"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deepen_not_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_not</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server does not support --shallow-exclude"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports</name><argument_list>(<argument><expr><literal type="string">"deepen-relative"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"deepen-relative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_relative</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server does not support --deepen"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mark_complete_and_common_ref</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_refs</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>everything_local</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>all_done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>filter_refs</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>find_common</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>keep_pack</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no common commits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>stateless_rpc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setup_alternate_shallow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alternate_shallow_file</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>||</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator> <call><name>setup_temporary_shallow</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_pack</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pack_lockfile</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git fetch-pack: fetch failed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>all_done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>negotiator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>negotiator</name><operator>-&gt;</operator><name>release</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_shallow_requests</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>req_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_shallow_commits</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"deepen %d"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_since</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>max_age</name> <init>= <expr><call><name>approxidate</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>deepen_since</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"deepen-since %"</literal><name>PRItime</name></expr></argument>, <argument><expr><name>max_age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_not</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen_not</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>deepen_not</name><operator>-&gt;</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"deepen-not %s"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen_relative</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"deepen-relative\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_wants</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>no_dependents</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>wants</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>req_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>use_ref_in_want</name> <init>= <expr><call><name>server_supports_feature</name><argument_list>(<argument><expr><literal type="string">"fetch"</literal></expr></argument>, <argument><expr><literal type="string">"ref-in-want"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>wants</name></expr> ;</condition> <incr><expr><name>wants</name> <operator>=</operator> <name><name>wants</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><operator>&amp;</operator><name><name>wants</name><operator>-&gt;</operator><name>old_oid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>














<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_dependents</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookup_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMPLETE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_ref_in_want</name> <operator>||</operator> <name><name>wants</name><operator>-&gt;</operator><name>exact_oid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"want %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"want-ref %s\n"</literal></expr></argument>, <argument><expr><name><name>wants</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>req_buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>common</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oidset_iter_init</name><argument_list>(<argument><expr><name>common</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>oid</name> <operator>=</operator> <call><name>oidset_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"have %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_haves</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>req_buf</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>haves_to_send</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>in_vain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>haves_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>oid</name> <operator>=</operator> <call><name><name>negotiator</name><operator>-&gt;</operator><name>next</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"have %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>haves_added</name> <operator>&gt;=</operator> <operator>*</operator><name>haves_to_send</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>in_vain</name> <operator>+=</operator> <name>haves_added</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haves_added</name> <operator>||</operator> <operator>*</operator><name>in_vain</name> <operator>&gt;=</operator> <name>MAX_IN_VAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>haves_to_send</name> <operator>=</operator> <call><name>next_flush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>haves_to_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_fetch_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_out</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>wants</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>common</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>haves_to_send</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>in_vain</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sideband_all</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>req_buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>server_supports_v2</name><argument_list>(<argument><expr><literal type="string">"fetch"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"command=fetch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>server_supports_v2</name><argument_list>(<argument><expr><literal type="string">"agent"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"agent=%s"</literal></expr></argument>, <argument><expr><call><name>git_user_agent_sanitized</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>server_options</name></name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>server_options</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator>
<call><name>server_supports_v2</name><argument_list>(<argument><expr><literal type="string">"server-option"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>-&gt;</operator><name>server_options</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"server-option=%s"</literal></expr></argument>,
<argument><expr><name><name>args</name><operator>-&gt;</operator><name>server_options</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>packet_buf_delim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>use_thin_pack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"thin-pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"no-progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>include_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"include-tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prefer_ofs_delta</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"ofs-delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sideband_all</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"sideband-all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>server_supports_feature</name><argument_list>(<argument><expr><literal type="string">"fetch"</literal></expr></argument>, <argument><expr><literal type="string">"shallow"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_shallow_requests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server does not support shallow requests"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>server_supports_feature</name><argument_list>(<argument><expr><literal type="string">"fetch"</literal></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>args</name><operator>-&gt;</operator><name>filter_options</name><operator>.</operator><name>choice</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name> <init>=
<expr><call><name>expand_list_objects_filter_spec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>filter_options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_verbose</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server supports filter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"filter %s"</literal></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>filter_options</name><operator>.</operator><name>choice</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"filtering not recognized by server, ignoring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>add_wants</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr></argument>, <argument><expr><name>wants</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><name>common</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>add_haves</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>, <argument><expr><name>haves_to_send</name></expr></argument>, <argument><expr><name>in_vain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>packet_buf_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd_out</name></expr></argument>, <argument><expr><name><name>req_buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>req_buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to write request to remote"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>process_section_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>peek</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>packet_reader_peek</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error reading section header '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>peek</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expected '%s', received '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>section</name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_acks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>common</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>received_ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>received_ack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>process_section_header</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"acknowledgments"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"NAK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"ACK "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>common</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>negotiator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>negotiator</name><operator>-&gt;</operator><name>ack</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"ready"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>received_ready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unexpected acknowledgment line: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_FLUSH</name> <operator>&amp;&amp;</operator>
<name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_DELIM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error processing acks: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>received_ready</name> <operator>&amp;&amp;</operator> <name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_DELIM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expected packfile to be sent after 'ready'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>received_ready</name> <operator>&amp;&amp;</operator> <name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expected no other sections to be sent after no 'ready'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><ternary><condition><expr><name>received_ready</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>received_ack</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>receive_shallow_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>shallows</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>unshallow_received</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>process_section_header</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"shallow-info"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"shallow "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid shallow line: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><name>shallows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"unshallow "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid unshallow line: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lookup_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"object not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error in object: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unregister_shallow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no shallow found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unshallow_received</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expected shallow/unshallow, got %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_FLUSH</name> <operator>&amp;&amp;</operator>
<name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_DELIM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error processing shallow info: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name> <operator>||</operator> <name>unshallow_received</name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shallows</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>register_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shallows</name><operator>-&gt;</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>setup_alternate_shallow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alternate_shallow_file</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>shallows</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>prepare_shallow_info</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>shallows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>||</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator>
<call><name>setup_temporary_shallow</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_name_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator>struct <name>ref</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ref</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>receive_wanted_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packet_reader</name></name> <modifier>*</modifier></type><name>reader</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>process_section_header</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"wanted-refs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>packet_reader_read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PACKET_READ_NORMAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_oid_hex</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>end</name><operator>++</operator> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expected wanted-ref, got '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sought</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>cmp_name_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unexpected wanted-ref: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>found</name><operator>)</operator><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>PACKET_READ_DELIM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error processing wanted refs: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<enum>enum <name>fetch_state</name> <block>{
<decl><name>FETCH_CHECK_LOCAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FETCH_SEND_REQUEST</name></decl>,
<decl><name>FETCH_PROCESS_ACKS</name></decl>,
<decl><name>FETCH_GET_PACK</name></decl>,
<decl><name>FETCH_DONE</name></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>do_fetch_pack_v2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>orig_ref</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>shallows</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pack_lockfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>the_repository</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>copy_ref_list</name><argument_list>(<argument><expr><name>orig_ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>fetch_state</name></name></type> <name>state</name> <init>= <expr><name>FETCH_CHECK_LOCAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>common</name> <init>= <expr><name>OIDSET_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packet_reader</name></name></type> <name>reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_vain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>negotiation_started</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>haves_to_send</name> <init>= <expr><name>INITIAL_FLUSH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name></type> <name>negotiator_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fetch_negotiator</name></name> <modifier>*</modifier></type><name>negotiator</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negotiator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>negotiator</name> <operator>=</operator> <operator>&amp;</operator><name>negotiator_alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fetch_negotiator_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>negotiator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>packet_reader_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PACKET_READ_CHOMP_NEWLINE</name> <operator>|</operator>
<name>PACKET_READ_DIE_ON_ERR_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_SIDEBAND_ALL"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>server_supports_feature</name><argument_list>(<argument><expr><literal type="string">"fetch"</literal></expr></argument>, <argument><expr><literal type="string">"sideband-all"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>use_sideband</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>me</name></name> <operator>=</operator> <literal type="string">"fetch-pack"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>state</name> <operator>!=</operator> <name>FETCH_DONE</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FETCH_CHECK_LOCAL</name></expr>:</case>
<expr_stmt><expr><call><name>sort_ref_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>ref_compare_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>, <argument><expr><name>cmp_ref_by_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>allow_unadvertised_object_request</name> <operator>|=</operator> <name>ALLOW_REACHABLE_SHA1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_sideband</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen_since</name></name> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen_not</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mark_complete_and_common_ref</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_refs</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>everything_local</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_DONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_SEND_REQUEST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mark_tips</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>negotiation_tips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_cached_alternate</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>,
<argument><expr><name>insert_one_alternate_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>filter_refs</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_SEND_REQUEST</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FETCH_SEND_REQUEST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>negotiation_started</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negotiation_started</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>,
<argument><expr><literal type="string">"negotiation_v2"</literal></expr></argument>,
<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>send_fetch_request</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>common</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>haves_to_send</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_vain</name></expr></argument>,
<argument><expr><name><name>reader</name><operator>.</operator><name>use_sideband</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_GET_PACK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_PROCESS_ACKS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FETCH_PROCESS_ACKS</name></expr>:</case>

<switch>switch <condition>(<expr><call><name>process_acks</name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>common</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_GET_PACK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>in_vain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_SEND_REQUEST</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>FETCH_GET_PACK</name></expr>:</case>
<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"fetch-pack"</literal></expr></argument>,
<argument><expr><literal type="string">"negotiation_v2"</literal></expr></argument>,
<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>process_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><literal type="string">"shallow-info"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>receive_shallow_info</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>shallows</name></expr></argument>, <argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>process_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><literal type="string">"wanted-refs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>receive_wanted_refs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>process_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><literal type="string">"packfile"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_pack</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pack_lockfile</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git fetch-pack: fetch failed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>FETCH_DONE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FETCH_DONE</name></expr>:</case>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>negotiator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>negotiator</name><operator>-&gt;</operator><name>release</name></name><argument_list>(<argument><expr><name>negotiator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>common</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_pack_config_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"fetch.fsck.skiplist"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsck_msg_types</name></expr></argument>, <argument><expr><literal type="string">"%cskiplist=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>fsck_msg_types</name><operator>.</operator><name>len</name></name></expr> ?</condition><then> <expr><literal type="char">','</literal></expr> </then><else>: <expr><literal type="char">'='</literal></expr></else></ternary></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"fetch.fsck."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_valid_msg_type</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsck_msg_types</name></expr></argument>, <argument><expr><literal type="string">"%c%s=%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>fsck_msg_types</name><operator>.</operator><name>len</name></name></expr> ?</condition><then> <expr><literal type="char">','</literal></expr> </then><else>: <expr><literal type="char">'='</literal></expr></else></ternary></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Skipping unknown msg id '%s'"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fetch_pack_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"fetch.unpacklimit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetch_unpack_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"transfer.unpacklimit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>transfer_unpack_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"repack.usedeltabaseoffset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefer_ofs_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"fetch.fsckobjects"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetch_fsck_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"transfer.fsckobjects"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>transfer_fsck_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>fetch_pack_config_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fetch_pack_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_setup</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>did_setup</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fetch_pack_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>transfer_unpack_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unpack_limit</name> <operator>=</operator> <name>transfer_unpack_limit</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>fetch_unpack_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unpack_limit</name> <operator>=</operator> <name>fetch_unpack_limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>did_setup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_duplicates_in_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>names</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name>dst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><name><name>ref</name><index>[<expr><name>src</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>src</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>src</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name>dst</name></expr>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_shallow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>shallow_info</name></name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>ref</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name> <operator>&amp;&amp;</operator> <name>alternate_shallow_file</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>alternate_shallow_file</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><call><name>git_path_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>shallow</name></name> <operator>||</operator> <operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>cloning</name></name></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>extra</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>oid</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>has_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>extra</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setup_alternate_shallow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>alternate_shallow_file</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_nonexistent_theirs_shallow</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_sought</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>old_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <operator>&amp;</operator><name>ref</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>update_shallow</name></name></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>extra</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>shallow</name><operator>-&gt;</operator><name>oid</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assign_shallow_commits_to_refs</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oid</name><index>[<expr><name><name>si</name><operator>-&gt;</operator><name>ours</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oid</name><index>[<expr><name><name>si</name><operator>-&gt;</operator><name>theirs</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>setup_alternate_shallow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>alternate_shallow_file</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alternate_shallow_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>nr_sought</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assign_shallow_commits_to_refs</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>nr_ours</name></name> <operator>||</operator> <name><name>si</name><operator>-&gt;</operator><name>nr_theirs</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_sought</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>status</name> <operator>=</operator> <name>REF_STATUS_REJECT_SHALLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iterate_ref_map</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>rm</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>*</operator><name>rm</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><operator>*</operator><name>rm</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>old_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>fetch_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fetch_pack_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>fd</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>shallow</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pack_lockfile</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>protocol_version</name></name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref_cpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>shallow_info</name></name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>shallows_scratch</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fetch_pack_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr_sought</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nr_sought</name> <operator>=</operator> <call><name>remove_duplicates_in_refs</name><argument_list>(<argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_dependents</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>filter_options</name><operator>.</operator><name>choice</name></name></expr>)</condition> <block>{<block_content>










<expr_stmt><expr><call><name>parse_list_objects_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>filter_options</name></name></expr></argument>, <argument><expr><literal type="string">"blob:none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <name>protocol_v2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_flush</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no matching remote head"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>protocol_v2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shallow</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Protocol V2 does not provide shallows at this point in the fetch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_cpy</name> <operator>=</operator> <call><name>do_fetch_pack_v2</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>shallows_scratch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>,
<argument><expr><name>pack_lockfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>prepare_shallow_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><name>shallow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_cpy</name> <operator>=</operator> <call><name>do_fetch_pack</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><name>pack_lockfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>reprepare_packed_git</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>cloning</name></name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>deepen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>check_connected_options</name></name></type> <name>opt</name> <init>= <expr><name>CHECK_CONNECTED_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>ref_cpy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>shallow_file</name></name> <operator>=</operator> <name>alternate_shallow_file</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>deepen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>is_deepening_fetch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_connected</name><argument_list>(<argument><expr><name>iterate_ref_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"remote did not send all necessary objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_refs</name><argument_list>(<argument><expr><name>ref_cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_cpy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallow_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>connectivity_checked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_shallow</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>sought</name></expr></argument>, <argument><expr><name>nr_sought</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>clear_shallow_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shallows_scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ref_cpy</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>report_unmatched_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sought</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_sought</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_sought</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>match_status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REF_MATCHED</name></expr>:</case>
<continue>continue;</continue>
<case>case <expr><name>REF_NOT_MATCHED</name></expr>:</case>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no such remote ref %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>REF_UNADVERTISED_NOT_ALLOWED</name></expr>:</case>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server does not allow request for unadvertised object %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sought</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
