<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\config.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"branch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<struct>struct <name>config_source</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<struct>struct <name>config_buf</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
}</block> <decl><name>buf</name></decl>;</struct>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name><name>enum</name> <name>config_origin_type</name></name></type> <name>origin_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>config_error_action</name></name></type> <name>default_error_action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>subsection_case_sensitive</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>do_fgetc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>do_ungetc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>do_ftell</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

















<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>cf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>key_value_info</name></name> <modifier>*</modifier></type><name>current_config_kvi</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>config_scope</name></name></type> <name>current_parsing_scope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>core_compression_seen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pack_compression_seen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>zlib_compression_seen</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_file_fgetc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>getc_unlocked</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_file_ungetc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>config_file_ftell</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ftell</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>config_buf_fgetc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>pos</name></name><operator>++</operator></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_buf_ungetc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"config_buf can only ungetc the same character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>config_buf_ftell</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>conf</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INCLUDE_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>include_depth_advice</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(
<argument><expr><literal type="string">"exceeded maximum include depth (%d) while including\n"</literal>
<literal type="string">" %s\n"</literal>
<literal type="string">"from\n"</literal>
<literal type="string">" %s\n"</literal>
<literal type="string">"This might be due to circular includes."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_path_include</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>config_include_data</name></name> <modifier>*</modifier></type><name>inc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expanded</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><literal type="string">"include.path"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>expanded</name> <operator>=</operator> <call><name>expand_user_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expanded</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not expand include path '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>expanded</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_absolute_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cf</name> <operator>||</operator> <operator>!</operator><name><name>cf</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"relative config includes must come from files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>find_last_dir_sep</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>slash</name> <operator>-</operator> <name><name>cf</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>access_or_die</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>inc</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name>MAX_INCLUDE_DEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>include_depth_advice</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_INCLUDE_DEPTH</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><name>cf</name></expr> ?</condition><then> <expr><literal type="string">"&lt;unknown&gt;"</literal></expr> </then><else>:
<expr><ternary><condition><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>:
<expr><literal type="string">"the command line"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>git_config_from_file</name><argument_list>(<argument><expr><name>git_config_include</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inc</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>expanded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_trailing_starstar_for_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>pat</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prepare_include_condition_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expanded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>expanded</name> <operator>=</operator> <call><name>expand_user_path</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expanded</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>expanded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>expanded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cf</name> <operator>||</operator> <operator>!</operator><name><name>cf</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"relative config include "</literal>
<literal type="string">"conditionals must come from files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_realpath</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>find_last_dir_sep</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"how is this possible?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_splice</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>slash</name> <operator>-</operator> <name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>slash</name> <operator>-</operator> <name><name>path</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_absolute_path</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_insertstr</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"**/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_trailing_starstar_for_dir</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>prefix</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>include_by_gitdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cond_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>icase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>text</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>pattern</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>already_tried_absolute</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>git_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>git_dir</name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>git_dir</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_realpath</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><name>git_dir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>prepare_include_condition_pattern</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>text</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <name>prefix</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icase</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>pattern</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>text</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>icase</name> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>pattern</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>text</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>wildmatch</name><argument_list>(<argument><expr><name><name>pattern</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>prefix</name></expr></argument>, <argument><expr><name><name>text</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>prefix</name></expr></argument>,
<argument><expr><name>WM_PATHNAME</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>icase</name></expr> ?</condition><then> <expr><name>WM_CASEFOLD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>already_tried_absolute</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_add_absolute_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><name>git_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>already_tried_absolute</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>include_by_branch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cond_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>pattern</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name><name>the_repository</name><operator>-&gt;</operator><name>gitdir</name></name></expr> ?</condition><then>
<expr><name>NULL</name></expr> </then><else>: <expr><call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>refname</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>shortname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_trailing_starstar_for_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>wildmatch</name><argument_list>(<argument><expr><name><name>pattern</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>shortname</name></expr></argument>, <argument><expr><name>WM_PATHNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>include_condition_is_true</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cond_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix_mem</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>, <argument><expr><literal type="string">"gitdir:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>include_by_gitdir</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>skip_prefix_mem</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>, <argument><expr><literal type="string">"gitdir/i:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>include_by_gitdir</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>skip_prefix_mem</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>, <argument><expr><literal type="string">"onbranch:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>include_by_branch</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_include</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_include_data</name></name> <modifier>*</modifier></type><name>inc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cond</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cond_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>inc</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>inc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"include.path"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handle_path_include</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_config_key</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"includeif"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>cond</name> <operator>&amp;&amp;</operator> <call><name>include_condition_is_true</name><argument_list>(<argument><expr><name><name>inc</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>cond_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handle_path_include</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_config_push_parameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>env</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>CONFIG_DATA_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>old</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sq_quote_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>CONFIG_DATA_ENVIRONMENT</name></expr></argument>, <argument><expr><name><name>env</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>iskeychar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>git_config_parse_key_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>baselen_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quiet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dot</name></decl>, <decl><type ref="prev"/><name>baselen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_dot</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>last_dot</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>last_dot</name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"key does not contain a section: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><name>CONFIG_NO_SECTION_OR_NAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>last_dot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"key does not contain variable name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><name>CONFIG_NO_SECTION_OR_NAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>baselen</name> <operator>=</operator> <name>last_dot</name> <operator>-</operator> <name>key</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>baselen_</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>baselen_</name> <operator>=</operator> <name>baselen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>store_key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_key</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dot</name> <operator>||</operator> <name>i</name> <operator>&gt;</operator> <name>baselen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iskeychar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>i</name> <operator>==</operator> <name>baselen</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid key: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>out_free_ret_1</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid key (newline): %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>out_free_ret_1</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>store_key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>store_key</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>out_free_ret_1</name>:</label>
<if_stmt><if>if <condition>(<expr><name>store_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><operator>*</operator><name>store_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><name>CONFIG_INVALID_KEY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_parse_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>baselen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_parse_key_1</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>store_key</name></expr></argument>, <argument><expr><name>baselen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_key_is_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>git_config_parse_key_1</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_parse_parameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>canonical_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>strbuf_split_str</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bogus config parameter: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name> <operator>&amp;&amp;</operator> <name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>buf</name><index>[<expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>buf</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_trim</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_list_free</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bogus config parameter: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_parse_key</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>canonical_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>fn</name><argument_list>(<argument><expr><name>canonical_name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>canonical_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>strbuf_list_free</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_from_parameters</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>CONFIG_DATA_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>config_source</name></name></type> <name>source</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><operator>.</operator><name>origin_type</name></name> <operator>=</operator> <name>CONFIG_ORIGIN_CMDLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <operator>&amp;</operator><name>source</name></expr>;</expr_stmt>


<expr_stmt><expr><name>envw</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sq_dequote_to_argv</name><argument_list>(<argument><expr><name>envw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bogus format in %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CONFIG_DATA_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>git_config_parse_parameter</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_next_char</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>cf</name><operator>-&gt;</operator><name>do_fgetc</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>cf</name><operator>-&gt;</operator><name>do_fgetc</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cf</name><operator>-&gt;</operator><name>do_ungetc</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>quote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>comment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>get_next_char</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>cf</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>quote</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>space</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>space</name></expr>;</condition> <incr><expr><name>space</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_next_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<continue>continue;</continue>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <case>case <expr><literal type="char">'"'</literal></expr>:</case>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>quote</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_value</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_next_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iskeychar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_next_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>parse_value</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_extended_base_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>subsection_case_sensitive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_incomplete_line</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_next_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>get_next_char</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_incomplete_line</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_next_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error_incomplete_line</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>get_next_char</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error_incomplete_line</name>:</label>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_base_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cf</name><operator>-&gt;</operator><name>subsection_case_sensitive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>get_next_char</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>get_extended_base_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iskeychar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<struct>struct <name>parse_event_data</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>config_event_t</name></name></type> <name>previous_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>previous_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_event</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>config_event_t</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>parse_event_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>opts</name></name> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>-&gt;</operator><name>event_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_WHITESPACE</name> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>previous_type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name><name>cf</name><operator>-&gt;</operator><name>do_ftell</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>CONFIG_EVENT_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>previous_type</name></name> <operator>!=</operator> <name>CONFIG_EVENT_EOF</name> <operator>&amp;&amp;</operator>
<call><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>-&gt;</operator><name>event_fn</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>previous_type</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>previous_offset</name></name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>opts</name><operator>-&gt;</operator><name>event_fn_data</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>previous_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>previous_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_parse_source</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>comment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>baselen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>var</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_return</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bomptr</name> <init>= <expr><name>utf8_bom</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>parse_event_data</name></name></type> <name>event_data</name> <init>= <expr><block>{
<expr><name>CONFIG_EVENT_EOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>opts</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_next_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bomptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>bomptr</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>bomptr</name> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bomptr</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bomptr</name> <operator>!=</operator> <name>utf8_bom</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bomptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_event</name><argument_list>(<argument><expr><name>CONFIG_EVENT_EOF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_event</name><argument_list>(<argument><expr><name>CONFIG_EVENT_WHITESPACE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_event</name><argument_list>(<argument><expr><name>CONFIG_EVENT_WHITESPACE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_event</name><argument_list>(<argument><expr><name>CONFIG_EVENT_COMMENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>comment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_event</name><argument_list>(<argument><expr><name>CONFIG_EVENT_SECTION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_base_var</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>baselen</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_event</name><argument_list>(<argument><expr><name>CONFIG_EVENT_ENTRY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>baselen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_value</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>do_event</name><argument_list>(<argument><expr><name>CONFIG_EVENT_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>origin_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONFIG_ORIGIN_BLOB</name></expr>:</case>
<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad config line %d in blob %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ORIGIN_FILE</name></expr>:</case>
<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad config line %d in file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ORIGIN_STDIN</name></expr>:</case>
<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad config line %d in standard input"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ORIGIN_SUBMODULE_BLOB</name></expr>:</case>
<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad config line %d in submodule-blob %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ORIGIN_CMDLINE</name></expr>:</case>
<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad config line %d in command line %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad config line %d in %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><ternary><condition><expr><name>opts</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>error_action</name></name></expr> ?</condition><then>
<expr><name><name>opts</name><operator>-&gt;</operator><name>error_action</name></name></expr> </then><else>:
<expr><name><name>cf</name><operator>-&gt;</operator><name>default_error_action</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONFIG_ERROR_DIE</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ERROR_ERROR</name></expr>:</case>
<expr_stmt><expr><name>error_return</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ERROR_SILENT</name></expr>:</case>
<expr_stmt><expr><name>error_return</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONFIG_ERROR_UNSET</name></expr>:</case>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"config error action unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error_return</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uintmax_t</name></type> <name>get_unit_factor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1024</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_parse_signed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>uval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>factor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>get_unit_factor</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>factor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uval</name> <operator>=</operator> <ternary><condition><expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>val</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unsigned_mult_overflows</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>uval</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>factor</name> <operator>*</operator> <name>uval</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>*=</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_parse_unsigned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>factor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoumax</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>get_unit_factor</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>factor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unsigned_mult_overflows</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>factor</name> <operator>*</operator> <name>val</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>*=</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_parse_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_signed</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><call><name>maximum_signed_value_of_type</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_parse_int64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_signed</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><call><name>maximum_signed_value_of_type</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_parse_ulong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_unsigned</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><call><name>maximum_unsigned_value_of_type</name><argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_parse_ssize_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_signed</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><call><name>maximum_signed_value_of_type</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>NORETURN</name>
<specifier>static</specifier> <name>void</name></type> <name>die_bad_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"out of range"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"invalid unit"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bad_numeric</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"bad numeric config value '%s' for '%s': %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"GIT_TEST_GETTEXT_POISON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>






<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>bad_numeric</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cf</name> <operator>&amp;&amp;</operator> <name><name>cf</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>bad_numeric</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>origin_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONFIG_ORIGIN_BLOB</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad numeric config value '%s' for '%s' in blob %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>CONFIG_ORIGIN_FILE</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad numeric config value '%s' for '%s' in file %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>CONFIG_ORIGIN_STDIN</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad numeric config value '%s' for '%s' in standard input: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>CONFIG_ORIGIN_SUBMODULE_BLOB</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad numeric config value '%s' for '%s' in submodule-blob %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>CONFIG_ORIGIN_CMDLINE</name></expr>:</case>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad numeric config value '%s' for '%s' in command line %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad numeric config value '%s' for '%s' in %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>error_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_bad_number</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>git_config_int64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_bad_number</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>git_config_ulong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_ulong</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_bad_number</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>git_config_ssize_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_parse_ssize_t</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_bad_number</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_parse_maybe_bool_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_parse_maybe_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>git_parse_maybe_bool_text</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_parse_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><operator>!</operator><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_bool_or_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_bool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>git_parse_maybe_bool_text</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>is_bool</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>is_bool</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>git_config_int</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>discard</name></decl>;</decl_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><call><name>git_config_bool_or_int</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>discard</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_pathname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>expand_user_path</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>dest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to expand user dir in: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_expiry_date</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_expiry_date</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' for '%s' is not a valid timestamp"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_color</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>color_parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_default_core_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.filemode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trust_executable_bit</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.trustctime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trust_ctime</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.checkstat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>check_stat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"minimal"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>check_stat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.quotepath"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quote_path_fully</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.symlinks"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_symlinks</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.ignorecase"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ignore_case</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.attributesfile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>git_attributes_file</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.hookspath"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>git_hooks_path</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.bare"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_bare_repository_cfg</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.ignorestat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>assume_unchanged</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.prefersymlinkrefs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefer_symlink_refs</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.logallrefupdates"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>log_all_ref_updates</name> <operator>=</operator> <name>LOG_REFS_ALWAYS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>log_all_ref_updates</name> <operator>=</operator> <name>LOG_REFS_NORMAL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>log_all_ref_updates</name> <operator>=</operator> <name>LOG_REFS_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.warnambiguousrefs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>warn_ambiguous_refs</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.abbrev"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>default_abbrev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>abbrev</name> <init>= <expr><call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>abbrev</name> <argument_list type="generic">&lt; <argument><expr><name>minimum_abbrev</name> <operator>||</operator> <name>abbrev</name></expr></argument> &gt;</argument_list></name> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"abbrev length out of range: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>default_abbrev</name> <operator>=</operator> <name>abbrev</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.disambiguate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>set_disambiguate_hint_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.loosecompression"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>Z_DEFAULT_COMPRESSION</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <name>Z_BEST_COMPRESSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad zlib compression level %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>zlib_compression_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zlib_compression_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.compression"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>Z_DEFAULT_COMPRESSION</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <name>Z_BEST_COMPRESSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad zlib compression level %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>core_compression_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name>core_compression_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zlib_compression_seen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zlib_compression_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pack_compression_seen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pack_compression_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.packedgitwindowsize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pgsz_x2</name> <init>= <expr><call><name>getpagesize</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>packed_git_window_size</name> <operator>=</operator> <call><name>git_config_ulong</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>packed_git_window_size</name> <operator>/=</operator> <name>pgsz_x2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>packed_git_window_size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>packed_git_window_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>packed_git_window_size</name> <operator>*=</operator> <name>pgsz_x2</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.bigfilethreshold"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>big_file_threshold</name> <operator>=</operator> <call><name>git_config_ulong</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.packedgitlimit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packed_git_limit</name> <operator>=</operator> <call><name>git_config_ulong</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.deltabasecachelimit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta_base_cache_limit</name> <operator>=</operator> <call><name>git_config_ulong</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.autocrlf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auto_crlf</name> <operator>=</operator> <name>AUTO_CRLF_INPUT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>auto_crlf</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.safecrlf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eol_rndtrp_die</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"warn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>global_conv_flags_eol</name> <operator>=</operator> <name>CONV_EOL_RNDTRP_WARN</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>eol_rndtrp_die</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>global_conv_flags_eol</name> <operator>=</operator> <ternary><condition><expr><name>eol_rndtrp_die</name></expr> ?</condition><then>
<expr><name>CONV_EOL_RNDTRP_DIE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.eol"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"lf"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>core_eol</name> <operator>=</operator> <name>EOL_LF</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"crlf"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>core_eol</name> <operator>=</operator> <name>EOL_CRLF</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>core_eol</name> <operator>=</operator> <name>EOL_NATIVE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>core_eol</name> <operator>=</operator> <name>EOL_UNSET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.checkroundtripencoding"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>check_roundtrip_encoding</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.notesref"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>notes_ref_name</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.editor"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>editor_program</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.commentchar"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>auto_comment_line_char</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comment_line_char</name> <operator>=</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>auto_comment_line_char</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"core.commentChar should only be one character"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.askpass"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>askpass_program</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.excludesfile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>excludes_file</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.whitespace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>whitespace_rule_cfg</name> <operator>=</operator> <call><name>parse_whitespace_rule</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.fsyncobjectfiles"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fsync_object_files</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.preloadindex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>core_preload_index</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.createobject"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"rename"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>object_creation_mode</name> <operator>=</operator> <name>OBJECT_CREATION_USES_RENAMES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>object_creation_mode</name> <operator>=</operator> <name>OBJECT_CREATION_USES_HARDLINKS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid mode for object creation: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.sparsecheckout"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>core_apply_sparse_checkout</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.sparsecheckoutcone"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>core_sparse_checkout_cone</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.precomposeunicode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precomposed_unicode</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.protecthfs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>protect_hfs</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.protectntfs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>protect_ntfs</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.usereplacerefs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>read_replace_refs</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name>platform_core_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_default_i18n_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"i18n.commitencoding"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>git_commit_encoding</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"i18n.logoutputencoding"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>git_log_output_encoding</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_default_branch_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"branch.autosetupmerge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>git_branch_track</name> <operator>=</operator> <name>BRANCH_TRACK_ALWAYS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>git_branch_track</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"branch.autosetuprebase"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>autorebase</name> <operator>=</operator> <name>AUTOREBASE_NEVER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>autorebase</name> <operator>=</operator> <name>AUTOREBASE_LOCAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"remote"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>autorebase</name> <operator>=</operator> <name>AUTOREBASE_REMOTE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>autorebase</name> <operator>=</operator> <name>AUTOREBASE_ALWAYS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"malformed value for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_default_push_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"push.default"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"nothing"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_default</name> <operator>=</operator> <name>PUSH_DEFAULT_NOTHING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"matching"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_default</name> <operator>=</operator> <name>PUSH_DEFAULT_MATCHING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"simple"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_default</name> <operator>=</operator> <name>PUSH_DEFAULT_SIMPLE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"upstream"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_default</name> <operator>=</operator> <name>PUSH_DEFAULT_UPSTREAM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"tracking"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>push_default</name> <operator>=</operator> <name>PUSH_DEFAULT_UPSTREAM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"current"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push_default</name> <operator>=</operator> <name>PUSH_DEFAULT_CURRENT</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"malformed value for %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"must be one of nothing, matching, simple, "</literal>
<literal type="string">"upstream or current"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_default_mailmap_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"mailmap.file"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>git_mailmap_file</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"mailmap.blob"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>git_mailmap_blob</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_default_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_default_core_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"user."</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"author."</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"committer."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_ident_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"i18n."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_default_i18n_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"branch."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_default_branch_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"push."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_default_push_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"mailmap."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_default_mailmap_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"advice."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.advice"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_default_advice_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"pager.color"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.pager"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pager_use_color</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"pack.packsizelimit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pack_size_limit_cfg</name> <operator>=</operator> <call><name>git_config_ulong</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"pack.compression"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>Z_DEFAULT_COMPRESSION</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <name>Z_BEST_COMPRESSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad pack compression level %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pack_compression_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pack_compression_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>do_config_from</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_source</name></name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>linenr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>git_parse_source</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_config_from_file</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>config_origin_type</name></name></type> <name>origin_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_source</name></name></type> <name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>top</name><operator>.</operator><name>u</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>origin_type</name></name> <operator>=</operator> <name>origin_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>default_error_action</name></name> <operator>=</operator> <name>CONFIG_ERROR_DIE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>do_fgetc</name></name> <operator>=</operator> <name>config_file_fgetc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>do_ungetc</name></name> <operator>=</operator> <name>config_file_ungetc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>do_ftell</name></name> <operator>=</operator> <name>config_file_ftell</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flockfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_config_from</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>funlockfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_config_from_stdin</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>CONFIG_ORIGIN_STDIN</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_from_file_with_options</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen_or_warn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>CONFIG_ORIGIN_FILE</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_from_file</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_from_file_with_options</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_from_mem</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>config_origin_type</name></name></type> <name>origin_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_source</name></name></type> <name>top</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>top</name><operator>.</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>u</name><operator>.</operator><name>buf</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>origin_type</name></name> <operator>=</operator> <name>origin_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>default_error_action</name></name> <operator>=</operator> <name>CONFIG_ERROR_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>do_fgetc</name></name> <operator>=</operator> <name>config_buf_fgetc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>do_ungetc</name></name> <operator>=</operator> <name>config_buf_ungetc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><operator>.</operator><name>do_ftell</name></name> <operator>=</operator> <name>config_buf_ftell</name></expr>;</expr_stmt>

<return>return <expr><call><name>do_config_from</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_from_blob_oid</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to load config blob object '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"reference '%s' does not point to a blob"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>git_config_from_mem</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>CONFIG_ORIGIN_BLOB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_config_from_blob_ref</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to resolve config blob '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>git_config_from_blob_oid</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_etc_gitconfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>system_wide</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>system_wide</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>system_wide</name> <operator>=</operator> <call><name>system_path</name><argument_list>(<argument><expr><name>ETC_GITCONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>system_wide</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>git_env_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>v</name></expr> ?</condition><then> <expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>def</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>unsigned</name> <name>long</name></type> <name>git_env_ulong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>git_parse_ulong</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_CONFIG_NOSYSTEM"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_git_config_sequence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,
<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xdg_config</name> <init>= <expr><call><name>xdg_config_home</name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_config</name> <init>= <expr><call><name>expand_user_path</name><argument_list>(<argument><expr><literal type="string">"~/.gitconfig"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>repo_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>config_scope</name></name></type> <name>prev_parsing_scope</name> <init>= <expr><name>current_parsing_scope</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>commondir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>repo_config</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/config"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>commondir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>git_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"git_dir without commondir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>repo_config</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>current_parsing_scope</name> <operator>=</operator> <name>CONFIG_SCOPE_SYSTEM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>git_config_system</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>access_or_die</name><argument_list>(<argument><expr><call><name>git_etc_gitconfig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>system_gently</name></name></expr> ?</condition><then>
<expr><name>ACCESS_EACCES_OK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>git_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><call><name>git_etc_gitconfig</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_parsing_scope</name> <operator>=</operator> <name>CONFIG_SCOPE_GLOBAL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xdg_config</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>access_or_die</name><argument_list>(<argument><expr><name>xdg_config</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>, <argument><expr><name>ACCESS_EACCES_OK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>git_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>xdg_config</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>user_config</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>access_or_die</name><argument_list>(<argument><expr><name>user_config</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>, <argument><expr><name>ACCESS_EACCES_OK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>git_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>user_config</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_parsing_scope</name> <operator>=</operator> <name>CONFIG_SCOPE_LOCAL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_repo</name></name> <operator>&amp;&amp;</operator> <name>repo_config</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>access_or_die</name><argument_list>(<argument><expr><name>repo_config</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>git_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>repo_config</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_parsing_scope</name> <operator>=</operator> <name>CONFIG_SCOPE_WORKTREE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_worktree</name></name> <operator>&amp;&amp;</operator> <name>repository_format_worktree_config</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>git_pathdup</name><argument_list>(<argument><expr><literal type="string">"config.worktree"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>access_or_die</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>git_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_parsing_scope</name> <operator>=</operator> <name>CONFIG_SCOPE_COMMAND</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_cmdline</name></name> <operator>&amp;&amp;</operator> <call><name>git_config_from_parameters</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to parse command-line config"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_parsing_scope</name> <operator>=</operator> <name>prev_parsing_scope</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xdg_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>user_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>repo_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>config_with_options</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>git_config_source</name></name> <modifier>*</modifier></type><name>config_source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_include_data</name></name></type> <name>inc</name> <init>= <expr><name>CONFIG_INCLUDE_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>respect_includes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>inc</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inc</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inc</name><operator>.</operator><name>opts</name></name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>git_config_include</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>inc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>config_source</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_parsing_scope</name> <operator>=</operator> <name><name>config_source</name><operator>-&gt;</operator><name>scope</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>config_source</name> <operator>&amp;&amp;</operator> <name><name>config_source</name><operator>-&gt;</operator><name>use_stdin</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_from_stdin</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>config_source</name> <operator>&amp;&amp;</operator> <name><name>config_source</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_from_file</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>config_source</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>config_source</name> <operator>&amp;&amp;</operator> <name><name>config_source</name><operator>-&gt;</operator><name>blob</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_from_blob_ref</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>config_source</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>do_git_config_sequence</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>configset_iter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>value_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>config_set_element</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>configset_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value_index</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>values</name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>value_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_config_kvi</name> <operator>=</operator> <name><name>values</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>value_index</name></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fn</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>values</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>value_index</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>git_die_config_linenr</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
<argument><expr><name><name>current_config_kvi</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,
<argument><expr><name><name>current_config_kvi</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_config_kvi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>read_early_config</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_options</name></name></type> <name>opts</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>commondir</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>gitdir</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>respect_includes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_git_dir</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>commondir</name></name> <operator>=</operator> <call><name>get_git_common_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>git_dir</name></name> <operator>=</operator> <call><name>get_git_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>discover_git_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commondir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gitdir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>commondir</name></name> <operator>=</operator> <name><name>commondir</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>git_dir</name></name> <operator>=</operator> <name><name>gitdir</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>config_with_options</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commondir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gitdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>read_very_early_config</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_options</name></name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>respect_includes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>ignore_repo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>ignore_worktree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>ignore_cmdline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>system_gently</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_with_options</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>config_set_element</name></name> <modifier>*</modifier></type><name>configset_find_element</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_set_element</name></name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>config_set_element</name></name> <modifier>*</modifier></type><name>found_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>normalized_key</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>git_config_parse_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>normalized_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>k</name><operator>.</operator><name>ent</name></name></expr></argument>, <argument><expr><call><name>strhash</name><argument_list>(<argument><expr><name>normalized_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>normalized_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found_entry</name> <operator>=</operator> <call><name>hashmap_get_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>config_hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>normalized_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found_entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configset_add_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_set_element</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>configset_list_item</name></name> <modifier>*</modifier></type><name>l_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>key_value_info</name></name> <modifier>*</modifier></type><name>kv_info</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kv_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>configset_find_element</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><call><name>strhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>value_list</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>config_hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>string_list_append_nodup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>value_list</name></name></expr></argument>, <argument><expr><call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l_item</name> <operator>=</operator> <operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>items</name><index>[<expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l_item</name><operator>-&gt;</operator><name>e</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l_item</name><operator>-&gt;</operator><name>value_index</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>value_list</name><operator>.</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"configset_add_value has no source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kv_info</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>strintern</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv_info</name><operator>-&gt;</operator><name>linenr</name></name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv_info</name><operator>-&gt;</operator><name>origin_type</name></name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>origin_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>kv_info</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv_info</name><operator>-&gt;</operator><name>linenr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kv_info</name><operator>-&gt;</operator><name>origin_type</name></name> <operator>=</operator> <name>CONFIG_ORIGIN_CMDLINE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>kv_info</name><operator>-&gt;</operator><name>scope</name></name> <operator>=</operator> <name>current_parsing_scope</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>kv_info</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_set_element_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>unused_cmp_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>eptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry_or_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>unused_keydata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_set_element</name></name> <modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>eptr</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>config_set_element</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>entry_or_key</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>config_set_element</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_configset_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>config_hash</name></name></expr></argument>, <argument><expr><name>config_set_element_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>hash_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_configset_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_set_element</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cs</name><operator>-&gt;</operator><name>hash_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<macro><name>hashmap_for_each_entry</name><argument_list>(<argument>&amp;cs-&gt;config_hash</argument>, <argument>&amp;iter</argument>, <argument>entry</argument>,
<argument>ent</argument> )</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>value_list</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>hashmap_free_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>config_hash</name></name></expr></argument>, <argument><expr>struct <name>config_set_element</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>hash_initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_set_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>configset_add_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_add_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_from_file</name><argument_list>(<argument><expr><name>config_set_callback</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>git_configset_get_value_multi</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>values</name><operator>-&gt;</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>values</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>values</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>git_configset_get_value_multi</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_set_element</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>configset_find_element</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>value_list</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_string_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_configset_get_string_const</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_int</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_ulong</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>git_config_ulong</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_bool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_bool_or_int</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_bool</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>git_config_bool_or_int</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>is_bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_maybe_bool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>git_parse_maybe_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dest</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_configset_get_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_set</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>repo_read_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_options</name></name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>respect_includes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>commondir</name></name> <operator>=</operator> <name><name>repo</name><operator>-&gt;</operator><name>commondir</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>git_dir</name></name> <operator>=</operator> <name><name>repo</name><operator>-&gt;</operator><name>gitdir</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>config_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>git_configset_clear</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>git_configset_init</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>config_with_options</name><argument_list>(<argument><expr><name>config_set_callback</name></expr></argument>, <argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>











<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown error occurred while reading the configuration files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>git_config_check_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name> <operator>&amp;&amp;</operator> <name><name>repo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hash_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>repo_read_config</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>repo_config_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>repo</name><operator>-&gt;</operator><name>config</name></name> <operator>||</operator> <operator>!</operator><name><name>repo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hash_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>git_configset_clear</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>repo_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>configset_iter</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>git_configset_get_value</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>repo_config_get_value_multi</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>git_configset_get_value_multi</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_string_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>git_configset_get_string_const</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>git_die_config</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>repo_config_get_string_const</name><argument_list>(<argument><expr><name>repo</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_int</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>git_configset_get_int</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_ulong</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>git_configset_get_ulong</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_bool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>git_configset_get_bool</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_bool_or_int</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_bool</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>git_configset_get_bool_or_int</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>is_bool</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_maybe_bool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>git_configset_get_maybe_bool</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_config_get_pathname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>git_config_check_init</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>git_configset_get_pathname</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>git_die_config</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>git_config</name><parameter_list>(<parameter><decl><type><name>config_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>repo_config</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_config_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>repo_config_clear</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_value</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>git_config_get_value_multi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_value_multi</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_string_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_string_const</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_string</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_int</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_ulong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_ulong</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_bool</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_bool_or_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_bool</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_bool_or_int</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>is_bool</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_maybe_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_maybe_bool</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_pathname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>repo_config_get_pathname</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_expiry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>git_config_get_string_const</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>now</name> <init>= <expr><call><name>approxidate</name><argument_list>(<argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>approxidate</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>git_die_config</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid %s: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_expiry_in_days</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>expiry</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expiry_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>days</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestamp_t</name></type> <name>when</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry_string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>git_parse_signed</name><argument_list>(<argument><expr><name>expiry_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>days</name></expr></argument>, <argument><expr><call><name>maximum_signed_value_of_type</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">86400</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>expiry</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name>days</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_expiry_date</name><argument_list>(<argument><expr><name>expiry_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>when</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>expiry</name> <operator>=</operator> <name>when</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_split_index</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_maybe_bool</name><argument_list>(<argument><expr><literal type="string">"core.splitindex"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_max_percent_split_change</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"splitindex.maxpercentchange"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"splitIndex.maxPercentChange value '%d' "</literal>
<literal type="string">"should be between 0 and 100"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_fsmonitor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>git_config_get_pathname</name><argument_list>(<argument><expr><literal type="string">"core.fsmonitor"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>core_fsmonitor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>core_fsmonitor</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_FSMONITOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>core_fsmonitor</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>core_fsmonitor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>core_fsmonitor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>core_fsmonitor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_get_index_threads</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_bool</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>git_env_ulong</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_INDEX_THREADS"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_bool_or_int</name><argument_list>(<argument><expr><literal type="string">"index.threads"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_bool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_bool</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>NORETURN</name>
<name>void</name></type> <name>git_die_config_linenr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to parse '%s' from command-line config"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad config variable '%s' in file '%s' at line %d"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>linenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>NORETURN</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>void</name> <name>git_die_config</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>err</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>key_value_info</name></name> <modifier>*</modifier></type><name>kv_info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vreportf</name><argument_list>(<argument><expr><literal type="string">"error: "</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>git_config_get_value_multi</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kv_info</name> <operator>=</operator> <name><name>values</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>values</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_die_config_linenr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>kv_info</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>kv_info</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<struct>struct <name>config_store_data</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>baselen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_not_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>value_regex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>multi_replace</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>config_event_t</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_keys_section</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>parsed</name></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>parsed_nr</name></decl>, <decl><type ref="prev"/><name>parsed_alloc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>seen</name></decl>, <decl><type ref="prev"/><name>seen_nr</name></decl>, <decl><type ref="prev"/><name>seen_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>key_seen</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>section_seen</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>is_keys_section</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>config_store_data_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>value_regex</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>store</name><operator>-&gt;</operator><name>value_regex</name></name> <operator>!=</operator> <name>CONFIG_REGEX_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>value_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>value_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>store</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>store</name><operator>-&gt;</operator><name>value_regex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>value_regex</name></name> <operator>==</operator> <name>CONFIG_REGEX_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name><name>store</name><operator>-&gt;</operator><name>do_not_match</name></name> <operator>^</operator>
<operator>(</operator><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>regexec</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>value_regex</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>store_aux_event</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>config_event_t</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>parsed_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>]</index></name><operator>.</operator><name>begin</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_SECTION</name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpfn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>cf</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>buf</name><index>[<expr><name><name>cf</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid section name '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cf</name><operator>-&gt;</operator><name>subsection_case_sensitive</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmpfn</name> <operator>=</operator> <name>strncasecmp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmpfn</name> <operator>=</operator> <name>strncmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>is_keys_section</name></name> <operator>=</operator>
<name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>]</index></name><operator>.</operator><name>is_keys_section</name> <operator>=</operator>
<name><name>cf</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>store</name><operator>-&gt;</operator><name>baselen</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>cmpfn</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>baselen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>is_keys_section</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>section_seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>seen</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name></expr>]</index></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>store_aux</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>key_seen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>matches</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>store</name><operator>-&gt;</operator><name>multi_replace</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s has multiple values"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>seen</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name></expr>]</index></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>is_keys_section</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>seen_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>seen</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name></expr>]</index></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>section_seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>matches</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>key_seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to write new configuration file %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>store_create_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>baselen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"[%.*s \""</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dot</name> <operator>-</operator> <name>key</name><operator>)</operator></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dot</name> <operator>-</operator> <name>key</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>baselen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"[%.*s]\n"</literal></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>baselen</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>write_section</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><call><name>store_create_section</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>write_pair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <name><name>store</name><operator>-&gt;</operator><name>baselen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quote</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="string">"\""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="string">"\""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="string">"\""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\t%.*s = %s"</literal></expr></argument>,
<argument><expr><name>length</name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <name><name>store</name><operator>-&gt;</operator><name>baselen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></for>
<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_remove_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_store_data</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>begin_offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>end_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>seen_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>seen</name></decl>, <decl><type ref="prev"/><name>section_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>seen</name> <operator>=</operator> <operator>*</operator><name>seen_ptr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>seen</name><index>[<expr><name>seen</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>config_event_t</name></name></type> <name>type</name> <init>= <expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_COMMENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_ENTRY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>section_seen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_SECTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_keys_section</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>section_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin</name></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>seen</name><index>[<expr><name>seen</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>config_event_t</name></name></type> <name>type</name> <init>= <expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_COMMENT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_SECTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_keys_section</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CONFIG_EVENT_ENTRY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>seen</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>seen_nr</name></name> <operator>&amp;&amp;</operator>
<name>i</name> <operator>==</operator> <name><name>store</name><operator>-&gt;</operator><name>seen</name><index>[<expr><name>seen</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>






<expr_stmt><expr><operator>*</operator><name>seen_ptr</name> <operator>=</operator> <name>seen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>begin_offset</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end_offset</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end_offset</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>parsed</name><index>[<expr><name><name>store</name><operator>-&gt;</operator><name>parsed_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_set_in_file_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_set_multivar_in_file_gently</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_config_set_in_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_set_multivar_in_file</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_set_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_set_multivar_gently</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_config_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_set_multivar</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_set_config</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


























<function><type><name>int</name></type> <name>git_config_set_multivar_in_file_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_regex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>multi_replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>in_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>contents_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>config_store_data</name></name></type> <name>store</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <call><name>git_config_parse_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>.</operator><name>baselen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_free</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>store</name><operator>.</operator><name>multi_replace</name></name> <operator>=</operator> <name>multi_replace</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_filename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config_filename</name> <operator>=</operator> <name>filename_buf</name> <operator>=</operator> <call><name>git_pathdup</name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not lock config file %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_NO_LOCK</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>in_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>in_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>ENOENT</name> <operator>!=</operator> <name>errno</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"opening %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_INVALID_FILE</name></expr>;</expr_stmt> 
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_NOTHING_SET</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>store</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_section</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>write_pair</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_err_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>copy_begin</name></decl>, <decl><type ref="prev"/><name>copy_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>new_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>config_options</name></name></type> <name>opts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value_regex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>value_regex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value_regex</name> <operator>==</operator> <name>CONFIG_REGEX_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>value_regex</name></name> <operator>=</operator> <name>CONFIG_REGEX_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>value_regex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>do_not_match</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value_regex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>do_not_match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>store</name><operator>.</operator><name>value_regex</name></name> <operator>=</operator> <operator>(</operator><name>regex_t</name><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><name><name>store</name><operator>.</operator><name>value_regex</name></name></expr></argument>, <argument><expr><name>value_regex</name></expr></argument>,
<argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid pattern: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value_regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>store</name><operator>.</operator><name>value_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_INVALID_PATTERN</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>store</name><operator>.</operator><name>parsed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>store</name><operator>.</operator><name>parsed_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>parsed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>event_fn</name></name> <operator>=</operator> <name>store_aux_event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>event_fn_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>store</name></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><call><name>git_config_from_file_with_options</name><argument_list>(<argument><expr><name>store_aux</name></expr></argument>,
<argument><expr><name>config_filename</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid config file %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_INVALID_FILE</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>store</name><operator>.</operator><name>seen_nr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>store</name><operator>.</operator><name>seen_nr</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>multi_replace</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_NOTHING_SET</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>in_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"fstat on %s failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_INVALID_FILE</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>contents_sz</name> <operator>=</operator> <call><name>xsize_t</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>contents</name> <operator>=</operator> <call><name>xmmap_gently</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>contents_sz</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>,
<argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>in_fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>contents</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENODEV</name> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to mmap '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_INVALID_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>contents</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>in_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">07777</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"chmod on %s failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_NO_WRITE</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>.</operator><name>seen_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>store</name><operator>.</operator><name>seen_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>store</name><operator>.</operator><name>seen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>store</name><operator>.</operator><name>seen_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>seen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>store</name><operator>.</operator><name>parsed_nr</name></name>
<operator>-</operator> <operator>!</operator><operator>!</operator><name><name>store</name><operator>.</operator><name>parsed_nr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>seen_nr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>copy_begin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>store</name><operator>.</operator><name>seen_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>replace_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>store</name><operator>.</operator><name>seen</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>store</name><operator>.</operator><name>key_seen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copy_end</name> <operator>=</operator> <name><name>store</name><operator>.</operator><name>parsed</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_end</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>copy_end</name> <operator>&lt;</operator> <name>contents_sz</name> <operator>&amp;&amp;</operator>
<name><name>contents</name><index>[<expr><name>copy_end</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>
<name><name>contents</name><index>[<expr><name>copy_end</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>copy_end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>replace_end</name> <operator>=</operator> <name>copy_end</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>replace_end</name> <operator>=</operator> <name><name>store</name><operator>.</operator><name>parsed</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_end</name> <operator>=</operator> <name><name>store</name><operator>.</operator><name>parsed</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>begin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maybe_remove_section</name><argument_list>(<argument><expr><operator>&amp;</operator><name>store</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>copy_end</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>replace_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<while>while <condition>(<expr><name>copy_end</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>contents</name><index>[<expr><name>copy_end</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>copy_end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_end</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>contents</name><index>[<expr><name>copy_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>copy_end</name> <operator>&gt;</operator> <name>copy_begin</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>contents</name> <operator>+</operator> <name>copy_begin</name></expr></argument>,
<argument><expr><name>copy_end</name> <operator>-</operator> <name>copy_begin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_err_out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_line</name> <operator>&amp;&amp;</operator>
<call><name>write_str_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_err_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>copy_begin</name> <operator>=</operator> <name>replace_end</name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>store</name><operator>.</operator><name>section_seen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_section</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_err_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_pair</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_err_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>copy_begin</name> <operator>&lt;</operator> <name>contents_sz</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>contents</name> <operator>+</operator> <name>copy_begin</name></expr></argument>,
<argument><expr><name>contents_sz</name> <operator>-</operator> <name>copy_begin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_err_out</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr><name>contents_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>contents</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write config file %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CONFIG_NO_WRITE</name></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>git_config_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>out_free</name>:</label>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>contents</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr><name>contents_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>in_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>in_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>config_store_data_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>

<label><name>write_err_out</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_error</name><argument_list>(<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_free</name>;</goto>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_config_set_multivar_in_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>multi_replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_set_multivar_in_file_gently</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><name>value_regex</name></expr></argument>, <argument><expr><name>multi_replace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not set '%s' to '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not unset '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_set_multivar_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>multi_replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_set_multivar_in_file_gently</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_regex</name></expr></argument>,
<argument><expr><name>multi_replace</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>git_config_set_multivar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>multi_replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>git_config_set_multivar_in_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_regex</name></expr></argument>,
<argument><expr><name>multi_replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>section_name_match</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dot</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>dot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>dot</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>name</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for> 
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>section_name_is_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>;</condition> <incr><expr><name>name</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>git_config_copy_or_rename_section_in_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>remove</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>config_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>copystr</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>config_store_data</name></name></type> <name>store</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>section_name_is_ok</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid section name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_no_rollback</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_filename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config_filename</name> <operator>=</operator> <name>filename_buf</name> <operator>=</operator> <call><name>git_pathdup</name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_fd</name> <operator>=</operator> <call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not lock config file %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>config_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>warn_on_fopen_errors</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>commit_and_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"fstat on %s failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">07777</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"chmod on %s failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_section</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>is_section</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>copystr</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name><name>copystr</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>copystr</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_error</name><argument_list>(<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>section_name_match</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>remove</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>baselen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_section</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_error</name><argument_list>(<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>offset</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>output</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>copystr</name> <operator>=</operator> <call><name>store_create_section</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remove</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_section</name> <operator>&amp;&amp;</operator> <name><name>copystr</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copystr</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_error</name><argument_list>(<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>






<if_stmt><if>if <condition>(<expr><name><name>copystr</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name><name>copystr</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>copystr</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_error</name><argument_list>(<argument><expr><call><name>get_lock_file_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>config_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>commit_and_out</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write config file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>config_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>config_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out_no_rollback</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_store_data_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_rename_section_in_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_copy_or_rename_section_in_file</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>,
<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_rename_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_rename_section_in_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_copy_section_in_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_copy_or_rename_section_in_file</name><argument_list>(<argument><expr><name>config_filename</name></expr></argument>,
<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_copy_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>git_config_copy_section_in_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>config_error_nonbool</name></cpp:undef>
<function><type><name>int</name></type> <name>config_error_nonbool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing value for '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_config_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>subsection</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subsection_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dot</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>var</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>dot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>==</operator> <name>var</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>subsection</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>subsection</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>subsection_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subsection</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>subsection</name> <operator>=</operator> <name>var</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>subsection_len</name> <operator>=</operator> <name>dot</name> <operator>-</operator> <operator>*</operator><name>subsection</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_config_origin_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current_config_kvi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>current_config_kvi</name><operator>-&gt;</operator><name>origin_type</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>cf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>origin_type</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"current_config_origin_type called outside config callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONFIG_ORIGIN_BLOB</name></expr>:</case>
<return>return <expr><literal type="string">"blob"</literal></expr>;</return>
<case>case <expr><name>CONFIG_ORIGIN_FILE</name></expr>:</case>
<return>return <expr><literal type="string">"file"</literal></expr>;</return>
<case>case <expr><name>CONFIG_ORIGIN_STDIN</name></expr>:</case>
<return>return <expr><literal type="string">"standard input"</literal></expr>;</return>
<case>case <expr><name>CONFIG_ORIGIN_SUBMODULE_BLOB</name></expr>:</case>
<return>return <expr><literal type="string">"submodule-blob"</literal></expr>;</return>
<case>case <expr><name>CONFIG_ORIGIN_CMDLINE</name></expr>:</case>
<return>return <expr><literal type="string">"command line"</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown config origin type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_scope_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>config_scope</name></name></type> <name>scope</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>scope</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONFIG_SCOPE_SYSTEM</name></expr>:</case>
<return>return <expr><literal type="string">"system"</literal></expr>;</return>
<case>case <expr><name>CONFIG_SCOPE_GLOBAL</name></expr>:</case>
<return>return <expr><literal type="string">"global"</literal></expr>;</return>
<case>case <expr><name>CONFIG_SCOPE_LOCAL</name></expr>:</case>
<return>return <expr><literal type="string">"local"</literal></expr>;</return>
<case>case <expr><name>CONFIG_SCOPE_WORKTREE</name></expr>:</case>
<return>return <expr><literal type="string">"worktree"</literal></expr>;</return>
<case>case <expr><name>CONFIG_SCOPE_COMMAND</name></expr>:</case>
<return>return <expr><literal type="string">"command"</literal></expr>;</return>
<case>case <expr><name>CONFIG_SCOPE_SUBMODULE</name></expr>:</case>
<return>return <expr><literal type="string">"submodule"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_config_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current_config_kvi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>current_config_kvi</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"current_config_name called outside config callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>config_scope</name></name></type> <name>current_config_scope</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_config_kvi</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>current_config_kvi</name><operator>-&gt;</operator><name>scope</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>current_parsing_scope</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>current_config_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_config_kvi</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>current_config_kvi</name><operator>-&gt;</operator><name>linenr</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>cf</name><operator>-&gt;</operator><name>linenr</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>lookup_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>mapping</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_mapping</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_mapping</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
