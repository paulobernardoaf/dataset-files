<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\notes.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NOTES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<struct_decl>struct <name>object_id</name>;</struct_decl>
<struct_decl>struct <name>strbuf</name>;</struct_decl>





















<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>combine_notes_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function_decl><type><name>int</name></type> <name>combine_notes_concatenate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>combine_notes_overwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>combine_notes_ignore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>combine_notes_cat_sort_uniq</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>cur_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>)</parameter_list>;</function_decl>










<struct><specifier>extern</specifier> struct <name>notes_tree</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>int_node</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>non_note</name></name> <modifier>*</modifier></type><name>first_non_note</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_non_note</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>update_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name></decl>;</decl_stmt>
}</block> <decl><name>default_notes_tree</name></decl>;</struct>













<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_notes_ref</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTES_INIT_EMPTY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTES_INIT_WRITABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




















<function_decl><type><name>void</name></type> <name>init_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>notes_ref</name></decl></parameter>,
<parameter><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name>int</name></type> <name>add_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>note_oid</name></decl></parameter>, <parameter><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>remove_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>object_sha1</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>get_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>copy_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>from_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>to_obj</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>combine_notes_fn</name></type> <name>combine_notes</name></decl></parameter>)</parameter_list>;</function_decl>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_EACH_NOTE_DONT_UNPACK_SUBTREES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_EACH_NOTE_YIELD_SUBTREES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

















<typedef>typedef <function_decl><type><name>int</name></type> <name>each_note_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>note_oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>note_path</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>int</name></type> <name>for_each_note</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>each_note_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>write_notes_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTES_PRUNE_VERBOSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTES_PRUNE_DRYRUN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>










<function_decl><type><name>void</name></type> <name>prune_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>free_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>string_list</name>;</struct_decl>

<struct>struct <name>display_notes_opt</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>use_default_notes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>extra_notes_refs</name></decl>;</decl_stmt>
}</block>;</struct>




<function_decl><type><name>void</name></type> <name>init_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>enable_default_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>show_notes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>enable_ref_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>show_notes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>disable_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>show_notes</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>load_display_notes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>display_notes_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>format_display_notes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>object_oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name><name>struct</name> <name>notes_tree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>load_notes_trees</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>string_list_add_refs_by_glob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>string_list_add_refs_from_colon_sep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>globs</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>expand_notes_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>expand_loose_notes_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
