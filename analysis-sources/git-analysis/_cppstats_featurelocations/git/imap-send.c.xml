<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\imap-send.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"credential.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>SSL</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_FOR_IMAP_SEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_FOR_IMAP_SEND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CURL_DEFAULT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CURL_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbosity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_curl</name> <init>= <expr><name>USE_CURL_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>imap_send_usage</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"git imap-send [-v] [-q] [--[no-]curl] &lt; &lt;mbox&gt;"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>imap_send_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>OPT__VERBOSITY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>verbosity</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"curl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_curl</name></expr></argument>, <argument><expr><literal type="string">"use libcurl to communicate with the IMAP server"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>OPT_END</name><argument_list>()</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DRV_OK</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRV_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRV_MSG_BAD</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRV_BOX_BAD</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRV_STORE_BAD</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">1</literal>, <literal type="number">2</literal>))</argument>)</argument_list></macro>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>imap_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">1</literal>, <literal type="number">2</literal>))</argument>)</argument_list></macro>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>imap_warn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>next_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">3</literal>, <literal type="number">4</literal>))</argument>)</argument_list></macro>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nfsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nfvasprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Fatal: Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"imap command overflow!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>imap_server_conf</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tunnel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>folder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ssl_verify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_html</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_method</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>imap_server_conf</name></name></type> <name>server</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>NULL</name></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>imap_socket</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>fd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>imap_buffer</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>imap_socket</name></name></type> <name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct_decl>struct <name>imap_cmd</name>;</struct_decl>

<struct>struct <name>imap</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>uidnext</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>caps</name></decl>, <decl><type ref="prev"/><name>rcaps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nexttag</name></decl>, <decl><type ref="prev"/><name>num_in_progress</name></decl>, <decl><type ref="prev"/><name>literal_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>in_progress</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>in_progress_append</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>imap_store</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>uidvalidity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>imap_cmd_cb</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cont</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>done</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>response</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uid</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>imap_cmd</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP</name><parameter_list>(<parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(imap-&gt;caps &amp; (1 &lt;&lt; (cap)))</cpp:value></cpp:define>

<enum>enum <name>CAPABILITY</name> <block>{
<decl><name>NOLOGIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UIDPLUS</name></decl>,
<decl><name>LITERALPLUS</name></decl>,
<decl><name>NAMESPACE</name></decl>,
<decl><name>STARTTLS</name></decl>,
<decl><name>AUTH_CRAM_MD5</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>cap_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"LOGINDISABLED"</literal></expr>,
<expr><literal type="string">"UIDPLUS"</literal></expr>,
<expr><literal type="string">"LITERAL+"</literal></expr>,
<expr><literal type="string">"NAMESPACE"</literal></expr>,
<expr><literal type="string">"STARTTLS"</literal></expr>,
<expr><literal type="string">"AUTH=CRAM-MD5"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESP_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESP_NO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESP_BAD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_cmd_result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>tcmd</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_socket_perror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>socket_perror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sslerr</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>sslerr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"SSL_connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ssl_socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSL_connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: unexpected EOF\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_socket_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_tls_only</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SSL requested but SSL support not compiled in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>host_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pattern</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>host</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>host</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>*</operator><name>host</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pattern</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_hostname</name><parameter_list>(<parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_NAME</name> <modifier>*</modifier></type><name>subj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>found</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>GENERAL_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator><name>subj_alt_names</name></expr>;</expr_stmt>


<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subj_alt_names</name> <operator>=</operator> <call><name>X509_get_ext_d2i</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>NID_subject_alt_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_subj_alt_names</name> <init>= <expr><call><name>sk_GENERAL_NAME_num</name><argument_list>(<argument><expr><name>subj_alt_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_subj_alt_names</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GENERAL_NAME</name> <modifier>*</modifier></type><name>subj_alt_name</name> <init>= <expr><call><name>sk_GENERAL_NAME_value</name><argument_list>(<argument><expr><name>subj_alt_names</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>subj_alt_name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GEN_DNS</name> <operator>&amp;&amp;</operator>
<call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>subj_alt_name</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>ia5</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>subj_alt_name</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>ia5</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator>
<call><name>host_matches</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>subj_alt_name</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>ia5</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sk_GENERAL_NAME_pop_free</name><argument_list>(<argument><expr><name>subj_alt_names</name></expr></argument>, <argument><expr><name>GENERAL_NAME_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>subj</name> <operator>=</operator> <call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot get certificate subject"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>X509_NAME_get_text_by_NID</name><argument_list>(<argument><expr><name>subj</name></expr></argument>, <argument><expr><name>NID_commonName</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot get certificate common name"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>&amp;&amp;</operator> <call><name>host_matches</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"certificate owner '%s' does not match hostname '%s'"</literal></expr></argument>,
<argument><expr><name>cname</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_socket_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_tls_only</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10000000L</literal><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>SSL_METHOD</name> <modifier>*</modifier></type><name>meth</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>SSL_METHOD</name> <modifier>*</modifier></type><name>meth</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>meth</name> <operator>=</operator> <call><name>SSLv23_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>meth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ssl_socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSLv23_method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><name>meth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ssl_socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSL_CTX_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_tls_only</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_SSLv2</name> <operator>|</operator> <name>SSL_OP_NO_SSLv3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verify</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_default_verify_paths</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ssl_socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSL_CTX_set_default_verify_paths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ssl_socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSL_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_set_rfd</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ssl_socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSL_set_rfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_set_wfd</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ssl_socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSL_set_wfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_TLSEXT_HOSTNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_set_tlsext_host_name</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"SSL_set_tlsext_host_name(%s) failed."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>socket_perror</name><argument_list>(<argument><expr><literal type="string">"SSL_connect"</literal></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verify</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to get peer certificate."</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>verify_hostname</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>socket_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SSL_read</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>xread</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>socket_perror</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>socket_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>write_in_full</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>socket_perror</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>socket_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_socket</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sock</name><operator>-&gt;</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>buffer_gets</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>socket_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>verbosity</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imap_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>verbosity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imap_warn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>verbosity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>next_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nfsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>blen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"buffer too small. Please report a bug."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>issue_imap_cmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>imap_cmd_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>imap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>bufl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>imap_cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nfvasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>++</operator><name><name>imap</name><operator>-&gt;</operator><name>nexttag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <operator>*</operator><name>cb</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>literal_pending</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_cmd_result</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bufl</name> <operator>=</operator> <call><name>nfsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d %s\r\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bufl</name> <operator>=</operator> <call><name>nfsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d %s{%d%s}\r\n"</literal></expr></argument>,
<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>dlen</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>CAP</name><argument_list>(<argument><expr><name>LITERALPLUS</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>verbosity</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>num_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%d in progress) "</literal></expr></argument>, <argument><expr><name><name>imap</name><operator>-&gt;</operator><name>num_in_progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"LOGIN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; %d LOGIN &lt;user&gt; &lt;pass&gt;\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>socket_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>bufl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CAP</name><argument_list>(<argument><expr><name>LITERALPLUS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>socket_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>dlen</name></name> <operator>||</operator>
<call><name>socket_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>literal_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cont</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>literal_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>imap</name><operator>-&gt;</operator><name>in_progress_append</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>in_progress_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>num_in_progress</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">3</literal>, <literal type="number">4</literal>))</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_exec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <call><name>issue_imap_cmd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RESP_BAD</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_cmd_result</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmdp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">3</literal>, <literal type="number">4</literal>))</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_exec_m</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <call><name>issue_imap_cmd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DRV_STORE_BAD</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>get_cmd_result</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmdp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RESP_BAD</name></expr>:</case> <return>return <expr><name>DRV_STORE_BAD</name></expr>;</return>
<case>case <expr><name>RESP_NO</name></expr>:</case> <return>return <expr><name>DRV_MSG_BAD</name></expr>;</return>
<default>default:</default> <return>return <expr><name>DRV_OK</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_imap_list_l</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>*</operator><name>sp</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_imap_list_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>level</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>bail</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>skip_imap_list_l</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_capability</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>caps</name></name> <operator>=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cap_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cap_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>caps</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></while>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>rcaps</name></name> <operator>=</operator> <name><name>imap</name><operator>-&gt;</operator><name>caps</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_response_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>imap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RESP_OK</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: malformed response code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: empty response code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"UIDVALIDITY"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>uidvalidity</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: malformed UIDVALIDITY status\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"UIDNEXT"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>imap</name><operator>-&gt;</operator><name>uidnext</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: malformed NEXTUID status\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"CAPABILITY"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_capability</name><argument_list>(<argument><expr><name>imap</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"ALERT"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<for>for <control>(<init>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"*** IMAP ALERT *** %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cb</name> <operator>&amp;&amp;</operator> <name><name>cb</name><operator>-&gt;</operator><name>ctx</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"APPENDUID"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>uidvalidity</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: malformed APPENDUID status\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>RESP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cmd_result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>tcmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>imap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pcmdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>resp</name></decl>, <decl><type ref="prev"/><name>resp2</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>buffer_gets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RESP_BAD</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: empty response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: unable to parse untagged response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"NAMESPACE"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>skip_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>skip_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"BAD"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"BYE"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>resp</name> <operator>=</operator> <call><name>parse_response_code</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>RESP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>resp</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"CAPABILITY"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_capability</name><argument_list>(<argument><expr><name>imap</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>arg1</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt> 










</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: unable to parse untagged response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>in_progress</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: unexpected reply: %s %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><name>cmd</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <operator>(</operator>struct <name>imap_cmd</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>imap</name><operator>-&gt;</operator><name>in_progress_append</name></name> <operator>-</operator>
<call><name>offsetof</name><argument_list>(<argument><expr>struct <name>imap_cmd</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>socket_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>dlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RESP_BAD</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cont</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cont</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmdp</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RESP_BAD</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: unexpected command continuation request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>socket_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RESP_BAD</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cont</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>literal_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcmd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DRV_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pcmdp</name> <operator>=</operator> <operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>in_progress</name></name></expr>;</init> <condition><expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <operator>*</operator><name>pcmdp</name><operator>)</operator></expr>;</condition> <incr><expr><name>pcmdp</name> <operator>=</operator> <operator>&amp;</operator><name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>gottag</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: unexpected tag %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RESP_BAD</name></expr>;</return>
<label><name>gottag</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pcmdp</name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>in_progress_append</name></name> <operator>=</operator> <name>pcmdp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>num_in_progress</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cont</name></name> <operator>||</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>literal_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>resp</name> <operator>=</operator> <name>DRV_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>resp</name> <operator>=</operator> <name>RESP_NO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>resp</name> <operator>=</operator> <name>RESP_BAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP command '%s' returned response (%s) - %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"LOGIN"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmd</name></name></expr> </then><else>: <expr><literal type="string">"LOGIN &lt;user&gt; &lt;pass&gt;"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><name>cmd</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>resp2</name> <operator>=</operator> <call><name>parse_response_code</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>resp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>resp</name> <operator>=</operator> <name>resp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>done</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>done</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmdp</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcmd</name> <operator>||</operator> <name>tcmd</name> <operator>==</operator> <name>cmdp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>resp</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imap_close_server</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ictx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>ictx</name><operator>-&gt;</operator><name>imap</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>imap_exec</name><argument_list>(<argument><expr><name>ictx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"LOGOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>socket_shutdown</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imap_close_store</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>imap_close_server</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>char</name></type> <name>hexchar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal> <operator>+</operator> <name>b</name></expr> </then><else>: <expr><literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><name>b</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODED_SIZE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(4 * DIV_ROUND_UP((n), 3))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cram</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>challenge_64</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>resp_len</name></decl>, <decl><type ref="prev"/><name>encoded_len</name></decl>, <decl><type ref="prev"/><name>decoded_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>response_64</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>challenge</name></decl>;</decl_stmt>





<expr_stmt><expr><name>encoded_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>challenge_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>challenge</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>decoded_len</name> <operator>=</operator> <call><name>EVP_DecodeBlock</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>challenge</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>challenge_64</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decoded_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid challenge %s"</literal></expr></argument>, <argument><expr><name>challenge_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HMAC</name><argument_list>(<argument><expr><call><name>EVP_md5</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>challenge</name></expr></argument>, <argument><expr><name>decoded_len</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"HMAC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hex</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>hexchar</name><argument_list>(<argument><expr><operator>(</operator><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>hexchar</name><argument_list>(<argument><expr><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resp_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>response_64</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><call><name>ENCODED_SIZE</name><argument_list>(<argument><expr><name>resp_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>encoded_len</name> <operator>=</operator> <call><name>EVP_EncodeBlock</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>response_64</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>response</name></expr></argument>, <argument><expr><name>resp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>encoded_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"EVP_EncodeBlock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>response_64</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cram</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>challenge_64</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"If you want to use CRAM-MD5 authenticate method, "</literal>
<literal type="string">"you have to build git-imap-send with OpenSSL library."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>auth_cram_md5</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>imap_cmd</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name></decl>;</decl_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>cram</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>socket_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"IMAP error: sending response failed"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_fill_credential</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_server_conf</name></name> <modifier>*</modifier></type><name>srvc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>srvc</name><operator>-&gt;</operator><name>user</name></name> <operator>&amp;&amp;</operator> <name><name>srvc</name><operator>-&gt;</operator><name>pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>srvc</name><operator>-&gt;</operator><name>use_ssl</name></name></expr> ?</condition><then> <expr><literal type="string">"imaps"</literal></expr> </then><else>: <expr><literal type="string">"imap"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>credential_fill</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srvc</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>srvc</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srvc</name><operator>-&gt;</operator><name>pass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>srvc</name><operator>-&gt;</operator><name>pass</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>imap_open_store</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_server_conf</name></name> <modifier>*</modifier></type><name>srvc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>folder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>credential</name></name></type> <name>cred</name> <init>= <expr><name>CREDENTIAL_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>preauth</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>imap</name></name> <operator>=</operator> <name>imap</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>imap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>in_progress_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>in_progress</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>srvc</name><operator>-&gt;</operator><name>tunnel</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>tunnel</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"Starting tunnel '%s'... "</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>tunnel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tunnel</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>tunnel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tunnel</name><operator>.</operator><name>use_shell</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tunnel</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tunnel</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tunnel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot start proxy %s"</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>tunnel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tunnel</name><operator>.</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tunnel</name><operator>.</operator><name>in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"Resolving %s... "</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gai</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo: %s\n"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>gai</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ai0</name> <operator>=</operator> <name>ai</name></expr>;</init> <condition><expr><name>ai</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,
<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"Connecting to [%s]:%s... "</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></for>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"Resolving %s... "</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>he</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"gethostbyname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>he</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"Connecting to %s:%hu... "</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Error: unable to connect to server.\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srvc</name><operator>-&gt;</operator><name>use_ssl</name></name> <operator>&amp;&amp;</operator>
<call><name>ssl_socket_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>ssl_verify</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>buffer_gets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: no greeting response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>=</operator> <call><name>next_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: invalid greeting response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>preauth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"PREAUTH"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>preauth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: unknown greeting response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>parse_response_code</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>caps</name></name> <operator>&amp;&amp;</operator> <call><name>imap_exec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"CAPABILITY"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>preauth</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srvc</name><operator>-&gt;</operator><name>use_ssl</name></name> <operator>&amp;&amp;</operator> <call><name>CAP</name><argument_list>(<argument><expr><name>STARTTLS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>imap_exec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ssl_socket_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>ssl_verify</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>imap_exec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"CAPABILITY"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"Logging in...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>server_fill_credential</name><argument_list>(<argument><expr><name>srvc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>srvc</name><operator>-&gt;</operator><name>auth_method</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>auth_method</name></name></expr></argument>, <argument><expr><literal type="string">"CRAM-MD5"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CAP</name><argument_list>(<argument><expr><name>AUTH_CRAM_MD5</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"You specified "</literal>
<literal type="string">"CRAM-MD5 as authentication method, "</literal>
<literal type="string">"but %s doesn't support it.\n"</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>cont</name></name> <operator>=</operator> <name>auth_cram_md5</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>imap_exec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><literal type="string">"AUTHENTICATE CRAM-MD5"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: AUTHENTICATE CRAM-MD5 failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown authentication method:%s\n"</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CAP</name><argument_list>(<argument><expr><name>NOLOGIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Skipping account %s@%s, server forbids LOGIN\n"</literal></expr></argument>,
<argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>sock</name><operator>.</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>imap_warn</name><argument_list>(<argument><expr><literal type="string">"*** IMAP Warning *** Password is being "</literal>
<literal type="string">"sent in the clear\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>imap_exec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"LOGIN \"%s\" \"%s\""</literal></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>srvc</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: LOGIN failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>.</operator><name>username</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>credential_approve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>credential_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>folder</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>imap_exec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"EXAMINE \"%s\""</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RESP_OK</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>RESP_BAD</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: could not check mailbox\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
<case>case <expr><name>RESP_NO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>imap_exec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"CREATE \"%s\""</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>imap_info</name><argument_list>(<argument><expr><literal type="string">"Created missing mailbox\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IMAP error: could not create missing mailbox\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>

<label><name>bail</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>.</operator><name>username</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>credential_reject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>credential_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>imap_close_store</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>lf_to_crlf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>lastc</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lastc</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>lastc</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>lastc</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>new_msg</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lastc</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>lastc</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_msg</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lastc</name> <operator>=</operator> <name><name>new_msg</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>strbuf_attach</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>new_msg</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_store_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>imap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_cmd_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lf_to_crlf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>box</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="string">"INBOX"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>prefix</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>imap_exec_m</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><literal type="string">"APPEND \"%s%s\" "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>caps</name></name> <operator>=</operator> <name><name>imap</name><operator>-&gt;</operator><name>rcaps</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DRV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>DRV_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wrap_in_html</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name> <init>= <expr><literal type="string">"Content-Type: text/html;\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_open</name> <init>= <expr><literal type="string">"&lt;pre&gt;\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pre_close</name> <init>= <expr><literal type="string">"&lt;/pre&gt;\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>body</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>body</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>body</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>body</name> <operator>-</operator> <name><name>msg</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>content_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>pre_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr_xml_quoted</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>pre_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNKSIZE</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_message</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>all_msgs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strbuf_fread</name><argument_list>(<argument><expr><name>all_msgs</name></expr></argument>, <argument><expr><name>CHUNKSIZE</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><ternary><condition><expr><call><name>ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_messages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>all_msgs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>all_msgs</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"From "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\nFrom: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"\nDate: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"\nSubject: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\nFrom "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>split_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>all_msgs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ofs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ofs</name> <operator>&gt;=</operator> <name><name>all_msgs</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>&amp;</operator><name><name>all_msgs</name><operator>-&gt;</operator><name>buf</name><index>[<expr><operator>*</operator><name>ofs</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>all_msgs</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <operator>*</operator><name>ofs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"From "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>p</name> <operator>-</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ofs</name> <operator>+=</operator> <name>p</name> <operator>-</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\nFrom "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ofs</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>git_imap_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"imap.sslverify"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ssl_verify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"imap.preformattedhtml"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>use_html</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"imap.folder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>folder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_value</name><argument_list>(<argument><expr><literal type="string">"imap.host"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>git_die_config</name><argument_list>(<argument><expr><literal type="string">"imap.host"</literal></expr></argument>, <argument><expr><literal type="string">"Missing value for 'imap.host'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"imap:"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"imaps:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>use_ssl</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"imap.user"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"imap.pass"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_int</name><argument_list>(<argument><expr><literal type="string">"imap.port"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"imap.tunnel"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>tunnel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"imap.authmethod"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>auth_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>append_msgs_to_imap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_server_conf</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name><modifier>*</modifier></type> <name>all_msgs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msg</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_store</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>imap_open_store</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>folder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to open store\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>folder</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sending %d message%s\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>total</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>percent</name> <init>= <expr><name>n</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>total</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%4u%% (%d/%d) done\r"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>split_msg</name><argument_list>(<argument><expr><name>all_msgs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>use_html</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wrap_in_html</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>imap_store_msg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>DRV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imap_close_store</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_FOR_IMAP_SEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURL</name> <modifier>*</modifier></type><name>setup_curl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_server_conf</name></name> <modifier>*</modifier></type><name>srvc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri_encoded_folder</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"curl_global_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"curl_easy_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>server_fill_credential</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USERNAME</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PASSWORD</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>use_ssl</name></name></expr> ?</condition><then> <expr><literal type="string">"imaps://"</literal></expr> </then><else>: <expr><literal type="string">"imap://"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>path</name><operator>.</operator><name>len</name></name> <operator>||</operator> <name><name>path</name><operator>.</operator><name>buf</name><index>[<expr><name><name>path</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uri_encoded_folder</name> <operator>=</operator> <call><name>curl_easy_escape</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>folder</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uri_encoded_folder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"failed to encode server folder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>uri_encoded_folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>uri_encoded_folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PORT</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>auth_method</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x072200</literal></expr></cpp:if>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"No LOGIN_OPTIONS support in this cURL version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>auth</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auth</name></expr></argument>, <argument><expr><literal type="string">"AUTH="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auth</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>auth_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_LOGIN_OPTIONS</name></expr></argument>, <argument><expr><name><name>auth</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>use_ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USE_SSL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLUSESSL_TRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>ssl_verify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>ssl_verify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_READFUNCTION</name></expr></argument>, <argument><expr><name>fread_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_UPLOAD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>verbosity</name> <operator>||</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_CURL_VERBOSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setup_curl_trace</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>curl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>curl_append_msgs_to_imap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>imap_server_conf</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name><modifier>*</modifier></type> <name>all_msgs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>msgbuf</name> <init>= <expr><block>{ <expr><name>STRBUF_INIT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>credential</name></name></type> <name>cred</name> <init>= <expr><name>CREDENTIAL_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>setup_curl</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_READDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sending %d message%s\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>total</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>percent</name> <init>= <expr><name>n</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>total</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%4u%% (%d/%d) done\r"</literal></expr></argument>, <argument><expr><name>percent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_len</name> <operator>=</operator> <name><name>msgbuf</name><operator>.</operator><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>split_msg</name><argument_list>(<argument><expr><name>all_msgs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>use_html</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wrap_in_html</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lf_to_crlf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_INFILESIZE_LARGE</name></expr></argument>,
<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><name><name>msgbuf</name><operator>.</operator><name>buf</name><operator>.</operator><name>len</name></name><operator>-</operator><name>prev_len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_easy_perform() failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>.</operator><name>username</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>credential_approve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x070d01</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_LOGIN_DENIED</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>credential_reject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>credential_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>cmd_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>all_msgs</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nongit_ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_git_directory_gently</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nongit_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>git_imap_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>imap_send_options</name></expr></argument>, <argument><expr><name>imap_send_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>imap_send_usage</name></expr></argument>, <argument><expr><name>imap_send_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_FOR_IMAP_SEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>use_curl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"--curl not supported in this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>use_curl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_curl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"--no-curl not supported in this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>use_curl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>port</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>use_ssl</name></name></expr> ?</condition><then> <expr><literal type="number">993</literal></expr> </then><else>: <expr><literal type="number">143</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>folder</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no imap store specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>host</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>tunnel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no imap host specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>server</name><operator>.</operator><name>host</name></name> <operator>=</operator> <literal type="string">"tunnel"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>read_message</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_msgs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error reading input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>all_msgs</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"nothing to send\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <call><name>count_messages</name><argument_list>(<argument><expr><operator>&amp;</operator><name>all_msgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>total</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no messages to send\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>tunnel</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>append_msgs_to_imap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_msgs</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_FOR_IMAP_SEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>use_curl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>curl_append_msgs_to_imap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_msgs</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>append_msgs_to_imap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_msgs</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
