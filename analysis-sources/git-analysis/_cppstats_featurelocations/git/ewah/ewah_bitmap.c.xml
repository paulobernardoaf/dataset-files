<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\ewah\ewah_bitmap.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewok.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewok_rlw.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>min_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>max_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>buffer_grow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rlw_offset</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name> <operator>-</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;=</operator> <name>new_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><name>rlw_offset</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>buffer_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>eword_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>buffer_grow</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buffer_push_rlw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>eword_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>buffer_push</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_empty_words</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>runlen</name></decl>, <decl><type ref="prev"/><name>can_add</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>v</name> <operator>&amp;&amp;</operator> <call><name>rlw_size</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rlw_set_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>buffer_push_rlw</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlw_set_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>added</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>runlen</name> <operator>=</operator> <call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>can_add</name> <operator>=</operator> <call><name>min_size</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>RLW_LARGEST_RUNNING_COUNT</name> <operator>-</operator> <name>runlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlw_set_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>runlen</name> <operator>+</operator> <name>can_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>-=</operator> <name>can_add</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>number</name> <operator>&gt;=</operator> <name>RLW_LARGEST_RUNNING_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>buffer_push_rlw</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlw_set_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rlw_set_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>RLW_LARGEST_RUNNING_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>-=</operator> <name>RLW_LARGEST_RUNNING_COUNT</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>buffer_push_rlw</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlw_set_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rlw_set_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>added</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ewah_add_empty_words</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>+=</operator> <name>number</name> <operator>*</operator> <name>BITS_IN_EWORD</name></expr>;</expr_stmt>
<return>return <expr><call><name>add_empty_words</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_literal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>eword_t</name></type> <name>new_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eword_t</name></type> <name>current_num</name> <init>= <expr><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_num</name> <operator>&gt;=</operator> <name>RLW_LARGEST_LITERAL_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>buffer_push_rlw</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlw_set_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>buffer_push</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>new_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rlw_set_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>current_num</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>current_num</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buffer_push</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>new_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ewah_add_dirty_words</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>negate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>literals</name></decl>, <decl><type ref="prev"/><name>can_add</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>literals</name> <operator>=</operator> <call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>can_add</name> <operator>=</operator> <call><name>min_size</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>RLW_LARGEST_LITERAL_COUNT</name> <operator>-</operator> <name>literals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlw_set_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>literals</name> <operator>+</operator> <name>can_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>+</operator> <name>can_add</name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>buffer_grow</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>+</operator> <name>can_add</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>can_add</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>can_add</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>+=</operator> <name>can_add</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>+=</operator> <name>can_add</name> <operator>*</operator> <name>BITS_IN_EWORD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>-</operator> <name>can_add</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>buffer_push_rlw</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>can_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>-=</operator> <name>can_add</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>add_empty_word</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>no_literal</name> <init>= <expr><operator>(</operator><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>run_len</name> <init>= <expr><call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>no_literal</name> <operator>&amp;&amp;</operator> <name>run_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rlw_set_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_literal</name> <operator>&amp;&amp;</operator> <call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>v</name> <operator>&amp;&amp;</operator>
<name>run_len</name> <operator>&lt;</operator> <name>RLW_LARGEST_RUNNING_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rlw_set_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>run_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>run_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>buffer_push_rlw</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlw_set_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlw_set_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ewah_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>eword_t</name></type> <name>word</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>+=</operator> <name>BITS_IN_EWORD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>add_empty_word</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name> <operator>==</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><operator>(</operator><operator>~</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>add_empty_word</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>add_literal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ewah_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dist</name> <init>=
<expr><call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>BITS_IN_EWORD</name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>, <argument><expr><name>BITS_IN_EWORD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_empty_words</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dist</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_literal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>(</operator><name>eword_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BITS_IN_EWORD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rlw_set_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>,
<argument><expr><call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_literal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>(</operator><name>eword_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BITS_IN_EWORD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name>eword_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>BITS_IN_EWORD</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><operator>(</operator><operator>~</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><operator>--</operator><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlw_set_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>,
<argument><expr><call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_empty_word</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ewah_each_bit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pointer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pointer</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>pointer</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>BITS_IN_EWORD</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr><operator>,</operator> <expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>BITS_IN_EWORD</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>pointer</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>BITS_IN_EWORD</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr><operator>,</operator> <expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>pointer</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>eword_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>++</operator><name>pointer</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>ewah_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>rlw</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ewah_bitmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ewah_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ewah_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_new_rlw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>literals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word</name> <operator>=</operator> <operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rl</name></name> <operator>=</operator> <call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>lw</name></name> <operator>=</operator> <call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>rl</name></name> <operator>||</operator> <name><name>it</name><operator>-&gt;</operator><name>lw</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ewah_iterator_next</name><parameter_list>(<parameter><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>&gt;=</operator> <name><name>it</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>compressed</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>compressed</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <ternary><condition><expr><name><name>it</name><operator>-&gt;</operator><name>b</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>eword_t</name><operator>)</operator><operator>(</operator><operator>~</operator><literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>literals</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>literals</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>compressed</name></name> <operator>==</operator> <name><name>it</name><operator>-&gt;</operator><name>rl</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>literals</name></name> <operator>==</operator> <name><name>it</name><operator>-&gt;</operator><name>lw</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_new_rlw</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ewah_iterator_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>lw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>literals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>read_new_rlw</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ewah_xor</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_i</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_j</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rlw_iterator</name></name></type> <name>rlw_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rlw_iterator</name></name></type> <name>rlw_j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>literals</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlwit_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_i</name></expr></argument>, <argument><expr><name>ewah_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlwit_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_j</name></expr></argument>, <argument><expr><name>ewah_j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>rlwit_word_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_i</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>rlwit_word_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_j</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>rlw_i</name><operator>.</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rlw_j</name><operator>.</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>prey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>predator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negate_words</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rlw_i</name><operator>.</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>&lt;</operator> <name><name>rlw_j</name><operator>.</operator><name>rlw</name><operator>.</operator><name>running_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prey</name> <operator>=</operator> <operator>&amp;</operator><name>rlw_i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>predator</name> <operator>=</operator> <operator>&amp;</operator><name>rlw_j</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prey</name> <operator>=</operator> <operator>&amp;</operator><name>rlw_j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>predator</name> <operator>=</operator> <operator>&amp;</operator><name>rlw_i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>negate_words</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>predator</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_bit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>rlwit_discharge</name><argument_list>(<argument><expr><name>prey</name></expr></argument>, <argument><expr><name>out</name></expr></argument>,
<argument><expr><name><name>predator</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name></expr></argument>, <argument><expr><name>negate_words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ewah_add_empty_words</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>negate_words</name></expr></argument>,
<argument><expr><name><name>predator</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>-</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlwit_discard_first_words</name><argument_list>(<argument><expr><name>predator</name></expr></argument>,
<argument><expr><name><name>predator</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>literals</name> <operator>=</operator> <call><name>min_size</name><argument_list>(
<argument><expr><name><name>rlw_i</name><operator>.</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name></expr></argument>,
<argument><expr><name><name>rlw_j</name><operator>.</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>literals</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>literals</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ewah_add</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><name><name>rlw_i</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>rlw_i</name><operator>.</operator><name>literal_word_start</name></name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>^</operator>
<name><name>rlw_j</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>rlw_j</name><operator>.</operator><name>literal_word_start</name></name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>rlwit_discard_first_words</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_i</name></expr></argument>, <argument><expr><name>literals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlwit_discard_first_words</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_j</name></expr></argument>, <argument><expr><name>literals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>rlwit_word_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_i</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rlwit_discharge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_i</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rlwit_discharge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlw_j</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>=</operator> <call><name>max_size</name><argument_list>(<argument><expr><name><name>ewah_i</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>, <argument><expr><name><name>ewah_j</name><operator>-&gt;</operator><name>bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_POOL_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name><name>bitmap_pool</name><index>[<expr><name>BITMAP_POOL_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>bitmap_pool_size</name></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_pool_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitmap_pool_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>bitmap_pool</name><index>[<expr><operator>--</operator><name>bitmap_pool_size</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ewah_pool_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitmap_pool_size</name> <operator>==</operator> <name>BITMAP_POOL_MAX</name> <operator>||</operator>
<name><name>self</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ewah_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ewah_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap_pool</name><index>[<expr><name>bitmap_pool_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ewah_checksum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>self</name><operator>-&gt;</operator><name>bit_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>crc</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>crc</name></expr>;</return>
</block_content>}</block></function>
</unit>
