<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\ewah\bitmap.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewok.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWAH_MASK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((eword_t)1 &lt;&lt; (x % BITS_IN_EWORD))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWAH_BLOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x / BITS_IN_EWORD)</cpp:value></cpp:define>

<function><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap_word_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>word_alloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bitmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>words</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>word_alloc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>=</operator> <name>word_alloc</name></expr>;</expr_stmt>
<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>bitmap_word_alloc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>block</name> <init>= <expr><call><name>EWAH_BLOCK</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>&gt;=</operator> <name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>=</operator> <ternary><condition><expr><name>block</name></expr> ?</condition><then> <expr><name>block</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>words</name></name> <operator>+</operator> <name>old_size</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>-</operator> <name>old_size</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>block</name></expr>]</index></name> <operator>|=</operator> <call><name>EWAH_MASK</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_unset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>block</name> <init>= <expr><call><name>EWAH_BLOCK</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>block</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><call><name>EWAH_MASK</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bitmap_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>block</name> <init>= <expr><call><name>EWAH_BLOCK</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>block</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>block</name></expr>]</index></name> <operator>&amp;</operator> <call><name>EWAH_MASK</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>bitmap_to_ewah</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah</name> <init>= <expr><call><name>ewah_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>running_empty_words</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>last_word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>running_empty_words</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_word</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ewah_add</name><argument_list>(<argument><expr><name>ewah</name></expr></argument>, <argument><expr><name>last_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>running_empty_words</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ewah_add_empty_words</name><argument_list>(<argument><expr><name>ewah</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>running_empty_words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>running_empty_words</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_word</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ewah_add</name><argument_list>(<argument><expr><name>ewah</name></expr></argument>, <argument><expr><name>last_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ewah</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>ewah_to_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>bitmap_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>blowup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ewah_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>ewah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ewah_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blowup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>word_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>blowup</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_and_not</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&lt;</operator> <name><name>other</name><operator>-&gt;</operator><name>word_alloc</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr> </then><else>: <expr><name><name>other</name><operator>-&gt;</operator><name>word_alloc</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name><name>other</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_or_ewah</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>original_size</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>other_final</name> <init>= <expr><operator>(</operator><name><name>other</name><operator>-&gt;</operator><name>bit_size</name></name> <operator>/</operator> <name>BITS_IN_EWORD</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ewah_iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>word</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&lt;</operator> <name>other_final</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>=</operator> <name>other_final</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>words</name></name> <operator>+</operator> <name>original_size</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>-</operator> <name>original_size</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ewah_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ewah_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>word</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>|=</operator> <name>word</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>bitmap_popcount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>ewah_bit_popcount64</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bitmap_equals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>big</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>small</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>&lt;</operator> <name><name>other</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>small</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><name>big</name> <operator>=</operator> <name>other</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>small</name> <operator>=</operator> <name>other</name></expr>;</expr_stmt>
<expr_stmt><expr><name>big</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>small</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>small</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>big</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>big</name><operator>-&gt;</operator><name>word_alloc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>big</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>word_alloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eword_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
