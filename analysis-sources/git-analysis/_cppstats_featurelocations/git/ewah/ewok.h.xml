<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\ewah\ewok.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__EWOK_BITMAP_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__EWOK_BITMAP_H__</name></cpp:macro></cpp:define>

<struct_decl>struct <name>strbuf</name>;</struct_decl>
<typedef>typedef <type><name>uint64_t</name></type> <name>eword_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_IN_EWORD</name></cpp:macro> <cpp:value>(sizeof(eword_t) * 8)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>ewah_bit_popcount64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x5555555555555555ULL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x5555555555555555ULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3333333333333333ULL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3333333333333333ULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F0F0F0F0FULL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F0F0F0F0FULL</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>x</name> <operator>*</operator> <literal type="number">0x0101010101010101ULL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ewah_bit_ctz64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ctzll(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ewah_bit_ctz64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name> <operator>+</operator> <operator>!</operator><name>x</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ewah_bitmap</name> <block>{
<decl_stmt><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>rlw</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ewah_callback</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_pool_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ewah_pool_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>ewah_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ewah_serialize_to</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_fun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ewah_serialize_strbuf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>ewah_read_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>ewah_checksum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>ewah_each_bit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>ewah_callback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>void</name></type> <name>ewah_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>ewah_iterator</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>compressed</name></decl>, <decl><type ref="prev"/><name>literals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eword_t</name></type> <name>rl</name></decl>, <decl><type ref="prev"/><name>lw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
}</block>;</struct>














<function_decl><type><name>void</name></type> <name>ewah_iterator_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>ewah_iterator_next</name><parameter_list>(<parameter><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ewah_xor</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_i</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah_j</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>size_t</name></type> <name>ewah_add_empty_words</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ewah_add_dirty_words</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>negate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>ewah_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>eword_t</name></type> <name>word</name></decl></parameter>)</parameter_list>;</function_decl>






<struct>struct <name>bitmap</name> <block>{
<decl_stmt><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>words</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>word_alloc</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap_word_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>word_alloc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_unset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bitmap_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bitmap_equals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bitmap_is_subset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>super</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type> <name>bitmap_to_ewah</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>ewah_to_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>ewah</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>bitmap_and_not</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_or_ewah</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bitmap_or</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>other</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>bitmap_popcount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
