<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\line-range.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line-range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>
















<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_loc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>nth_line_fn_t</name></type> <name>nth_line</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>match</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>begin</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>spec</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>spec</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>term</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L invalid empty range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>begin</name> <operator>+</operator> <name>num</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>begin</name> <operator>+</operator> <name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>begin</name> <operator>+</operator> <name>num</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>term</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>spec</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>spec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L invalid line number: %ld"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>term</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <operator>-</operator><name>begin</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spec</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>spec</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>term</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>spec</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>term</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>term</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>;</condition> <incr><expr><name>term</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>term</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>term</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>term</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>spec</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>term</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>term</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>begin</name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>nth_line</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>reg_error</name> <operator>=</operator> <call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>, <argument><expr><name>spec</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>REG_NEWLINE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>reg_error</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>line</name> <operator>+</operator> <name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nline</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>begin</name><operator>++</operator> <operator>&lt;</operator> <name>lines</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nline</name> <operator>=</operator> <call><name>nth_line</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;=</operator> <name>cp</name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;</operator> <name>nline</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>nline</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>term</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<return>return <expr><name>term</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>reg_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L parameter '%s' starting at line %ld: %s"</literal></expr></argument>,
<argument><expr><name>spec</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>begin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_funcname</name><parameter_list>(<parameter><decl><type><name>xdemitconf_t</name> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xecfg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<return>return <expr><call><name><name>xecfg</name><operator>-&gt;</operator><name>find_func</name></name><argument_list>(<argument><expr><name>bol</name></expr></argument>, <argument><expr><name>eol</name> <operator>-</operator> <name>bol</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func_priv</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bol</name> <operator>==</operator> <name>eol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>*</operator><name>bol</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>bol</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <operator>*</operator><name>bol</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_funcname_matching_regexp</name><parameter_list>(<parameter><decl><type><name>xdemitconf_t</name> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>regexp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>match</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bol</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>
<expr_stmt><expr><name>reg_error</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_error</name> <operator>==</operator> <name>REG_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>reg_error</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>reg_error</name></expr></argument>, <argument><expr><name>regexp</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L parameter: regexec() failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bol</name> <operator>=</operator> <name>start</name><operator>+</operator><name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eol</name> <operator>=</operator> <name>start</name><operator>+</operator><name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bol</name> <operator>&gt;</operator> <name>start</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>bol</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bol</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bol</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bol</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>eol</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>eol</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eol</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>eol</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eol</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match_funcname</name><argument_list>(<argument><expr><name>xecfg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>bol</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>eol</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>bol</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>eol</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_range_funcname</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>nth_line_fn_t</name></type> <name>nth_line_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>anchor</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdemitconf_t</name> <modifier>*</modifier></type><name>xecfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>regexp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name>arg</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>term</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>term</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>term</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>term</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>term</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>arg</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>begin</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>term</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>term</name><operator>-</operator><operator>(</operator><name>arg</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>anchor</name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>nth_line_cb</name><argument_list>(<argument><expr><name>cb_data</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>userdiff_find_by_path</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>drv</name> <operator>&amp;&amp;</operator> <name><name>drv</name><operator>-&gt;</operator><name>funcname</name><operator>.</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>userdiff_funcname</name></name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>funcname</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>xecfg</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xdiff_set_find_func</name><argument_list>(<argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>cflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reg_error</name> <operator>=</operator> <call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>REG_NEWLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_error</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>reg_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L parameter '%s': %s"</literal></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_funcname_matching_regexp</name><argument_list>(<argument><expr><name>xecfg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L parameter '%s' starting at line %ld: no match"</literal></expr></argument>,
<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>anchor</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>begin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <call><name>nth_line_cb</name><argument_list>(<argument><expr><name>cb_data</name></expr></argument>, <argument><expr><operator>*</operator><name>begin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>begin</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>begin</name> <operator>&gt;=</operator> <name>lines</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"-L parameter '%s' matches at EOF"</literal></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>begin</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>end</name> <operator>&lt;</operator> <name>lines</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bol</name> <init>= <expr><call><name>nth_line_cb</name><argument_list>(<argument><expr><name>cb_data</name></expr></argument>, <argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>nth_line_cb</name><argument_list>(<argument><expr><name>cb_data</name></expr></argument>, <argument><expr><operator>*</operator><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>match_funcname</name><argument_list>(<argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>bol</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><operator>*</operator><name>begin</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>term</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_range_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>nth_line_fn_t</name></type> <name>nth_line_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>anchor</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>begin</name> <operator>=</operator> <operator>*</operator><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>anchor</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>anchor</name> <operator>&gt;</operator> <name>lines</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name>lines</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>parse_range_funcname</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>nth_line_cb</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>,
<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name> <operator>||</operator> <operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>parse_loc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>nth_line_cb</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><operator>-</operator><name>anchor</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>parse_loc</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nth_line_cb</name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><operator>*</operator><name>begin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>begin</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>begin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>, <argument><expr><operator>*</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>skip_range_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'^'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>arg</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>parse_range_funcname</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>parse_loc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>parse_loc</name><argument_list>(<argument><expr><name>arg</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>arg</name></expr>;</return>
</block_content>}</block></function>
</unit>
