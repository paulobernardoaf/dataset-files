<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\tree-diff.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFXMIN_NEQ</name></cpp:macro> <cpp:value>S_DIFFTREE_IFXMIN_NEQ</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_ARRAY_ALLOC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((nr) &lt;= 2) (x) = xalloca((nr) * sizeof(*(x))); else ALLOC_ARRAY((x), nr); } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_ARRAY_FREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>nr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((nr) &gt; 2) free((x)); } while(0)</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>ll_diff_tree_paths</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>parents_oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nparent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ll_diff_tree_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>














<function><type><specifier>static</specifier> <name>int</name></type> <name>tree_entry_pathcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t1</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>t2</name><operator>-&gt;</operator><name>size</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>t2</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <operator>&amp;</operator><name><name>t2</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>base_name_compare</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>tree_entry_len</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>e1</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,
<argument><expr><name><name>e2</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>tree_entry_len</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>e2</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>emit_diff_first_parent_only</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_parent</name></name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator> <name><name>p0</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>opt</name><operator>-&gt;</operator><name>change</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>p0</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>addremove</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addremove</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addremove</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <operator>&amp;</operator><name><name>p0</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>p0</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>opt</name><operator>-&gt;</operator><name>add_remove</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>addremove</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>
































<function><type><specifier>static</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>path_appendnew</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nparent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pathlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>st_add</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloclen</name> <init>= <expr><call><name>combine_diff_path_size</name><argument_list>(<argument><expr><name>nparent</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>alloclen</name> <operator>&gt;</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>alloclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator>struct <name>combine_diff_path</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>alloclen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>nparent</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>oid</name></expr> ?</condition><then> <expr><name>oid</name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_oid</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>emit_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nparent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_baselen</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>isdir</name></decl>, <decl><type ref="prev"/><name>recurse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>emitthis</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t</name> <operator>||</operator> <name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>tree_entry_extract</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>tree_entry_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isdir</name> <operator>=</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><call><name>tree_entry_extract</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>imin</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>tree_entry_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>imin</name></expr>]</index></name><operator>.</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isdir</name> <operator>=</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>&amp;&amp;</operator> <name>isdir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>recurse</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>emitthis</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>tree_in_recursive</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>emitthis</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>pprev</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>path_appendnew</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>tpi_valid</name> <init>= <expr><name>tp</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_IFXMIN_NEQ</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mode_i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator>
<ternary><condition><expr><operator>!</operator><name>t</name></expr> ?</condition><then> <expr><name>DIFF_STATUS_DELETED</name></expr> </then><else>:
<expr><ternary><condition><expr><name>tpi_valid</name></expr> ?</condition><then>
<expr><name>DIFF_STATUS_MODIFIED</name></expr> </then><else>:
<expr><name>DIFF_STATUS_ADDED</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tpi_valid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oid_i</name> <operator>=</operator> <operator>&amp;</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode_i</name> <operator>=</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>oid_i</name> <operator>=</operator> <operator>&amp;</operator><name>null_oid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>mode_i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><name>oid_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>pathchange</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <call><name><name>opt</name><operator>-&gt;</operator><name>pathchange</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>












<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pprev</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recurse</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>parents_oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FAST_ARRAY_ALLOC</name><argument_list>(<argument><expr><name>parents_oid</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tpi_valid</name> <init>= <expr><name>tp</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_IFXMIN_NEQ</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parents_oid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>tpi_valid</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ll_diff_tree_paths</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>parents_oid</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FAST_ARRAY_FREE</name><argument_list>(<argument><expr><name>parents_oid</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>old_baselen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>interesting</name></name></type> <name>match</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>tree_entry_interesting</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,
<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>all_entries_not_interesting</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>update_tree_entry</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






















































































<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_tp_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nparent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_IFXMIN_NEQ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>ll_diff_tree_paths</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>parents_oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nparent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ttree</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>tptree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FAST_ARRAY_ALLOC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FAST_ARRAY_ALLOC</name><argument_list>(<argument><expr><name>tptree</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tptree</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>parents_oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>ttree</name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>recursive</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>imin</name></decl>, <decl><type ref="prev"/><name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_can_quit_early</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skip_uninteresting</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_uninteresting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>imin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>S_IFXMIN_NEQ</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>tree_entry_pathcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>imin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>imin</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>S_IFXMIN_NEQ</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>S_IFXMIN_NEQ</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>|=</operator> <name>S_IFXMIN_NEQ</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>imin</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>|=</operator> <name>S_IFXMIN_NEQ</name></expr>;</expr_stmt></block_content></block></for> 




<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>tree_entry_pathcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>imin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_IFXMIN_NEQ</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>.</operator><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name><name>t</name><operator>.</operator><name>entry</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<goto>goto <name>skip_emit_t_tp</name>;</goto>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>emit_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>imin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>skip_emit_t_tp</name>:</label>

<expr_stmt><expr><call><name>update_tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_tp_entries</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>emit_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>update_tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nparent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_IFXMIN_NEQ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_emit_tp</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>emit_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>imin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>skip_emit_tp</name>:</label>

<expr_stmt><expr><call><name>update_tp_entries</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ttree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nparent</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tptree</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>FAST_ARRAY_FREE</name><argument_list>(<argument><expr><name>tptree</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FAST_ARRAY_FREE</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>diff_tree_paths</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>parents_oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nparent</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ll_diff_tree_paths</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>parents_oid</name></expr></argument>, <argument><expr><name>nparent</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>diff_might_be_rename</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>diff_queued_diff</name><operator>.</operator><name>nr</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>diff_queued_diff</name><operator>.</operator><name>queue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>one</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>try_to_follow_renames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name></type> <name>diff_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>choice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>






<expr_stmt><expr><call><name>GUARD_PATHSPEC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>PATHSPEC_FROMTOP</name> <operator>|</operator> <name>PATHSPEC_LITERAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>







if (opt-&gt;pathspec.has_wildcard)
die("BUG:%s:%d: wildcards are not supported",
__FILE__, __LINE__);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>choice</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>repo_diff_setup</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name><operator>.</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name><operator>.</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <name>DIFF_FORMAT_NO_OUTPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name><operator>.</operator><name>single_follow</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name><operator>.</operator><name>break_opt</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>break_opt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name><operator>.</operator><name>rename_score</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>rename_score</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_setup_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ll_diff_tree_oid</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff_opts</name><operator>.</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>found_follow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="char">'C'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>match</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>choice</name></expr>;</expr_stmt>
<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>,
<argument><expr><name>PATHSPEC_ALL_MAGIC</name> <operator>&amp;</operator> <operator>~</operator><name>PATHSPEC_LITERAL</name></expr></argument>,
<argument><expr><name>PATHSPEC_LITERAL_PATH</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>found_follow</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>choice</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ll_diff_tree_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name></type> <name>phead</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pathchange_fn_t</name></type> <name>pathchange_old</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>pathchange</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>phead</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>pathchange</name></name> <operator>=</operator> <name>emit_diff_first_parent_only</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_tree_paths</name><argument_list>(<argument><expr><operator>&amp;</operator><name>phead</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>phead</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>pprev</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pprev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>pathchange</name></name> <operator>=</operator> <name>pathchange_old</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_tree_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>base_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>ll_diff_tree_oid</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>base_str</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name> <operator>&amp;&amp;</operator> <call><name>diff_might_be_rename</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>try_to_follow_renames</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_root_tree_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>diff_tree_oid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
