<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\worktree.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WORKTREE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORKTREE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<struct_decl>struct <name>strbuf</name>;</struct_decl>

<struct>struct <name>worktree</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>head_ref</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lock_reason</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>head_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_detached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_bare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lock_reason_valid</name></decl>;</decl_stmt> 
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GWT_SORT_LINKED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 









<function_decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>get_worktrees</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>submodule_uses_worktrees</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_worktree_git_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>find_worktree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>find_worktree_by_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>is_main_worktree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>worktree_lock_reason</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VALIDATE_WORKTREE_MISSING_OK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>





<function_decl><type><name>int</name></type> <name>validate_worktree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>update_worktree_location</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>free_worktrees</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>find_shared_symref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symref</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>other_head_refs</name><parameter_list>(<parameter><decl><type><name>each_ref_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_worktree_being_rebased</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>is_worktree_being_bisected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>worktree_git_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(format <parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))<empty_stmt>;</empty_stmt>








<function_decl><type><name>int</name></type> <name>parse_worktree_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>worktree_ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>name_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>strbuf_worktree_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>worktree_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>worktree</name></name> <modifier>*</modifier></type><name>wt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
