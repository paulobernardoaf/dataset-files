<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\userdiff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>drivers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ndrivers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>drivers_alloc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATTERNS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>pattern</name></type></parameter>, <parameter><type><name>word_regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, NULL, -1, { pattern, REG_EXTENDED }, word_regex "|[^[:space:]]|[\xc0-\xff][\x80-\xbf]+" }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPATTERN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>pattern</name></type></parameter>, <parameter><type><name>word_regex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, NULL, -1, { pattern, REG_EXTENDED | REG_ICASE }, word_regex "|[^[:space:]]|[\xc0-\xff][\x80-\xbf]+" }</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>userdiff_driver</name></name></type> <name><name>builtin_drivers</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>IPATTERN</name><argument_list>(<argument><expr><literal type="string">"ada"</literal></expr></argument>,
<argument><expr><literal type="string">"!^(.*[ \t])?(is[ \t]+new|renames|is[ \t]+separate)([ \t].*)?$\n"</literal>
<literal type="string">"!^[ \t]*with[ \t].*$\n"</literal>
<literal type="string">"^[ \t]*((procedure|function)[ \t]+.*)$\n"</literal>
<literal type="string">"^[ \t]*((package|protected|task)[ \t]+.*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+]?[0-9][0-9#_.aAbBcCdDeEfF]*([eE][+-]?[0-9_]+)?"</literal>
<literal type="string">"|=&gt;|\\.\\.|\\*\\*|:=|/=|&gt;=|&lt;=|&lt;&lt;|&gt;&gt;|&lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"dts"</literal></expr></argument>,
<argument><expr><literal type="string">"!;\n"</literal>
<literal type="string">"!=\n"</literal>

<literal type="string">"^[ \t]*((/[ \t]*\\{|&amp;?[a-zA-Z_]).*)"</literal></expr></argument>,


<argument><expr><literal type="string">"[a-zA-Z0-9,._+?#-]+"</literal>
<literal type="string">"|[-+*/%&amp;^|!~]|&gt;&gt;|&lt;&lt;|&amp;&amp;|\\|\\|"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"elixir"</literal></expr></argument>,
<argument><expr><literal type="string">"^[ \t]*((def(macro|module|impl|protocol|p)?|test)[ \t].*)$"</literal></expr></argument>,


<argument><expr><literal type="string">"[@:]?[a-zA-Z0-9@_?!]+"</literal>

<literal type="string">"|[-+]?0[xob][0-9a-fA-F]+"</literal>

<literal type="string">"|[-+]?[0-9][0-9_.]*([eE][-+]?[0-9_]+)?"</literal>

<literal type="string">"|:?(\\+\\+|--|\\.\\.|~~~|&lt;&gt;|\\^\\^\\^|&lt;?\\|&gt;|&lt;&lt;&lt;?|&gt;?&gt;&gt;|&lt;&lt;?~|~&gt;?&gt;|&lt;~&gt;|&lt;=|&gt;=|===?|!==?|=~|&amp;&amp;&amp;?|\\|\\|\\|?|=&gt;|&lt;-|\\\\\\\\|-&gt;)"</literal>

<literal type="string">"|:?%[A-Za-z0-9_.]\\{\\}?"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>IPATTERN</name><argument_list>(<argument><expr><literal type="string">"fortran"</literal></expr></argument>,
<argument><expr><literal type="string">"!^([C*]|[ \t]*!)\n"</literal>
<literal type="string">"!^[ \t]*MODULE[ \t]+PROCEDURE[ \t]\n"</literal>
<literal type="string">"^[ \t]*((END[ \t]+)?(PROGRAM|MODULE|BLOCK[ \t]+DATA"</literal>
<literal type="string">"|([^'\" \t]+[ \t]+)*(SUBROUTINE|FUNCTION))[ \t]+[A-Z].*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z][a-zA-Z0-9_]*"</literal>
<literal type="string">"|\\.([Ee][Qq]|[Nn][Ee]|[Gg][TtEe]|[Ll][TtEe]|[Tt][Rr][Uu][Ee]|[Ff][Aa][Ll][Ss][Ee]|[Aa][Nn][Dd]|[Oo][Rr]|[Nn]?[Ee][Qq][Vv]|[Nn][Oo][Tt])\\."</literal>



<literal type="string">"|[-+]?[0-9.]+([AaIiDdEeFfLlTtXx][Ss]?[-+]?[0-9.]*)?(_[a-zA-Z0-9][a-zA-Z0-9_]*)?"</literal>
<literal type="string">"|//|\\*\\*|::|[/&lt;&gt;=]="</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>IPATTERN</name><argument_list>(<argument><expr><literal type="string">"fountain"</literal></expr></argument>, <argument><expr><literal type="string">"^((\\.[^.]|(int|ext|est|int\\.?/ext|i/e)[. ]).*)$"</literal></expr></argument>,
<argument><expr><literal type="string">"[^ \t-]+"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"golang"</literal></expr></argument>,

<argument><expr><literal type="string">"^[ \t]*(func[ \t]*.*(\\{[ \t]*)?)\n"</literal>

<literal type="string">"^[ \t]*(type[ \t].*(struct|interface)[ \t]*(\\{[ \t]*)?)"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.eE]+i?|0[xX]?[0-9a-fA-F]+i?"</literal>
<literal type="string">"|[-+*/&lt;&gt;%&amp;^|=!:]=|--|\\+\\+|&lt;&lt;=?|&gt;&gt;=?|&amp;\\^=?|&amp;&amp;|\\|\\||&lt;-|\\.{3}"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"html"</literal></expr></argument>, <argument><expr><literal type="string">"^[ \t]*(&lt;[Hh][1-6]([ \t].*)?&gt;.*)$"</literal></expr></argument>,
<argument><expr><literal type="string">"[^&lt;&gt;= \t]+"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"java"</literal></expr></argument>,
<argument><expr><literal type="string">"!^[ \t]*(catch|do|for|if|instanceof|new|return|switch|throw|while)\n"</literal>
<literal type="string">"^[ \t]*(([A-Za-z_][A-Za-z_0-9]*[ \t]+)+[A-Za-z_][A-Za-z_0-9]*[ \t]*\\([^;]*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?"</literal>
<literal type="string">"|[-+*/&lt;&gt;%&amp;^|=!]="</literal>
<literal type="string">"|--|\\+\\+|&lt;&lt;=?|&gt;&gt;&gt;?=?|&amp;&amp;|\\|\\|"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"matlab"</literal></expr></argument>,





<argument><expr><literal type="string">"^[[:space:]]*((classdef|function)[[:space:]].*)$|^(%%%?|##)[[:space:]].*$"</literal></expr></argument>,
<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|[=~&lt;&gt;]=|\\.[*/\\^']|\\|\\||&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"objc"</literal></expr></argument>,

<argument><expr><literal type="string">"!^[ \t]*(do|for|if|else|return|switch|while)\n"</literal>

<literal type="string">"^[ \t]*([-+][ \t]*\\([ \t]*[A-Za-z_][A-Za-z_0-9* \t]*\\)[ \t]*[A-Za-z_].*)$\n"</literal>

<literal type="string">"^[ \t]*(([A-Za-z_][A-Za-z_0-9]*[ \t]+)+[A-Za-z_][A-Za-z_0-9]*[ \t]*\\([^;]*)$\n"</literal>

<literal type="string">"^(@(implementation|interface|protocol)[ \t].*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?"</literal>
<literal type="string">"|[-+*/&lt;&gt;%&amp;^|=!]=|--|\\+\\+|&lt;&lt;=?|&gt;&gt;=?|&amp;&amp;|\\|\\||::|-&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"pascal"</literal></expr></argument>,
<argument><expr><literal type="string">"^(((class[ \t]+)?(procedure|function)|constructor|destructor|interface|"</literal>
<literal type="string">"implementation|initialization|finalization)[ \t]*.*)$"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"^(.*=[ \t]*(class|record).*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+"</literal>
<literal type="string">"|&lt;&gt;|&lt;=|&gt;=|:=|\\.\\."</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"perl"</literal></expr></argument>,
<argument><expr><literal type="string">"^package .*\n"</literal>
<literal type="string">"^sub [[:alnum:]_':]+[ \t]*"</literal>
<literal type="string">"(\\([^)]*\\)[ \t]*)?"</literal> 








<literal type="string">"(:[^;#]*)?"</literal>
<literal type="string">"(\\{[ \t]*)?"</literal> 
<literal type="string">"(#.*)?$\n"</literal> 
<literal type="string">"^(BEGIN|END|INIT|CHECK|UNITCHECK|AUTOLOAD|DESTROY)[ \t]*"</literal>
<literal type="string">"(\\{[ \t]*)?"</literal> 
<literal type="string">"(#.*)?$\n"</literal>
<literal type="string">"^=head[0-9] .*"</literal></expr></argument>, 

<argument><expr><literal type="string">"[[:alpha:]_'][[:alnum:]_']*"</literal>
<literal type="string">"|0[xb]?[0-9a-fA-F_]*"</literal>

<literal type="string">"|[0-9a-fA-F_]+(\\.[0-9a-fA-F_]+)?([eE][-+]?[0-9_]+)?"</literal>
<literal type="string">"|=&gt;|-[rwxoRWXOezsfdlpSugkbctTBMAC&gt;]|~~|::"</literal>
<literal type="string">"|&amp;&amp;=|\\|\\|=|//=|\\*\\*="</literal>
<literal type="string">"|&amp;&amp;|\\|\\||//|\\+\\+|--|\\*\\*|\\.\\.\\.?"</literal>
<literal type="string">"|[-+*/%.^&amp;&lt;&gt;=!|]="</literal>
<literal type="string">"|=~|!~"</literal>
<literal type="string">"|&lt;&lt;|&lt;&gt;|&lt;=&gt;|&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"php"</literal></expr></argument>,
<argument><expr><literal type="string">"^[\t ]*(((public|protected|private|static)[\t ]+)*function.*)$\n"</literal>
<literal type="string">"^[\t ]*((((final|abstract)[\t ]+)?class|interface|trait).*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+"</literal>
<literal type="string">"|[-+*/&lt;&gt;%&amp;^|=!.]=|--|\\+\\+|&lt;&lt;=?|&gt;&gt;=?|===|&amp;&amp;|\\|\\||::|-&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"python"</literal></expr></argument>, <argument><expr><literal type="string">"^[ \t]*((class|(async[ \t]+)?def)[ \t].*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+[jJlL]?|0[xX]?[0-9a-fA-F]+[lL]?"</literal>
<literal type="string">"|[-+*/&lt;&gt;%&amp;^|=!]=|//=?|&lt;&lt;=?|&gt;&gt;=?|\\*\\*=?"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"ruby"</literal></expr></argument>, <argument><expr><literal type="string">"^[ \t]*((class|module|def)[ \t].*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"(@|@@|\\$)?[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|\\?(\\\\C-)?(\\\\M-)?."</literal>
<literal type="string">"|//=?|[-+*/&lt;&gt;%&amp;^|=!]=|&lt;&lt;=?|&gt;&gt;=?|===|\\.{1,3}|::|[!=]~"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"rust"</literal></expr></argument>,
<argument><expr><literal type="string">"^[\t ]*((pub(\\([^\\)]+\\))?[\t ]+)?((async|const|unsafe|extern([\t ]+\"[^\"]+\"))[\t ]+)?(struct|enum|union|mod|trait|fn|impl)[&lt; \t]+[^;]*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[0-9][0-9_a-fA-Fiosuxz]*(\\.([0-9]*[eE][+-]?)?[0-9_fF]*)?"</literal>
<literal type="string">"|[-+*\\/&lt;&gt;%&amp;^|=!:]=|&lt;&lt;=?|&gt;&gt;=?|&amp;&amp;|\\|\\||-&gt;|=&gt;|\\.{2}=|\\.{3}|::"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"bibtex"</literal></expr></argument>, <argument><expr><literal type="string">"(@[a-zA-Z]{1,}[ \t]*\\{{0,1}[ \t]*[^ \t\"@',\\#}{~%]*).*$"</literal></expr></argument>,
<argument><expr><literal type="string">"[={}\"]|[^={}\" \t]+"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"tex"</literal></expr></argument>, <argument><expr><literal type="string">"^(\\\\((sub)*section|chapter|part)\\*{0,1}\\{.*)$"</literal></expr></argument>,
<argument><expr><literal type="string">"\\\\[a-zA-Z@]+|\\\\.|[a-zA-Z0-9\x80-\xff]+"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"cpp"</literal></expr></argument>,

<argument><expr><literal type="string">"!^[ \t]*[A-Za-z_][A-Za-z_0-9]*:[[:space:]]*($|/[/*])\n"</literal>

<literal type="string">"^((::[[:space:]]*)?[A-Za-z_].*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lLuU]*"</literal>
<literal type="string">"|[-+*/&lt;&gt;%&amp;^|=!]=|--|\\+\\+|&lt;&lt;=?|&gt;&gt;=?|&amp;&amp;|\\|\\||::|-&gt;\\*?|\\.\\*"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>PATTERNS</name><argument_list>(<argument><expr><literal type="string">"csharp"</literal></expr></argument>,

<argument><expr><literal type="string">"!^[ \t]*(do|while|for|if|else|instanceof|new|return|switch|case|throw|catch|using)\n"</literal>

<literal type="string">"^[ \t]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe|async)[ \t]+)*[][&lt;&gt;@.~_[:alnum:]]+[ \t]+[&lt;&gt;@._[:alnum:]]+[ \t]*\\(.*\\))[ \t]*$\n"</literal>

<literal type="string">"^[ \t]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe)[ \t]+)*[][&lt;&gt;@.~_[:alnum:]]+[ \t]+[@._[:alnum:]]+)[ \t]*$\n"</literal>

<literal type="string">"^[ \t]*(((static|public|internal|private|protected|new|unsafe|sealed|abstract|partial)[ \t]+)*(class|enum|interface|struct)[ \t]+.*)$\n"</literal>

<literal type="string">"^[ \t]*(namespace[ \t]+.*)$"</literal></expr></argument>,

<argument><expr><literal type="string">"[a-zA-Z_][a-zA-Z0-9_]*"</literal>
<literal type="string">"|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?"</literal>
<literal type="string">"|[-+*/&lt;&gt;%&amp;^|=!]=|--|\\+\\+|&lt;&lt;=?|&gt;&gt;=?|&amp;&amp;|\\|\\||::|-&gt;"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>IPATTERN</name><argument_list>(<argument><expr><literal type="string">"css"</literal></expr></argument>,
<argument><expr><literal type="string">"![:;][[:space:]]*$\n"</literal>
<literal type="string">"^[_a-z0-9].*$"</literal></expr></argument>,






<argument><expr><literal type="string">"-?[_a-zA-Z][-_a-zA-Z0-9]*"</literal> 
<literal type="string">"|-?[0-9]+|\\#[0-9a-fA-F]+"</literal></expr></argument> 
)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PATTERNS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IPATTERN</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>userdiff_driver</name></name></type> <name>driver_true</name> <init>= <expr><block>{
<expr><literal type="string">"diff=true"</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>userdiff_driver</name></name></type> <name>driver_false</name> <init>= <expr><block>{
<expr><literal type="string">"!diff"</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>userdiff_find_by_namelen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndrivers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>drv</name> <init>= <expr><name>drivers</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>drv</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>drv</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>builtin_drivers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>drv</name> <init>= <expr><name>builtin_drivers</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>drv</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>drv</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_funcname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>userdiff_funcname</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cflags</name></name> <operator>=</operator> <name>cflags</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_tristate</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_bool</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>userdiff_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_config_key</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"diff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>userdiff_find_by_namelen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>drv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>drivers</name></expr></argument>, <argument><expr><name>ndrivers</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>drivers_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>drv</name> <operator>=</operator> <operator>&amp;</operator><name><name>drivers</name><index>[<expr><name>ndrivers</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>drv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>drv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drv</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drv</name><operator>-&gt;</operator><name>binary</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"funcname"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>parse_funcname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"xfuncname"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>parse_funcname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"binary"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>parse_tristate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>external</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"textconv"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>textconv</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"cachetextconv"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>parse_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>textconv_want_cache</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"wordregex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>userdiff_find_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>userdiff_find_by_namelen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>userdiff_find_by_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>attr_check_initl</name><argument_list>(<argument><expr><literal type="string">"diff"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>git_check_attr</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>driver_true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ATTR_FALSE</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>driver_false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>userdiff_find_by_name</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>userdiff_get_textconv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>driver</name><operator>-&gt;</operator><name>textconv</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>textconv_want_cache</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>driver</name><operator>-&gt;</operator><name>textconv_cache</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>notes_cache</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"textconv/%s"</literal></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notes_cache_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>textconv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>textconv_cache</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>driver</name></expr>;</return>
</block_content>}</block></function>
</unit>
