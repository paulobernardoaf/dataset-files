<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\diff-lib.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache-tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unpack-trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fsmonitor.h"</cpp:file></cpp:include>














<function><type><specifier>static</specifier> <name>int</name></type> <name>check_removed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_missing_file_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>has_symlink_leading_path</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>sub</name></decl>;</decl_stmt>












<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>resolve_gitlink_ref</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>match_stat_with_submodule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ce_option</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>dirty_submodule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><call><name>ie_match_stat</name><argument_list>(<argument><expr><name><name>diffopt</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>ce_option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_flags</name></name></type> <name>orig_flags</name> <init>= <expr><name><name>diffopt</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>diffopt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>override_submodule_config</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_diffopt_flags_from_submodule_config</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>diffopt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>ignore_submodules</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>diffopt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>ignore_dirty_submodules</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>changed</name> <operator>||</operator> <name><name>diffopt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirty_submodules</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dirty_submodule</name> <operator>=</operator> <call><name>is_submodule_modified</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>diffopt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>ignore_untracked_in_submodules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>diffopt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>orig_flags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_diff_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>entries</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_unmerged_stage</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>max_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ce_option</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>option</name> <operator>&amp;</operator> <name>DIFF_RACY_IS_MODIFIED</name><operator>)</operator></expr>
?</condition><then> <expr><name>CE_MATCH_RACY_IS_DIRTY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name> <init>= <expr><call><name>getnanotime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>diff_set_mnemonic_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><literal type="string">"i/"</literal></expr></argument>, <argument><expr><literal type="string">"w/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_unmerged_stage</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_unmerged_stage</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oldmode</name></decl>, <decl><type ref="prev"/><name>newmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dirty_submodule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_can_quit_early</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_path_match</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>dpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wt_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_compare_stages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path_len</name> <operator>=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dpath</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>combine_diff_path_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpath</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>dpath</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpath</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dpath</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpath</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>path_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpath</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dpath</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>combine_diff_parent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>check_removed</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wt_mode</name> <operator>=</operator> <call><name>ce_mode_from_stat</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>changed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wt_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dpath</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>wt_mode</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>nce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stage</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>nce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><name>stage</name> <operator>=</operator> <call><name>ce_stage</name><argument_list>(<argument><expr><name>nce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>&lt;=</operator> <name>stage</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name><name>nce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num_compare_stages</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpath</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>stage</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>nce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpath</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>stage</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <call><name>ce_mode_from_stat</name><argument_list>(<argument><expr><name>nce</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpath</name><operator>-&gt;</operator><name>parent</name><index>[<expr><name>stage</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator>
<name>DIFF_STATUS_MODIFIED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>stage</name> <operator>==</operator> <name>diff_unmerged_stage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ce</name> <operator>=</operator> <name>nce</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>combine_merges</name></name> <operator>&amp;&amp;</operator> <name>num_compare_stages</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_combined_diff</name><argument_list>(<argument><expr><name>dpath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>dense_combined_merges</name></name></expr></argument>,
<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>dpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>diff_unmerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wt_mode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>wt_mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>diff_unmerged_stage</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_VALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newmode</name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>check_removed</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>changed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>diff_addremove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
<argument><expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>ita_invisible_in_index</name></name> <operator>&amp;&amp;</operator>
<call><name>ce_intent_to_add</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diff_addremove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>,
<argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>match_stat_with_submodule</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>,
<argument><expr><name>ce_option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirty_submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newmode</name> <operator>=</operator> <call><name>ce_mode_from_stat</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dirty_submodule</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ce_mark_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mark_fsmonitor_valid</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oldmode</name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_oid</name> <operator>=</operator> <operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_oid</name> <operator>=</operator> <ternary><condition><expr><name>changed</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>null_oid</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_change</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><name>oldmode</name></expr></argument>, <argument><expr><name>newmode</name></expr></argument>,
<argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>,
<argument><expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dirty_submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_performance_since</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"diff-files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_index_show_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oid_valid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>dirty_submodule</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>diff_addremove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><name><name>prefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_valid</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>dirty_submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_stat_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>oidp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>modep</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_missing</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>dirty_submodule</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name> <init>= <expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cached</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ce_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>check_removed</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>changed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>changed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>match_missing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>oidp</name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>modep</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>match_stat_with_submodule</name><argument_list>(<argument><expr><name>diffopt</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dirty_submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>ce_mode_from_stat</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <operator>&amp;</operator><name>null_oid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>oidp</name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>modep</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_new_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>new_file</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_missing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dirty_submodule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>get_stat_data</name><argument_list>(<argument><expr><name>new_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><name>match_missing</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dirty_submodule</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_index_show_file</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>new_file</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dirty_submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_modified</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>old_entry</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>new_entry</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>report_missing</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_missing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>oldmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dirty_submodule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_stat_data</name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><name>match_missing</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dirty_submodule</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>report_missing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_index_show_file</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>old_entry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>old_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>old_entry</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>combine_merges</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cached</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>combine_diff_path</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name> <init>= <expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>combine_diff_path_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>new_entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>pathlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>combine_diff_parent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>DIFF_STATUS_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>new_entry</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>DIFF_STATUS_MODIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>old_entry</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_combined_diff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>revs</name><operator>-&gt;</operator><name>dense_combined_merges</name></name></expr></argument>, <argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldmode</name> <operator>=</operator> <name><name>old_entry</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>oldmode</name> <operator>&amp;&amp;</operator> <call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>dirty_submodule</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_change</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><name>oldmode</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>old_entry</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>old_entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dirty_submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>do_oneway_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>unpack_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match_missing</name></decl>, <decl><type ref="prev"/><name>cached</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>index_only</name></name> <operator>&amp;&amp;</operator>
<name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>ita_invisible_in_index</name></name> <operator>&amp;&amp;</operator>
<name>idx</name> <operator>&amp;&amp;</operator> <call><name>ce_intent_to_add</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cached</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>index_only</name></name> <operator>||</operator>
<operator>(</operator><name>idx</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_VALID</name><operator>)</operator> <operator>||</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>







<expr_stmt><expr><name>match_missing</name> <operator>=</operator> <operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>ignore_merges</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cached</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&amp;&amp;</operator> <call><name>ce_stage</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>diff_unmerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name><name>pair</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_new_file</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><name>match_missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diff_index_show_file</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>show_modified</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><name>match_missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>int</name></type> <name>oneway_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>unpack_data</name></name></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>tree</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_path_match</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>idx</name></expr> ?</condition><then> <expr><name>idx</name></expr> </then><else>: <expr><name>tree</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>prune_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_oneway_diff</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>diff_can_quit_early</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>exiting_early</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>tree_oid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tree_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name></type> <name>opts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><name>tree_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"bad tree object %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>tree_name</name></expr> ?</condition><then> <expr><name>tree_name</name></expr> </then><else>: <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>tree_oid</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>head_idx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>index_only</name></name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>diff_index_cached</name></name> <operator>=</operator> <operator>(</operator><name>cached</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>oneway_diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>unpack_data</name></name> <operator>=</operator> <name>revs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>src_index</name></name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>dst_index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>pathspec</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pathspec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>pathspec</name><operator>-&gt;</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>unpack_trees</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_diff_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cached</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_array_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nr</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"run_diff_index must be passed exactly one tree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_performance_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>diff_cache</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_set_mnemonic_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>, <argument><expr><literal type="string">"c/"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cached</name></expr> ?</condition><then> <expr><literal type="string">"i/"</literal></expr> </then><else>: <expr><literal type="string">"w/"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diffcore_fix_diff_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>diff_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trace_performance_leave</name><argument_list>(<argument><expr><literal type="string">"diff-index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_diff_cache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>tree_oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>revs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>.</operator><name>prune_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>diffopt</name></name> <operator>=</operator> <operator>*</operator><name>opt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>tree_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>index_differs_from</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_flags</name></name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ita_invisible_in_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>setup_revision_opt</name></name></type> <name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>def</name></name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_revisions</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>quick</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>exit_with_status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_flags_or</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>ita_invisible_in_index</name></name> <operator>=</operator> <name>ita_invisible_in_index</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run_diff_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>object_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev</name><operator>.</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
