<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\delta-islands.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"khash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-objects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta-islands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<macro><name>KHASH_INIT</name><argument_list>(<argument>str</argument>, <argument>const char *</argument>, <argument>void *</argument>, <argument><literal type="number">1</literal></argument>, <argument>kh_str_hash_func</argument>, <argument>kh_str_hash_equal</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>kh_oid_map_t</name> <modifier>*</modifier></type><name>island_marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>island_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>island_counter_core</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>kh_str_t</name> <modifier>*</modifier></type><name>remote_islands</name></decl>;</decl_stmt>

<struct>struct <name>remote_island</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>oids</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>island_bitmap</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>bits</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>island_bitmap_size</name></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>island_bitmap_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>island_bitmap</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>island_bitmap_size</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>island_bitmap_or</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>island_bitmap_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name><name>b</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>island_bitmap_is_subset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>super</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>super</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>island_bitmap_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>super</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISLAND_BITMAP_BLOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x / 32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISLAND_BITMAP_MASK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 &lt;&lt; (x % 32))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>island_bitmap_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>bits</name><index>[<expr><call><name>ISLAND_BITMAP_BLOCK</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>|=</operator> <call><name>ISLAND_BITMAP_MASK</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>island_bitmap_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>bits</name><index>[<expr><call><name>ISLAND_BITMAP_BLOCK</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <call><name>ISLAND_BITMAP_MASK</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>in_same_island</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>trg_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>src_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>trg_pos</name></decl>, <decl><type ref="prev"/><name>src_pos</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>island_marks</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>trg_pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><operator>*</operator><name>trg_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trg_pos</name> <operator>&gt;=</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>src_pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><operator>*</operator><name>src_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_pos</name> <operator>&gt;=</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>island_bitmap_is_subset</name><argument_list>(<argument><expr><call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>trg_pos</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>src_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>island_delta_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>a_pos</name></decl>, <decl><type ref="prev"/><name>b_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>a_bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>island_marks</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a_pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a_pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a_bitmap</name> <operator>=</operator> <call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>a_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b_pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_bitmap</name> <operator>=</operator> <call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>b_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_bitmap</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_bitmap</name> <operator>||</operator> <operator>!</operator><call><name>island_bitmap_is_subset</name><argument_list>(<argument><expr><name>a_bitmap</name></expr></argument>, <argument><expr><name>b_bitmap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b_bitmap</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a_bitmap</name> <operator>||</operator> <operator>!</operator><call><name>island_bitmap_is_subset</name><argument_list>(<argument><expr><name>b_bitmap</name></expr></argument>, <argument><expr><name>a_bitmap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>create_or_get_island_marks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>kh_put_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>island_bitmap_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_island_marks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>marks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>kh_put_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_ret</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>marks</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>marks</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>island_bitmap_new</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>island_bitmap_or</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_remote_island_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>remote_island</name></name> <modifier>*</modifier></type><name>rl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_core_island</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rl</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rl</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>oid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>marks</name> <operator>=</operator> <call><name>create_or_get_island_marks</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>island_bitmap_set</name><argument_list>(<argument><expr><name>marks</name></expr></argument>, <argument><expr><name>island_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_core_island</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>NEEDS_BITMAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><name>obj</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>tag</name> <operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>tagged</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_object</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>marks</name> <operator>=</operator> <call><name>create_or_get_island_marks</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>island_bitmap_set</name><argument_list>(<argument><expr><name>marks</name></expr></argument>, <argument><expr><name>island_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>is_core_island</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>island_counter_core</name> <operator>=</operator> <name>island_counter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>island_counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>tree_islands_todo</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tree_depth_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tree_islands_todo</name></name> <modifier>*</modifier></type><name>todo_a</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tree_islands_todo</name></name> <modifier>*</modifier></type><name>todo_b</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>todo_a</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <name><name>todo_b</name><operator>-&gt;</operator><name>depth</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resolve_tree_islands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>to_pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_islands_todo</name></name> <modifier>*</modifier></type><name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>island_marks</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>todo</name></expr></argument>, <argument><expr><name><name>to_pack</name><operator>-&gt;</operator><name>nr_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>to_pack</name><operator>-&gt;</operator><name>nr_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>oe_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_pack</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBJ_TREE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>todo</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>to_pack</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>todo</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>=</operator> <call><name>oe_tree_depth</name><argument_list>(<argument><expr><name>to_pack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>to_pack</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>todo</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><name>tree_depth_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>progress_state</name> <operator>=</operator> <call><name>start_progress</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Propagating island marks"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><name><name>todo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>root_marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>root_marks</name> <operator>=</operator> <call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>lookup_tree</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name> <operator>||</operator> <call><name>parse_tree</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad tree object %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>lookup_object</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_island_marks</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>root_marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free_tree_buffer</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress_state</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>island_regexes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>island_regexes_alloc</name></decl>, <decl><type ref="prev"/><name>island_regexes_nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>core_island_name</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>island_config_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"pack.island"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>re</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>island_regexes</name></expr></argument>, <argument><expr><name>island_regexes_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>island_regexes_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>v</name> <operator>!=</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>, <argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>island_regexes</name><index>[<expr><name>island_regexes_nr</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>re</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to load island regex for '%s': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>re</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>island_regexes_nr</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"pack.islandcore"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>core_island_name</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_ref_to_island</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>island_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sha_core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>remote_island</name></name> <modifier>*</modifier></type><name>rl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hash_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name> <init>= <expr><call><name>kh_put_str</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>, <argument><expr><name>island_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kh_key</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>island_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_value</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>remote_island</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rl</name> <operator>=</operator> <call><name>kh_value</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rl</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha_core</name></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rl</name><operator>-&gt;</operator><name>hash</name></name> <operator>+=</operator> <name>sha_core</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_island_for_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>matches</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>island_name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>island_regexes_nr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>island_regexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>refname</name></expr></argument>,
<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>matches</name><index>[<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>matches</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"island regex from config has "</literal>
<literal type="string">"too many capture groups (max=%d)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>matches</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>regmatch_t</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><operator>&amp;</operator><name><name>matches</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>island_name</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>island_name</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>island_name</name></expr></argument>, <argument><expr><name>refname</name> <operator>+</operator> <name><name>match</name><operator>-&gt;</operator><name>rm_so</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>rm_eo</name></name> <operator>-</operator> <name><name>match</name><operator>-&gt;</operator><name>rm_so</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>add_ref_to_island</name><argument_list>(<argument><expr><name><name>island_name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>island_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>remote_island</name></name> <modifier>*</modifier></type><name>get_core_island</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>core_island_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name> <init>= <expr><call><name>kh_get_str</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>, <argument><expr><name>core_island_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>kh_value</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deduplicate_islands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>remote_island</name></name> <modifier>*</modifier></type><name>island</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>core</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>island_count</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>, <decl><type ref="prev"/><name>src</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>island_count</name> <operator>=</operator> <call><name>kh_size</name><argument_list>(<argument><expr><name>remote_islands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>island_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>kh_foreach_value</name><argument_list>(<argument>remote_islands</argument>, <argument>island</argument>, <argument>{
list[i++] = island;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ref</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>island_count</name></expr>;</condition> <incr><expr><name>ref</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>dst</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>island_count</name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>ref</name></expr>]</index></name><operator>-&gt;</operator><name>hash</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>src</name></expr>]</index></name><operator>-&gt;</operator><name>hash</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>src</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>island_count</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>island_bitmap_size</name> <operator>=</operator> <operator>(</operator><name>island_count</name> <operator>/</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>core</name> <operator>=</operator> <call><name>get_core_island</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>island_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mark_remote_island_1</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>core</name> <operator>&amp;&amp;</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>hash</name> <operator>==</operator> <name><name>core</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_delta_islands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>island_marks</name> <operator>=</operator> <call><name>kh_init_oid_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remote_islands</name> <operator>=</operator> <call><name>kh_init_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>island_config_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>find_island_for_ref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>deduplicate_islands</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Marked %d islands, done.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>island_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>propagate_island_marks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name> <init>= <expr><call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>root_marks</name> <init>= <expr><call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_island_marks</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>object</name></expr></argument>, <argument><expr><name>root_marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_island_marks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>root_marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>compute_pack_layers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>to_pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core_island_name</name> <operator>||</operator> <operator>!</operator><name>island_marks</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>to_pack</name><operator>-&gt;</operator><name>nr_objects</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>to_pack</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>pos</name> <init>= <expr><call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oe_set_layer</name><argument_list>(<argument><expr><name>to_pack</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>island_bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>kh_value</name><argument_list>(<argument><expr><name>island_marks</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>island_bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>island_counter_core</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oe_set_layer</name><argument_list>(<argument><expr><name>to_pack</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
</unit>
