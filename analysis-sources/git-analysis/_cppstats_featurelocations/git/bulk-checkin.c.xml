<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats_featurelocations\git\bulk-checkin.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bulk-checkin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"csum-file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> struct <name>bulk_checkin_state</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>plugged</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pack_tmp_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_idx_option</name></name></type> <name>pack_idx_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>alloc_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nr_written</name></decl>;</decl_stmt>
}</block> <decl><name>state</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_bulk_checkin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bulk_checkin_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>packname</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pack_tmp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clear_exit</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>finalize_hashfile</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>CSUM_HASH_IN_STREAM</name> <operator>|</operator> <name>CSUM_FSYNC</name> <operator>|</operator> <name>CSUM_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>finalize_hashfile</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fixup_pack_header_footer</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pack_tmp_name</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name></expr></argument>, <argument><expr><name><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packname</name></expr></argument>, <argument><expr><literal type="string">"%s/pack/pack-"</literal></expr></argument>, <argument><expr><call><name>get_object_directory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_tmp_packfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packname</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pack_tmp_name</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>written</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>pack_idx_opts</name></name></expr></argument>, <argument><expr><name><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>written</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label><name>clear_exit</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reprepare_packed_git</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>already_written</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bulk_checkin_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>has_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>written</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>oid</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_to_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bulk_checkin_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>already_hashed_to</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>git_zstream</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>obuf</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hdrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>Z_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_object</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HASH_WRITE_OBJECT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_deflate_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>pack_compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <call><name>encode_in_pack_object_header</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>obuf</name> <operator>+</operator> <name>hdrlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>hdrlen</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>status</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ibuf</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>.</operator><name>avail_in</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rsize</name> <init>= <expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ibuf</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ibuf</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>read_result</name> <init>= <expr><call><name>read_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ibuf</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"failed to read from '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>read_result</name> <operator>!=</operator> <name>rsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"failed to read %d bytes from '%s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rsize</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>rsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>already_hashed_to</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>hsize</name> <init>= <expr><name>offset</name> <operator>-</operator> <operator>*</operator><name>already_hashed_to</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&lt;</operator> <name>hsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hsize</name> <operator>=</operator> <name>rsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ibuf</name></expr></argument>, <argument><expr><name>hsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>already_hashed_to</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>ibuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>rsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>rsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>git_deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>Z_FINISH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>.</operator><name>avail_out</name></name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>write_object</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><name><name>s</name><operator>.</operator><name>next_out</name></name> <operator>-</operator> <name>obuf</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name> <operator>&amp;&amp;</operator>
<name>pack_size_limit_cfg</name> <operator>&amp;&amp;</operator>
<name>pack_size_limit_cfg</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>written</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>git_deflate_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Z_OK</name></expr>:</case>
<case>case <expr><name>Z_BUF_ERROR</name></expr>:</case>
<case>case <expr><name>Z_STREAM_END</name></expr>:</case>
<continue>continue;</continue>
<default>default:</default>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unexpected deflate failure: %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><call><name>git_deflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_to_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bulk_checkin_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HASH_WRITE_OBJECT</name><operator>)</operator> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>create_tmp_packfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>pack_tmp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_pack_idx_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>pack_idx_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>write_pack_header</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"unable to write pack header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>deflate_to_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bulk_checkin_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>result_oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>seekback</name></decl>, <decl><type ref="prev"/><name>already_hashed_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>git_hash_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>obuf</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>header_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hashfile_checkpoint</name></name></type> <name>checkpoint</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>seekback</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seekback</name> <operator>==</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot find the current offset"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header_len</name> <operator>=</operator> <call><name>xsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>obuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PRIuMAX</name></expr></argument>,
<argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HASH_WRITE_OBJECT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>already_hashed_to</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prepare_to_stream</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hashfile_checkpoint</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>crc32_begin</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stream_to_pack</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>already_hashed_to</name></expr></argument>,
<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"should not happen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>hashfile_truncate</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>checkpoint</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish_bulk_checkin</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>seekback</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot seek back"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name><name>result_oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>crc32</name></name> <operator>=</operator> <call><name>crc32_end</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>already_written</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hashfile_truncate</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>checkpoint</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>result_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>written</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>alloc_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>written</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>nr_written</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>index_bulk_checkin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>deflate_to_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>plugged</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finish_bulk_checkin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>plug_bulk_checkin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>plugged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>unplug_bulk_checkin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>plugged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finish_bulk_checkin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
