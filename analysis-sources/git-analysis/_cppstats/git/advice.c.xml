<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\advice.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"help.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>advice_fetch_show_forced_updates</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_push_update_rejected</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_push_non_ff_current</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_push_non_ff_matching</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_push_already_exists</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_push_fetch_first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_push_needs_force</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_push_unqualified_ref_name</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_status_hints</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_status_u_option</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_status_ahead_behind_warning</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_commit_before_merge</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_reset_quiet_warning</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_resolve_conflict</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_sequencer_in_use</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_implicit_identity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_detached_head</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_set_upstream_failure</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_object_name_warning</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_amworkdir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_rm_hints</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_add_embedded_repo</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_ignored_hook</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_waiting_for_editor</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_graft_file_deprecated</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_checkout_ambiguous_remote_branch_name</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_submodule_alternate_error_strategy_die</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_add_ignored_file</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advice_add_empty_pathspec</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>advice_use_color</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>advice_colors</name><index>[]</index><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>GIT_COLOR_RESET</name></expr>,

<expr><name>GIT_COLOR_YELLOW</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>color_advice</name> <block>{

<decl><name>ADVICE_COLOR_RESET</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ADVICE_COLOR_HINT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_advise_color_slot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ADVICE_COLOR_RESET</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><literal type="string">"hint"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ADVICE_COLOR_HINT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>advise_get_color</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>color_advice</name></name></type> <name>ix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>want_color_stderr</name><argument_list>(<argument><expr><name>advice_use_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>advice_colors</name><index>[<expr><name>ix</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>preference</name></decl>;</decl_stmt>

}</block> <decl><name><name>advice_config</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"fetchShowForcedUpdates"</literal></expr>, <expr><operator>&amp;</operator><name>advice_fetch_show_forced_updates</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushUpdateRejected"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_update_rejected</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushNonFFCurrent"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_non_ff_current</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushNonFFMatching"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_non_ff_matching</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushAlreadyExists"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_already_exists</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushFetchFirst"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_fetch_first</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushNeedsForce"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_needs_force</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushUnqualifiedRefName"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_unqualified_ref_name</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"statusHints"</literal></expr>, <expr><operator>&amp;</operator><name>advice_status_hints</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"statusUoption"</literal></expr>, <expr><operator>&amp;</operator><name>advice_status_u_option</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"statusAheadBehindWarning"</literal></expr>, <expr><operator>&amp;</operator><name>advice_status_ahead_behind_warning</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"commitBeforeMerge"</literal></expr>, <expr><operator>&amp;</operator><name>advice_commit_before_merge</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"resetQuiet"</literal></expr>, <expr><operator>&amp;</operator><name>advice_reset_quiet_warning</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"resolveConflict"</literal></expr>, <expr><operator>&amp;</operator><name>advice_resolve_conflict</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sequencerInUse"</literal></expr>, <expr><operator>&amp;</operator><name>advice_sequencer_in_use</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"implicitIdentity"</literal></expr>, <expr><operator>&amp;</operator><name>advice_implicit_identity</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"detachedHead"</literal></expr>, <expr><operator>&amp;</operator><name>advice_detached_head</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"setUpstreamFailure"</literal></expr>, <expr><operator>&amp;</operator><name>advice_set_upstream_failure</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"objectNameWarning"</literal></expr>, <expr><operator>&amp;</operator><name>advice_object_name_warning</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"amWorkDir"</literal></expr>, <expr><operator>&amp;</operator><name>advice_amworkdir</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rmHints"</literal></expr>, <expr><operator>&amp;</operator><name>advice_rm_hints</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"addEmbeddedRepo"</literal></expr>, <expr><operator>&amp;</operator><name>advice_add_embedded_repo</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ignoredHook"</literal></expr>, <expr><operator>&amp;</operator><name>advice_ignored_hook</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"waitingForEditor"</literal></expr>, <expr><operator>&amp;</operator><name>advice_waiting_for_editor</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"graftFileDeprecated"</literal></expr>, <expr><operator>&amp;</operator><name>advice_graft_file_deprecated</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"checkoutAmbiguousRemoteBranchName"</literal></expr>, <expr><operator>&amp;</operator><name>advice_checkout_ambiguous_remote_branch_name</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"submoduleAlternateErrorStrategyDie"</literal></expr>, <expr><operator>&amp;</operator><name>advice_submodule_alternate_error_strategy_die</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"addIgnoredFile"</literal></expr>, <expr><operator>&amp;</operator><name>advice_add_ignored_file</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"addEmptyPathspec"</literal></expr>, <expr><operator>&amp;</operator><name>advice_add_empty_pathspec</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pushNonFastForward"</literal></expr>, <expr><operator>&amp;</operator><name>advice_push_update_rejected</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>

}</block> <decl><name><name>advice_setting</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>ADVICE_ADD_EMBEDDED_REPO</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"addEmbeddedRepo"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_AM_WORK_DIR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"amWorkDir"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_CHECKOUT_AMBIGUOUS_REMOTE_BRANCH_NAME</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"checkoutAmbiguousRemoteBranchName"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_COMMIT_BEFORE_MERGE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"commitBeforeMerge"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_DETACHED_HEAD</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"detachedHead"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_FETCH_SHOW_FORCED_UPDATES</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"fetchShowForcedUpdates"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_GRAFT_FILE_DEPRECATED</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"graftFileDeprecated"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_IGNORED_HOOK</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"ignoredHook"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_IMPLICIT_IDENTITY</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"implicitIdentity"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_NESTED_TAG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"nestedTag"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_OBJECT_NAME_WARNING</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"objectNameWarning"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_ALREADY_EXISTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushAlreadyExists"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_FETCH_FIRST</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushFetchFirst"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_NEEDS_FORCE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushNeedsForce"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_UPDATE_REJECTED_ALIAS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushNonFastForward"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_NON_FF_CURRENT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushNonFFCurrent"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_NON_FF_MATCHING</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushNonFFMatching"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_UNQUALIFIED_REF_NAME</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushUnqualifiedRefName"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_PUSH_UPDATE_REJECTED</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"pushUpdateRejected"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_RESET_QUIET_WARNING</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"resetQuiet"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_RESOLVE_CONFLICT</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"resolveConflict"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_RM_HINTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"rmHints"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_SEQUENCER_IN_USE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"sequencerInUse"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_SET_UPSTREAM_FAILURE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"setUpstreamFailure"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_STATUS_AHEAD_BEHIND_WARNING</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"statusAheadBehindWarning"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_STATUS_HINTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"statusHints"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_STATUS_U_OPTION</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"statusUoption"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_SUBMODULE_ALTERNATE_ERROR_STRATEGY_DIE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"submoduleAlternateErrorStrategyDie"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>ADVICE_WAITING_FOR_EDITOR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"waitingForEditor"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>turn_off_instructions</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>

<literal type="string">"Disable this message with \"git config advice.%s false\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vadvise</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>advice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>display_instructions</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_vaddf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>advice</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display_instructions</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>turn_off_instructions</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>buf</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%shint: %.*s%s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>advise_get_color</name><argument_list>(<argument><expr><name>ADVICE_COLOR_HINT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>np</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr></argument>, <argument><expr><name>cp</name></expr></argument>,

<argument><expr><call><name>advise_get_color</name><argument_list>(<argument><expr><name>ADVICE_COLOR_RESET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>np</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>np</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>advise</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>advice</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vadvise</name><argument_list>(<argument><expr><name>advice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>advice_enabled</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>advice_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ADVICE_PUSH_UPDATE_REJECTED</name></expr>:</case>

<return>return <expr><name><name>advice_setting</name><index>[<expr><name>ADVICE_PUSH_UPDATE_REJECTED</name></expr>]</index></name><operator>.</operator><name>enabled</name> <operator>&amp;&amp;</operator>

<name><name>advice_setting</name><index>[<expr><name>ADVICE_PUSH_UPDATE_REJECTED_ALIAS</name></expr>]</index></name><operator>.</operator><name>enabled</name></expr>;</return>

<default>default:</default>

<return>return <expr><name><name>advice_setting</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>enabled</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>advise_if_enabled</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>advice_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>advice</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>advice_enabled</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vadvise</name><argument_list>(<argument><expr><name>advice</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>advice_setting</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_default_advice_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slot_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.advice"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>advice_use_color</name> <operator>=</operator> <call><name>git_config_colorbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.advice."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>slot_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><call><name>parse_advise_color_slot</name><argument_list>(<argument><expr><name>slot_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>color_parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>advice_colors</name><index>[<expr><name>slot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"advice."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>advice_config</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>advice_config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>advice_config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>preference</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>advice_setting</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>advice_setting</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>advice_setting</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enabled</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_config_advices</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>advice_setting</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_config_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>advice_setting</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>error_resolve_conflict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="string">"cherry-pick"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cherry-picking is not possible because you have unmerged files."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Committing is not possible because you have unmerged files."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Merging is not possible because you have unmerged files."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="string">"pull"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pulling is not possible because you have unmerged files."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="string">"revert"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Reverting is not possible because you have unmerged files."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"It is not possible to %s because you have unmerged files."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>advice_resolve_conflict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'\n"</literal>

<literal type="string">"as appropriate to mark resolution and make a commit."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <name>NORETURN</name></type> <name>die_resolve_conflict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>me</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>error_resolve_conflict</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Exiting because of an unresolved conflict."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <name>NORETURN</name></type> <name>die_conclude_merge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You have not concluded your merge (MERGE_HEAD exists)."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advice_resolve_conflict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Please, commit your changes before merging."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Exiting because of unfinished merge."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>detach_advice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>=

<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Note: switching to '%s'.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"You are in 'detached HEAD' state. You can look around, make experimental\n"</literal>

<literal type="string">"changes and commit them, and you can discard any commits you make in this\n"</literal>

<literal type="string">"state without impacting any branches by switching back to a branch.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"If you want to create a new branch to retain commits you create, you may\n"</literal>

<literal type="string">"do so (now or later) by using -c with the switch command. Example:\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git switch -c &lt;new-branch-name&gt;\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"Or undo this operation with:\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git switch -\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"Turn off this advice by setting config variable advice.detachedHead to false\n\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
