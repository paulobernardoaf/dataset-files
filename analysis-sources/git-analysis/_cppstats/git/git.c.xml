<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\git.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"help.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alias.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_SETUP</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_SETUP_GENTLY</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_PAGER</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_WORK_TREE</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPORT_SUPER_PREFIX</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAY_PAGER_CONFIG</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_PARSEOPT</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define> 

<struct>struct <name>cmd_struct</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>option</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>git_usage_string</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n"</literal>

<literal type="string">" [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n"</literal>

<literal type="string">" [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n"</literal>

<literal type="string">" [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]\n"</literal>

<literal type="string">" &lt;command&gt; [&lt;args&gt;]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>git_more_info_string</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"'git help -a' and 'git help -g' list available subcommands and some\n"</literal>

<literal type="string">"concept guides. See 'git help &lt;command&gt;' or 'git help &lt;concept&gt;'\n"</literal>

<literal type="string">"to read about a specific subcommand or concept.\n"</literal>

<literal type="string">"See 'git help git' for an overview of the system."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_pager</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>list_builtins</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>exclude_option</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exclude_helpers_from_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unsorted_string_list_delete_item</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_token</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>token_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>len</name> <operator>==</operator> <name>token_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>token_len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>list_cmds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>list</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nongit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_git_directory_gently</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nongit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>spec</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>strchrnul</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>sep</name> <operator>-</operator> <name>spec</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match_token</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"builtins"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_builtins</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>match_token</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_all_main_cmds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>match_token</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"others"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_all_other_cmds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>match_token</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"nohelpers"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exclude_helpers_from_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>match_token</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"alias"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_aliases</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>match_token</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_cmds_by_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><literal type="string">"list-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>spec</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_cmds_by_category</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unsupported command listing type '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>spec</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>spec</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>spec</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>commit_pager_choice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>use_pager</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"GIT_PAGER"</literal></expr></argument>, <argument><expr><literal type="string">"cat"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>setup_pager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>setup_auto_pager</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_pager</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>pager_in_use</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>use_pager</name> <operator>=</operator> <call><name>check_pager_config</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_pager</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>use_pager</name> <operator>=</operator> <name>def</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_pager_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>envchanged</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>orig_argv</name> <init>= <expr><operator>*</operator><name>argv</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--exec-path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>git_set_exec_path</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>git_exec_path</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_query_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--html-path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>system_path</name><argument_list>(<argument><expr><name>GIT_HTML_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_query_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--man-path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>system_path</name><argument_list>(<argument><expr><name>GIT_MAN_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_query_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--info-path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>system_path</name><argument_list>(<argument><expr><name>GIT_INFO_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_query_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--paginate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_pager</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-P"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--no-pager"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_pager</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--no-replace-objects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_replace_refs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>NO_REPLACE_OBJECTS_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--git-dir"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no directory given for --git-dir\n"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_DIR_ENVIRONMENT</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--git-dir="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_DIR_ENVIRONMENT</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--namespace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no namespace given for --namespace\n"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_NAMESPACE_ENVIRONMENT</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--namespace="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_NAMESPACE_ENVIRONMENT</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--work-tree"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no directory given for --work-tree\n"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_WORK_TREE_ENVIRONMENT</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--work-tree="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_WORK_TREE_ENVIRONMENT</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--super-prefix"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no prefix given for --super-prefix\n"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_SUPER_PREFIX_ENVIRONMENT</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--super-prefix="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_SUPER_PREFIX_ENVIRONMENT</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--bare"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name> <init>= <expr><call><name>xgetcwd</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>is_bare_repository_cfg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_DIR_ENVIRONMENT</name></expr></argument>, <argument><expr><name>cwd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_IMPLICIT_WORK_TREE_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-c expects a configuration string\n"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_config_push_parameter</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--literal-pathspecs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_LITERAL_PATHSPECS_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--no-literal-pathspecs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_LITERAL_PATHSPECS_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--glob-pathspecs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_GLOB_PATHSPECS_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--noglob-pathspecs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_NOGLOB_PATHSPECS_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--icase-pathspecs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_ICASE_PATHSPECS_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--no-optional-locks"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_OPTIONAL_LOCKS_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--shallow-file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_alternate_shallow_file</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-C"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no directory given for -C\n"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"cannot change to '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>envchanged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"--list-cmds="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_query_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"parseopt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>list</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_builtins</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>NO_PARSEOPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>list_cmds</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown option: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator> <operator>-</operator> <name>orig_argv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_alias</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>envchanged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>option_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias_command</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alias_string</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alias_command</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>alias_string</name> <operator>=</operator> <call><name>alias_lookup</name><argument_list>(<argument><expr><name>alias_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alias_string</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argcp</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' is aliased to '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>alias_command</name></expr></argument>, <argument><expr><name>alias_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alias_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>child</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nongit_ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_git_directory_gently</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nongit_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>commit_pager_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>.</operator><name>use_shell</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>.</operator><name>trace2_child_class</name></name> <operator>=</operator> <literal type="string">"shell_alias"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>alias_string</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_alias</name><argument_list>(<argument><expr><name>alias_command</name></expr></argument>, <argument><expr><name><name>child</name><operator>.</operator><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_list_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_run_shell_alias_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"while expanding alias '%s': '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>alias_command</name></expr></argument>, <argument><expr><name>alias_string</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>split_cmdline</name><argument_list>(<argument><expr><name>alias_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad alias.%s string: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alias_command</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><call><name>split_cmdline_strerror</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>option_count</name> <operator>=</operator> <call><name>handle_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>envchanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"alias '%s' changes environment variables.\n"</literal>

<literal type="string">"You can use '!git' in the alias to do this"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>alias_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MOVE_ARRAY</name><argument_list>(<argument><expr><name>new_argv</name> <operator>-</operator> <name>option_count</name></expr></argument>, <argument><expr><name>new_argv</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_argv</name> <operator>-=</operator> <name>option_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"empty alias for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alias_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>alias_command</name></expr></argument>, <argument><expr><name><name>new_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recursive alias: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alias_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_argv_printf</name><argument_list>(<argument><expr><name>new_argv</name></expr></argument>,

<argument><expr><literal type="string">"trace: alias expansion: %s =&gt;"</literal></expr></argument>,

<argument><expr><name>alias_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name>new_argv</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <operator>*</operator><name>argcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name>new_argv</name> <operator>+</operator> <name>count</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>argcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_alias</name><argument_list>(<argument><expr><name>alias_command</name></expr></argument>, <argument><expr><name>new_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_list_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>argv</name> <operator>=</operator> <name>new_argv</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>argcp</name> <operator>+=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_builtin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmd_struct</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>help</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>help</name> <operator>=</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>help</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <name>RUN_SETUP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>setup_git_directory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <name>RUN_SETUP_GENTLY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nongit_ok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>setup_git_directory_gently</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nongit_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_pager</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUN_SETUP</name> <operator>|</operator> <name>RUN_SETUP_GENTLY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <name>DELAY_PAGER_CONFIG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>use_pager</name> <operator>=</operator> <call><name>check_pager_config</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_pager</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <name>USE_PAGER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>use_pager</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <operator>(</operator><name>RUN_SETUP</name> <operator>|</operator> <name>RUN_SETUP_GENTLY</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>startup_info</name><operator>-&gt;</operator><name>have_repository</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>trace_repo_setup</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>commit_pager_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>help</name> <operator>&amp;&amp;</operator> <call><name>get_super_prefix</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <name>SUPPORT_SUPER_PREFIX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s doesn't support --super-prefix"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>help</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;</operator> <name>NEED_WORK_TREE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_work_tree</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_argv_printf</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"trace: built-in: git"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_list_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_cache_entries</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_cache_entries</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISSOCK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"write failure on standard output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown write failure on standard output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"close failed on standard output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>cmd_struct</name></name></type> <name><name>commands</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><name>cmd_add</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"am"</literal></expr>, <expr><name>cmd_am</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"annotate"</literal></expr>, <expr><name>cmd_annotate</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"apply"</literal></expr>, <expr><name>cmd_apply</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"archive"</literal></expr>, <expr><name>cmd_archive</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bisect--helper"</literal></expr>, <expr><name>cmd_bisect__helper</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blame"</literal></expr>, <expr><name>cmd_blame</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"branch"</literal></expr>, <expr><name>cmd_branch</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>DELAY_PAGER_CONFIG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bundle"</literal></expr>, <expr><name>cmd_bundle</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cat-file"</literal></expr>, <expr><name>cmd_cat_file</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"check-attr"</literal></expr>, <expr><name>cmd_check_attr</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"check-ignore"</literal></expr>, <expr><name>cmd_check_ignore</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"check-mailmap"</literal></expr>, <expr><name>cmd_check_mailmap</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"check-ref-format"</literal></expr>, <expr><name>cmd_check_ref_format</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"checkout"</literal></expr>, <expr><name>cmd_checkout</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"checkout-index"</literal></expr>, <expr><name>cmd_checkout_index</name></expr>,

<expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cherry"</literal></expr>, <expr><name>cmd_cherry</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cherry-pick"</literal></expr>, <expr><name>cmd_cherry_pick</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clean"</literal></expr>, <expr><name>cmd_clean</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clone"</literal></expr>, <expr><name>cmd_clone</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"column"</literal></expr>, <expr><name>cmd_column</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"commit"</literal></expr>, <expr><name>cmd_commit</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"commit-graph"</literal></expr>, <expr><name>cmd_commit_graph</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"commit-tree"</literal></expr>, <expr><name>cmd_commit_tree</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"config"</literal></expr>, <expr><name>cmd_config</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>DELAY_PAGER_CONFIG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"count-objects"</literal></expr>, <expr><name>cmd_count_objects</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"credential"</literal></expr>, <expr><name>cmd_credential</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"describe"</literal></expr>, <expr><name>cmd_describe</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diff"</literal></expr>, <expr><name>cmd_diff</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diff-files"</literal></expr>, <expr><name>cmd_diff_files</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diff-index"</literal></expr>, <expr><name>cmd_diff_index</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diff-tree"</literal></expr>, <expr><name>cmd_diff_tree</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"difftool"</literal></expr>, <expr><name>cmd_difftool</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"env--helper"</literal></expr>, <expr><name>cmd_env__helper</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fast-export"</literal></expr>, <expr><name>cmd_fast_export</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fetch"</literal></expr>, <expr><name>cmd_fetch</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fetch-pack"</literal></expr>, <expr><name>cmd_fetch_pack</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fmt-merge-msg"</literal></expr>, <expr><name>cmd_fmt_merge_msg</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"for-each-ref"</literal></expr>, <expr><name>cmd_for_each_ref</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"format-patch"</literal></expr>, <expr><name>cmd_format_patch</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fsck"</literal></expr>, <expr><name>cmd_fsck</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fsck-objects"</literal></expr>, <expr><name>cmd_fsck</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gc"</literal></expr>, <expr><name>cmd_gc</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get-tar-commit-id"</literal></expr>, <expr><name>cmd_get_tar_commit_id</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"grep"</literal></expr>, <expr><name>cmd_grep</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hash-object"</literal></expr>, <expr><name>cmd_hash_object</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>cmd_help</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"index-pack"</literal></expr>, <expr><name>cmd_index_pack</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"init"</literal></expr>, <expr><name>cmd_init_db</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"init-db"</literal></expr>, <expr><name>cmd_init_db</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"interpret-trailers"</literal></expr>, <expr><name>cmd_interpret_trailers</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><name>cmd_log</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ls-files"</literal></expr>, <expr><name>cmd_ls_files</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ls-remote"</literal></expr>, <expr><name>cmd_ls_remote</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ls-tree"</literal></expr>, <expr><name>cmd_ls_tree</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mailinfo"</literal></expr>, <expr><name>cmd_mailinfo</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mailsplit"</literal></expr>, <expr><name>cmd_mailsplit</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge"</literal></expr>, <expr><name>cmd_merge</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-base"</literal></expr>, <expr><name>cmd_merge_base</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-file"</literal></expr>, <expr><name>cmd_merge_file</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-index"</literal></expr>, <expr><name>cmd_merge_index</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-ours"</literal></expr>, <expr><name>cmd_merge_ours</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-recursive"</literal></expr>, <expr><name>cmd_merge_recursive</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-recursive-ours"</literal></expr>, <expr><name>cmd_merge_recursive</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-recursive-theirs"</literal></expr>, <expr><name>cmd_merge_recursive</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-subtree"</literal></expr>, <expr><name>cmd_merge_recursive</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"merge-tree"</literal></expr>, <expr><name>cmd_merge_tree</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mktag"</literal></expr>, <expr><name>cmd_mktag</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mktree"</literal></expr>, <expr><name>cmd_mktree</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"multi-pack-index"</literal></expr>, <expr><name>cmd_multi_pack_index</name></expr>, <expr><name>RUN_SETUP_GENTLY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mv"</literal></expr>, <expr><name>cmd_mv</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"name-rev"</literal></expr>, <expr><name>cmd_name_rev</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"notes"</literal></expr>, <expr><name>cmd_notes</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pack-objects"</literal></expr>, <expr><name>cmd_pack_objects</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pack-redundant"</literal></expr>, <expr><name>cmd_pack_redundant</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pack-refs"</literal></expr>, <expr><name>cmd_pack_refs</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"patch-id"</literal></expr>, <expr><name>cmd_patch_id</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pickaxe"</literal></expr>, <expr><name>cmd_blame</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"prune"</literal></expr>, <expr><name>cmd_prune</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"prune-packed"</literal></expr>, <expr><name>cmd_prune_packed</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pull"</literal></expr>, <expr><name>cmd_pull</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"push"</literal></expr>, <expr><name>cmd_push</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"range-diff"</literal></expr>, <expr><name>cmd_range_diff</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>USE_PAGER</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"read-tree"</literal></expr>, <expr><name>cmd_read_tree</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>SUPPORT_SUPER_PREFIX</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rebase"</literal></expr>, <expr><name>cmd_rebase</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rebase--interactive"</literal></expr>, <expr><name>cmd_rebase__interactive</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"receive-pack"</literal></expr>, <expr><name>cmd_receive_pack</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reflog"</literal></expr>, <expr><name>cmd_reflog</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"remote"</literal></expr>, <expr><name>cmd_remote</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"remote-ext"</literal></expr>, <expr><name>cmd_remote_ext</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"remote-fd"</literal></expr>, <expr><name>cmd_remote_fd</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"repack"</literal></expr>, <expr><name>cmd_repack</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"replace"</literal></expr>, <expr><name>cmd_replace</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rerere"</literal></expr>, <expr><name>cmd_rerere</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reset"</literal></expr>, <expr><name>cmd_reset</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"restore"</literal></expr>, <expr><name>cmd_restore</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rev-list"</literal></expr>, <expr><name>cmd_rev_list</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rev-parse"</literal></expr>, <expr><name>cmd_rev_parse</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"revert"</literal></expr>, <expr><name>cmd_revert</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rm"</literal></expr>, <expr><name>cmd_rm</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"send-pack"</literal></expr>, <expr><name>cmd_send_pack</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"shortlog"</literal></expr>, <expr><name>cmd_shortlog</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>USE_PAGER</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"show"</literal></expr>, <expr><name>cmd_show</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"show-branch"</literal></expr>, <expr><name>cmd_show_branch</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"show-index"</literal></expr>, <expr><name>cmd_show_index</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"show-ref"</literal></expr>, <expr><name>cmd_show_ref</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sparse-checkout"</literal></expr>, <expr><name>cmd_sparse_checkout</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stage"</literal></expr>, <expr><name>cmd_add</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stash"</literal></expr>, <expr><name>cmd_stash</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>cmd_status</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stripspace"</literal></expr>, <expr><name>cmd_stripspace</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"submodule--helper"</literal></expr>, <expr><name>cmd_submodule__helper</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>SUPPORT_SUPER_PREFIX</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"switch"</literal></expr>, <expr><name>cmd_switch</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NEED_WORK_TREE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"symbolic-ref"</literal></expr>, <expr><name>cmd_symbolic_ref</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tag"</literal></expr>, <expr><name>cmd_tag</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>DELAY_PAGER_CONFIG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"unpack-file"</literal></expr>, <expr><name>cmd_unpack_file</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"unpack-objects"</literal></expr>, <expr><name>cmd_unpack_objects</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"update-index"</literal></expr>, <expr><name>cmd_update_index</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"update-ref"</literal></expr>, <expr><name>cmd_update_ref</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"update-server-info"</literal></expr>, <expr><name>cmd_update_server_info</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"upload-archive"</literal></expr>, <expr><name>cmd_upload_archive</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"upload-archive--writer"</literal></expr>, <expr><name>cmd_upload_archive_writer</name></expr>, <expr><name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"upload-pack"</literal></expr>, <expr><name>cmd_upload_pack</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"var"</literal></expr>, <expr><name>cmd_var</name></expr>, <expr><name>RUN_SETUP_GENTLY</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"verify-commit"</literal></expr>, <expr><name>cmd_verify_commit</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"verify-pack"</literal></expr>, <expr><name>cmd_verify_pack</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"verify-tag"</literal></expr>, <expr><name>cmd_verify_tag</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><name>cmd_version</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"whatchanged"</literal></expr>, <expr><name>cmd_whatchanged</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"worktree"</literal></expr>, <expr><name>cmd_worktree</name></expr>, <expr><name>RUN_SETUP</name> <operator>|</operator> <name>NO_PARSEOPT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"write-tree"</literal></expr>, <expr><name>cmd_write_tree</name></expr>, <expr><name>RUN_SETUP</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>cmd_struct</name></name> <modifier>*</modifier></type><name>get_builtin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cmd_struct</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>commands</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_builtin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>get_builtin</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_builtins</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>exclude_option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exclude_option</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>option</name> <operator>&amp;</operator> <name>exclude_option</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRIP_EXTENSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>strip_extension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strip_suffix</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>STRIP_EXTENSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strip_extension</name><parameter_list>(<parameter><type><name>cmd</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_builtin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>args</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmd_struct</name></name> <modifier>*</modifier></type><name>builtin</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strip_extension</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cmd</name> <operator>=</operator> <literal type="string">"help"</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"--exclude-guides"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>argv</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>builtin</name> <operator>=</operator> <call><name>get_builtin</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>builtin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>run_builtin</name><argument_list>(<argument><expr><name>builtin</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execv_dashed_external</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>cmd</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_super_prefix</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s doesn't support --super-prefix"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_pager</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_builtin</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>use_pager</name> <operator>=</operator> <call><name>check_pager_config</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_pager_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"git-%s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>clean_on_exit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>wait_after_clean</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>silent_exec_failure</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>trace2_child_class</name></name> <operator>=</operator> <literal type="string">"dashed"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_run_dashed_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_argv_printf</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><literal type="string">"trace: exec:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_argv</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done_alias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>cmd_list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>seen</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done_alias</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handle_builtin</name><argument_list>(<argument><expr><operator>*</operator><name>argcp</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>get_builtin</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>args</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><literal type="string">"_run_git_alias_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_super_prefix</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s doesn't support --super-prefix"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_pager_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"git"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>argcp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>trace_argv_printf</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><literal type="string">"trace: exec:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>run_command_v_opt_tr2</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_SILENT_EXEC_FAILURE</name> <operator>|</operator>

<name>RUN_CLEAN_ON_EXIT</name></expr></argument>, <argument><expr><literal type="string">"git_alias"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not execute builtin %s"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>execv_dashed_external</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seen</name> <operator>=</operator> <call><name>unsorted_string_list_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_list</name></expr></argument>, <argument><expr><operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmd_list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><name><name>cmd_list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\n %s"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>seen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" &lt;=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>cmd_list</name><operator>.</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" ==&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"alias loop detected: expansion of '%s' does"</literal>

<literal type="string">" not terminate:%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd_list</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_list</name></expr></argument>, <argument><expr><operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handle_alias</name><argument_list>(<argument><expr><name>argcp</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done_alias</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>done_alias</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done_help</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"git-help"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><call><name>find_last_dir_sep</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>trace_command_performance</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"git-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_builtin</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot handle %s as a builtin"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>commit_pager_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"usage: %s\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>git_usage_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_common_cmds_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>git_more_info_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>was_alias</name> <init>= <expr><call><name>run_argv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_alias</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expansion of alias '%s' failed; "</literal>

<literal type="string">"'%s' is not a git command\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done_help</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>help_unknown_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done_help</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to run command '%s': %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
