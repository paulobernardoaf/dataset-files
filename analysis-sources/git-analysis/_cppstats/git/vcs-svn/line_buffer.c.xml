<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\vcs-svn\line_buffer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line_buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BUFFER_LEN</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>buffer_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name> <operator>=</operator> <ternary><condition><expr><name>filename</name></expr> ?</condition><then> <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>stdin</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>buffer_fdinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>buffer_tmpfile_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name> <operator>=</operator> <call><name>tmpfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>buffer_deinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name> <operator>==</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>fclose</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>buffer_tmpfile_rewind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>buffer_tmpfile_prepare_to_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"ftell error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"seek error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>buffer_ferror</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>buffer_read_char</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fgetc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>buffer_read_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>line_buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>line_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>line_buffer</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>line_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>line_buffer</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>buffer_read_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>strbuf_fread</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>buffer_copy_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>byte_buffer</name><index>[<expr><name>COPY_BUFFER_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>done</name> <operator>&lt;</operator> <name>nbytes</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ferror</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>off_t</name></type> <name>len</name> <init>= <expr><name>nbytes</name> <operator>-</operator> <name>done</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>in</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <name>COPY_BUFFER_LEN</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>COPY_BUFFER_LEN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>byte_buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>byte_buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>done</name> <operator>+</operator> <call><name>buffer_skip_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name> <operator>-</operator> <name>done</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>done</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>buffer_skip_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>byte_buffer</name><index>[<expr><name>COPY_BUFFER_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>done</name> <operator>&lt;</operator> <name>nbytes</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ferror</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>off_t</name></type> <name>len</name> <init>= <expr><name>nbytes</name> <operator>-</operator> <name>done</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>in</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <name>COPY_BUFFER_LEN</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>COPY_BUFFER_LEN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>done</name> <operator>+=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>byte_buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>done</name></expr>;</return>

</block_content>}</block></function>

</unit>
