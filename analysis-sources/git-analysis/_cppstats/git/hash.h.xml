<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\hash.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA1_PPC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ppc/sha1.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA1_APPLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonDigest.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA1_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA1_DC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1dc_git.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"block-sha1/sha1.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA256_GCRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_NEEDS_CLONE_HELPER</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha256/gcrypt.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA256_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha256/block/sha256.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>platform_SHA_CTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA_CTX</name></cpp:macro> <cpp:value>SHA_CTX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA1_Init</name></cpp:macro> <cpp:value>SHA1_Init</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA1_Update</name></cpp:macro> <cpp:value>SHA1_Update</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA1_Final</name></cpp:macro> <cpp:value>SHA1_Final</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA_CTX</name></cpp:macro> <cpp:value>platform_SHA_CTX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA1_Init</name></cpp:macro> <cpp:value>platform_SHA1_Init</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA1_Update</name></cpp:macro> <cpp:value>platform_SHA1_Update</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA1_Final</name></cpp:macro> <cpp:value>platform_SHA1_Final</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>platform_SHA256_CTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA256_CTX</name></cpp:macro> <cpp:value>SHA256_CTX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA256_Init</name></cpp:macro> <cpp:value>SHA256_Init</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA256_Update</name></cpp:macro> <cpp:value>SHA256_Update</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>platform_SHA256_Final</name></cpp:macro> <cpp:value>SHA256_Final</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA256_CTX</name></cpp:macro> <cpp:value>platform_SHA256_CTX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA256_Init</name></cpp:macro> <cpp:value>platform_SHA256_Init</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA256_Update</name></cpp:macro> <cpp:value>platform_SHA256_Update</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA256_Final</name></cpp:macro> <cpp:value>platform_SHA256_Final</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>platform_SHA256_Clone</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA256_Clone</name></cpp:macro> <cpp:value>platform_SHA256_Clone</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHA1_MAX_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/sha1-chunked.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>git_SHA1_Update</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_SHA1_Update</name></cpp:macro> <cpp:value>git_SHA1_Update_Chunked</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>git_SHA1_Clone</name><parameter_list>(<parameter><decl><type><name>git_SHA_CTX</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>git_SHA_CTX</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA256_NEEDS_CLONE_HELPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>git_SHA256_Clone</name><parameter_list>(<parameter><decl><type><name>git_SHA256_CTX</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>git_SHA256_CTX</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_HASH_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_HASH_SHA1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_HASH_SHA256</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_HASH_NALGOS</name></cpp:macro> <cpp:value>(GIT_HASH_SHA256 + 1)</cpp:value></cpp:define>

<union>union <name>git_hash_ctx</name> <block>{

<decl_stmt><decl><type><name>git_SHA_CTX</name></type> <name>sha1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_SHA256_CTX</name></type> <name>sha256</name></decl>;</decl_stmt>

}</block>;</union>

<typedef>typedef <type><name><name>union</name> <name>git_hash_ctx</name></name></type> <name>git_hash_ctx</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>git_hash_init_fn</name>)<parameter_list>(<parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>git_hash_clone_fn</name>)<parameter_list>(<parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>git_hash_ctx</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>git_hash_update_fn</name>)<parameter_list>(<parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>git_hash_final_fn</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>git_hash_algo</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>format_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rawsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hexsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>blksz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_hash_init_fn</name></type> <name>init_fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_hash_clone_fn</name></type> <name>clone_fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_hash_update_fn</name></type> <name>update_fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_hash_final_fn</name></type> <name>final_fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>empty_tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>empty_blob</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>git_hash_algo</name></name></type> <name><name>hash_algos</name><index>[<expr><name>GIT_HASH_NALGOS</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>hash_algo_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>hash_algo_by_id</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>format_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>hash_algo_by_length</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hash_algo_by_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_hash_algo</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>p</name> <operator>-</operator> <name>hash_algos</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SHA1_RAWSZ</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SHA1_HEXSZ</name></cpp:macro> <cpp:value>(2 * GIT_SHA1_RAWSZ)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SHA1_BLKSZ</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SHA256_RAWSZ</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SHA256_HEXSZ</name></cpp:macro> <cpp:value>(2 * GIT_SHA256_RAWSZ)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SHA256_BLKSZ</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_MAX_RAWSZ</name></cpp:macro> <cpp:value>GIT_SHA256_RAWSZ</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_MAX_HEXSZ</name></cpp:macro> <cpp:value>GIT_SHA256_HEXSZ</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_MAX_BLKSZ</name></cpp:macro> <cpp:value>GIT_SHA256_BLKSZ</cpp:value></cpp:define>

<struct>struct <name>object_id</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>GIT_MAX_RAWSZ</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>the_hash_algo</name></cpp:macro> <cpp:value>the_repository-&gt;hash_algo</cpp:value></cpp:define>

</unit>
