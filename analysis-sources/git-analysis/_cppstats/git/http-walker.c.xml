<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\http-walker.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"walker.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<struct>struct <name>alt_base</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_indices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>packs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>object_request_state</name> <block>{

<decl><name>WAITING</name></decl>,

<decl><name>ABORTED</name></decl>,

<decl><name>ACTIVE</name></decl>,

<decl><name>COMPLETE</name></decl>

}</block>;</enum>

<struct>struct <name>object_request</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>repo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_request_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name></type> <name>node</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>alternates_request</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>http_specific</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>walker_data</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_alternates</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>alt</name></decl>;</decl_stmt>

}</block>;</struct>

<expr_stmt><expr><specifier>static</specifier> <call><name>LIST_HEAD</name><argument_list>(<argument><expr><name>object_queue_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fetch_alternates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_object_response</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>start_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>obj_req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>new_http_object_request</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj_req</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ABORTED</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>callback_func</name></name> <operator>=</operator> <name>process_object_response</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>callback_data</name></name> <operator>=</operator> <name>obj_req</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ACTIVE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ABORTED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_http_object_request</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>obj_req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>finish_http_object_request</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>rename</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>walker_say</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>walker</name></name></expr></argument>, <argument><expr><literal type="string">"got %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj_req</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_object_response</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>obj_req</name> <init>=

<expr><operator>(</operator>struct <name>object_request</name> <operator>*</operator><operator>)</operator><name>callback_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name> <init>= <expr><name><name>obj_req</name><operator>-&gt;</operator><name>walker</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>alt</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>alt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>process_http_object_request</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>COMPLETE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>normalize_curl_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>curl_result</name></name></expr></argument>,

<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>,

<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>errorstr</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>errorstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>missing_target</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fetch_alternates</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name><name>alt</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj_req</name><operator>-&gt;</operator><name>repo</name></name> <operator>=</operator>

<name><name>obj_req</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_http_object_request</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_object_request</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>finish_object_request</name><argument_list>(<argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>release_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>obj_req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name> <operator>!=</operator><name>NULL</name> <operator>&amp;&amp;</operator> <name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>localfile</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"fd leakage in release: %d"</literal></expr></argument>, <argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj_req</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_active_slot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>obj_req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name>object_queue_head</name></expr></init></decl>;</decl_stmt>

<macro><name>list_for_each_safe</name><argument_list>(<argument>pos</argument>, <argument>tmp</argument>, <argument>head</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>obj_req</name> <operator>=</operator> <call><name>list_entry</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>struct <name>object_request</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>WAITING</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>has_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj_req</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>COMPLETE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>start_object_request</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prefetch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>newreq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>newreq</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newreq</name><operator>-&gt;</operator><name>walker</name></name> <operator>=</operator> <name>walker</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>newreq</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newreq</name><operator>-&gt;</operator><name>repo</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>alt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newreq</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>WAITING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newreq</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>http_is_verbose</name> <operator>=</operator> <name><name>walker</name><operator>-&gt;</operator><name>get_verbosely</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newreq</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_queue_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fill_active_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>step_active_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_alternate_allowed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>protocols</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"http"</literal></expr>, <expr><literal type="string">"https"</literal></expr>, <expr><literal type="string">"ftp"</literal></expr>, <expr><literal type="string">"ftps"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>http_follow_config</name> <operator>!=</operator> <name>HTTP_FOLLOW_ALWAYS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"alternate disabled by http.followRedirects: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>protocols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>starts_with</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>protocols</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"ignoring alternate with unknown protocol: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_transport_allowed</name><argument_list>(<argument><expr><name><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"ignoring alternate with restricted protocol: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_alternates_response</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>alternates_request</name></name> <modifier>*</modifier></type><name>alt_req</name> <init>=

<expr><operator>(</operator>struct <name>alternates_request</name> <operator>*</operator><operator>)</operator><name>callback_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name> <init>= <expr><name><name>alt_req</name><operator>-&gt;</operator><name>walker</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>cdata</name> <init>= <expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>alt_req</name><operator>-&gt;</operator><name>slot</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name><name>cdata</name><operator>-&gt;</operator><name>alt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>alt_req</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>null_byte</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>normalize_curl_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>curl_result</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>,

<argument><expr><name>curl_errorstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curl_errorstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alt_req</name><operator>-&gt;</operator><name>http_specific</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>!=</operator> <name>CURLE_OK</name> <operator>||</operator>

<operator>!</operator><name><name>alt_req</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>alt_req</name><operator>-&gt;</operator><name>http_specific</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name><name>alt_req</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name><name>alt_req</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"%s/objects/info/alternates"</literal></expr></argument>,

<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>,

<argument><expr><name><name>alt_req</name><operator>-&gt;</operator><name>url</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>active_requests</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cdata</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>slot</name><operator>-&gt;</operator><name>finished</name></name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>missing_target</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cdata</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fwrite_buffer</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>null_byte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>alt_req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_req</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>alt_req</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>alt_req</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>posn</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>posn</name> <operator>&lt;</operator> <name><name>alt_req</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>posn</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>posn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>posn</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>okay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>serverlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>newalt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colon_ss</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>base</name></expr></argument>,<argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>colon_ss</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>serverlen</name> <operator>=</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>colon_ss</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call>

<operator>-</operator> <name>base</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>okay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"../"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>serverlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>posn</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"../"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>serverlen</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>serverlen</name> <operator>&amp;&amp;</operator>

<name><name>base</name><index>[<expr><name>serverlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>okay</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>base</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator>

<name>serverlen</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>alt_req</name><operator>-&gt;</operator><name>http_specific</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colon</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>colon</name> <operator>&amp;&amp;</operator> <name>slash</name> <operator>&amp;&amp;</operator> <name>colon</name> <operator>&lt;</operator> <name>data</name> <operator>+</operator> <name>posn</name> <operator>&amp;&amp;</operator>

<name>slash</name> <operator>&lt;</operator> <name>data</name> <operator>+</operator> <name>posn</name> <operator>&amp;&amp;</operator> <name>colon</name> <operator>&lt;</operator> <name>slash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>okay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>okay</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>target</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>serverlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>posn</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strbuf_strip_suffix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><literal type="string">"objects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"ignoring alternate that does"</literal>

<literal type="string">" not end in 'objects': %s"</literal></expr></argument>,

<argument><expr><name><name>target</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_alternate_allowed</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"adding alternate object store: %s"</literal></expr></argument>,

<argument><expr><name><name>target</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newalt</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newalt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newalt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newalt</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newalt</name><operator>-&gt;</operator><name>got_indices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newalt</name><operator>-&gt;</operator><name>packs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newalt</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>posn</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>cdata</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fetch_alternates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buffer</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>url</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>active_request_slot</name></name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alternates_request</name></name></type> <name>alt_req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>cdata</name> <init>= <expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name><name>cdata</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>step_active_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>cdata</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cdata</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>walker</name><operator>-&gt;</operator><name>get_verbosely</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Getting alternates list for %s\n"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="string">"%s/objects/info/http-alternates"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>get_active_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>callback_func</name></name> <operator>=</operator> <name>process_alternates_response</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_req</name><operator>.</operator><name>walker</name></name> <operator>=</operator> <name>walker</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>callback_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>alt_req</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_FILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>fwrite_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_req</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_req</name><operator>.</operator><name>url</name></name> <operator>=</operator> <operator>&amp;</operator><name>url</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_req</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_req</name><operator>.</operator><name>http_specific</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_req</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>run_active_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cdata</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_indices</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>repo</name><operator>-&gt;</operator><name>got_indices</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>walker</name><operator>-&gt;</operator><name>get_verbosely</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Getting pack list for %s\n"</literal></expr></argument>, <argument><expr><name><name>repo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>http_get_info_packs</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>repo</name><operator>-&gt;</operator><name>packs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HTTP_OK</name></expr>:</case>

<case>case <expr><name>HTTP_MISSING_TARGET</name></expr>:</case>

<expr_stmt><expr><name><name>repo</name><operator>-&gt;</operator><name>got_indices</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>repo</name><operator>-&gt;</operator><name>got_indices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_fetch_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slot_results</name></name></type> <name>results</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_pack_request</name></name> <modifier>*</modifier></type><name>preq</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fetch_indices</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>find_sha1_pack</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name><name>repo</name><operator>-&gt;</operator><name>packs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>walker</name><operator>-&gt;</operator><name>get_verbosely</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Getting pack %s\n"</literal></expr></argument>,

<argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" which contains %s\n"</literal></expr></argument>,

<argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>preq</name> <operator>=</operator> <call><name>new_http_pack_request</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>repo</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>lst</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>repo</name><operator>-&gt;</operator><name>packs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <operator>&amp;</operator><name>results</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_active_slot</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>run_active_slot</name><argument_list>(<argument><expr><name><name>preq</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>results</name><operator>.</operator><name>curl_result</name></name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to get pack file %s\n%s"</literal></expr></argument>, <argument><expr><name><name>preq</name><operator>-&gt;</operator><name>url</name></name></expr></argument>,

<argument><expr><name>curl_errorstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to start request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finish_http_pack_request</name><argument_list>(<argument><expr><name>preq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_http_pack_request</name><argument_list>(<argument><expr><name>preq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>abort</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>abort_object_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>obj_req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>release_object_request</name><argument_list>(<argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_request</name></name> <modifier>*</modifier></type><name>obj_req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_object_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name>object_queue_head</name></expr></init></decl>;</decl_stmt>

<macro><name>list_for_each</name><argument_list>(<argument>pos</argument>, <argument>head</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><name>obj_req</name> <operator>=</operator> <call><name>list_entry</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>struct <name>object_request</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasheq</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>obj_req</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Couldn't find request for %s in the queue"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj_req</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort_http_object_request</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>abort_object_request</name><argument_list>(<argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>WAITING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>step_active_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>start_object_request</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>run_active_slot</name><argument_list>(<argument><expr><name><name>obj_req</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>obj_req</name><operator>-&gt;</operator><name>req</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>localfile</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>localfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>localfile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>normalize_curl_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>curl_result</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>errorstr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>errorstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_req</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ABORTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"Request for %s aborted"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>curl_result</name></name> <operator>!=</operator> <name>CURLE_OK</name> <operator>&amp;&amp;</operator>

<name><name>req</name><operator>-&gt;</operator><name>http_code</name></name> <operator>!=</operator> <literal type="number">416</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>missing_target</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s (curl_result = %d, http_code = %ld, sha1 = %s)"</literal></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>errorstr</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>curl_result</name></name></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>zret</name></name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>corrupt_object_found</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"File %s (%s) corrupt"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj_req</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>real_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"File %s has bad hash"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>rename</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>loose_object_path</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to write sha1 filename %s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>release_http_object_request</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_object_request</name><argument_list>(<argument><expr><name>obj_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>altbase</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>alt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fetch_object</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>altbase</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>http_fetch_pack</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name>altbase</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fetch_alternates</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>altbase</name> <operator>=</operator> <name><name>altbase</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Unable to find %s under %s"</literal></expr></argument>, <argument><expr><call><name>hash_to_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fetch_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>http_fetch_ref</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alt_base</name></name> <modifier>*</modifier></type><name>alt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alt_next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alt</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>alt</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>alt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alt_next</name> <operator>=</operator> <name><name>alt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>alt</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alt</name> <operator>=</operator> <name>alt_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>get_http_walker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>walker_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>walker</name></name> <modifier>*</modifier></type><name>walker</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>walker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>alt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'/'</literal></expr>;</condition> <incr><expr><operator>--</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>got_indices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>packs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>alt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>got_alternates</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>corrupt_object_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>fetch</name></name> <operator>=</operator> <name>fetch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>fetch_ref</name></name> <operator>=</operator> <name>fetch_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>prefetch</name></name> <operator>=</operator> <name>prefetch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>cleanup</name></name> <operator>=</operator> <name>cleanup</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>walker</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CURL_MULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>add_fill_function</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>fill_active_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>walker</name></expr>;</return>

</block_content>}</block></function>

</unit>
