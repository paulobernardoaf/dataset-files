<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\alloc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alloc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKING</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<union>union <name>any_object</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name></type> <name>object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name></type> <name>blob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name></type> <name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name></type> <name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tag</name></name></type> <name>tag</name></decl>;</decl_stmt>

}</block>;</union>

<struct>struct <name>alloc_state</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slabs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slab_nr</name></decl>, <decl><type ref="prev"/><name>slab_alloc</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>allocate_alloc_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>alloc_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_alloc_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slab_nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slab_nr</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>slabs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>slab_nr</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>slabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>alloc_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>node_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name>BLOCKING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>BLOCKING</name> <operator>*</operator> <name>node_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>slabs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>slab_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>slab_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slabs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>slab_nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nr</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>node_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>node_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>alloc_blob_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>alloc_node</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name><operator>-&gt;</operator><name>blob_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>blob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBJ_BLOB</name></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>alloc_tree_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>alloc_node</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name><operator>-&gt;</operator><name>tree_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBJ_TREE</name></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>alloc_tag_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tag</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>alloc_node</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name><operator>-&gt;</operator><name>tag_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBJ_TAG</name></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>alloc_object_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>alloc_node</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name><operator>-&gt;</operator><name>object_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>any_object</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_NONE</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>alloc_commit_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name><operator>-&gt;</operator><name>commit_count</name></name><operator>++</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_commit_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OBJ_COMMIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>alloc_commit_index</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>=</operator> <name>COMMIT_NOT_FROM_GRAPH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>generation</name></name> <operator>=</operator> <name>GENERATION_NUMBER_INFINITY</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>alloc_commit_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>alloc_node</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name><operator>-&gt;</operator><name>commit_state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>commit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_commit_node</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%10s: %8u (%"</literal><name>PRIuMAX</name><literal type="string">" kB)\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPORT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>report(#name, r-&gt;parsed_objects-&gt;name##_state-&gt;count, r-&gt;parsed_objects-&gt;name##_state-&gt;count * sizeof(type) &gt;&gt; 10)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>alloc_report</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>REPORT</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr>struct <name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPORT</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr>struct <name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPORT</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr>struct <name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPORT</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr>struct <name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REPORT</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr>union <name>any_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
