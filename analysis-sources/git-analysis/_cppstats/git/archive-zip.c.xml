<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\archive-zip.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streaming.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>zip_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>zip_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>zip_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uintmax_t</name></type> <name>zip_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>zip_dir_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>max_creator_version</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_STREAM</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_UTF8</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>

<enum>enum <name>zip_method</name> <block>{

<decl><name>ZIP_METHOD_STORE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ZIP_METHOD_DEFLATE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>

}</block>;</enum>

<struct>struct <name>zip_local_header</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>version</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>compression_method</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mtime</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mdate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>crc32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>compressed_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>filename_length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>extra_length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>zip_data_desc</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>crc32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>compressed_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>zip64_data_desc</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>crc32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>compressed_size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>zip_dir_trailer</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>disk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>directory_start_disk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>entries_on_this_disk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>entries</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>offset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>comment_length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>zip_extra_mtime</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>extra_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mtime</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>zip64_extra</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>extra_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>compressed_size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>zip64_dir_trailer</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>record_size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>creator_version</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>version</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>disk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>directory_start_disk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>entries_on_this_disk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>entries</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>offset</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>zip64_dir_trailer_locator</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>disk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>offset</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>number_of_disks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_LOCAL_HEADER_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip_local_header, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_DATA_DESC_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip_data_desc, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP64_DATA_DESC_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip64_data_desc, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_DIR_HEADER_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip_dir_header, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_DIR_TRAILER_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip_dir_trailer, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_EXTRA_MTIME_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip_extra_mtime, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_EXTRA_MTIME_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>(ZIP_EXTRA_MTIME_SIZE - offsetof(struct zip_extra_mtime, flags))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP64_EXTRA_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip64_extra, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP64_EXTRA_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>(ZIP64_EXTRA_SIZE - offsetof(struct zip64_extra, size))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP64_DIR_TRAILER_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip64_dir_trailer, _end)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP64_DIR_TRAILER_RECORD_SIZE</name></cpp:macro> <cpp:value>(ZIP64_DIR_TRAILER_SIZE - offsetof(struct zip64_dir_trailer, creator_version))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP64_DIR_TRAILER_LOCATOR_SIZE</name></cpp:macro> <cpp:value>offsetof(struct zip64_dir_trailer_locator, _end)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_le16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">010</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_le32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">010</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">020</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">030</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_le64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">010</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">020</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">030</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">040</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">050</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">060</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">070</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>clamp_max</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>clamped</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>clamped</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>max</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_le16_clamp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>clamped</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name>clamp_max</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><name>clamped</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_le32_clamp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>clamped</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name>clamp_max</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><name>clamped</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strbuf_add_le</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><operator>!</operator><operator>!</operator><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>clamp32</name><parameter_list>(<parameter><decl><type><name>uintmax_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uintmax_t</name></type> <name>max</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name>max</name><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>max</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>zlib_deflate_raw</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>compression_level</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>compressed_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>git_zstream</name></type> <name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_deflate_init_raw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <call><name>git_deflate_bound</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>maxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>maxsize</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>git_deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>result</name> <operator>==</operator> <name>Z_OK</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_deflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>compressed_size</name> <operator>=</operator> <name><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_zip_data_desc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>compressed_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal> <operator>||</operator> <name>compressed_size</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>zip64_data_desc</name></name></type> <name>trailer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x08074b50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>crc32</name></name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>compressed_size</name></name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailer</name></expr></argument>, <argument><expr><name>ZIP64_DATA_DESC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>ZIP64_DATA_DESC_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>zip_data_desc</name></name></type> <name>trailer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x08074b50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>crc32</name></name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>compressed_size</name></name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailer</name></expr></argument>, <argument><expr><name>ZIP_DATA_DESC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>ZIP_DATA_DESC_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_zip_header_data_desc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>zip_local_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>compressed_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>crc32</name></name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>compressed_size</name></name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_only_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>entry_is_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>userdiff_find_by_path</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>driver</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>driver</name> <operator>=</operator> <call><name>userdiff_find_by_name</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>binary</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>driver</name><operator>-&gt;</operator><name>binary</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>buffer_is_binary</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_BUFFER_SIZE</name></cpp:macro> <cpp:value>(1024 * 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_zip_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archiver_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pathlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>zip_local_header</name></name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>offset</name> <init>= <expr><name>zip_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>zip_extra_mtime</name></name></type> <name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>zip64_extra</name></name></type> <name>extra64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_extra_size</name> <init>= <expr><name>ZIP_EXTRA_MTIME_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_zip64_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>compressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>zip_method</name></name></type> <name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>deflated</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_binary</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_without_prefix</name> <init>= <expr><name>path</name> <operator>+</operator> <name><name>args</name><operator>-&gt;</operator><name>baselen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>creator_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version_needed</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>zip_dir_extra_size</name> <init>= <expr><name>ZIP_EXTRA_MTIME_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>zip64_dir_extra_payload_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_only_ascii</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_utf8</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ZIP_UTF8</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path is not valid UTF-8: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pathlen</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path too long (%d chars, SHA1: %s): %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pathlen</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <name>ZIP_METHOD_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr2</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name> <init>= <expr><call><name>oid_object_info</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <name>ZIP_METHOD_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr2</name> <operator>=</operator> <ternary><condition><expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>mode</name> <operator>|</operator> <literal type="number">0777</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0111</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>mode</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0111</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>creator_version</name> <operator>=</operator> <literal type="number">0x0317</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <name>ZIP_METHOD_DEFLATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>OBJ_BLOB</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>args</name><operator>-&gt;</operator><name>convert</name></name> <operator>&amp;&amp;</operator>

<name>size</name> <operator>&gt;</operator> <name>big_file_threshold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>open_istream</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot stream blob %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ZIP_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>object_file_to_archive</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_binary</name> <operator>=</operator> <call><name>entry_is_binary</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name>path_without_prefix</name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>compressed_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>method</name> <operator>==</operator> <name>ZIP_METHOD_STORE</name><operator>)</operator></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unsupported file mode: 0%o (SHA1: %s)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>creator_version</name> <operator>&gt;</operator> <name>max_creator_version</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_creator_version</name> <operator>=</operator> <name>creator_version</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>&amp;&amp;</operator> <name>method</name> <operator>==</operator> <name>ZIP_METHOD_DEFLATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>deflated</name> <operator>=</operator> <call><name>zlib_deflate_raw</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name><name>args</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name> <operator>||</operator> <name>compressed_size</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <name>ZIP_METHOD_STORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>extra</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x5455</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>extra</name><operator>.</operator><name>extra_size</name></name></expr></argument>, <argument><expr><name>ZIP_EXTRA_MTIME_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extra</name><operator>.</operator><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>extra</name><operator>.</operator><name>mtime</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal> <operator>||</operator> <name>compressed_size</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_zip64_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0x7fffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_zip64_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_zip64_extra</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>version_needed</name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x04034b50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>version_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>compression_method</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>mtime</name></name></expr></argument>, <argument><expr><name>zip_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>mdate</name></name></expr></argument>, <argument><expr><name>zip_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_zip64_extra</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_zip_header_data_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_extra_size</name> <operator>+=</operator> <name>ZIP64_EXTRA_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_zip_header_data_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>filename_length</name></name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>extra_length</name></name></expr></argument>, <argument><expr><name>header_extra_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>ZIP_LOCAL_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>ZIP_LOCAL_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>pathlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><name>ZIP_EXTRA_MTIME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>ZIP_EXTRA_MTIME_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_zip64_extra</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>extra64</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>extra64</name><operator>.</operator><name>extra_size</name></name></expr></argument>, <argument><expr><name>ZIP64_EXTRA_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>extra64</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>extra64</name><operator>.</operator><name>compressed_size</name></name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra64</name></expr></argument>, <argument><expr><name>ZIP64_EXTRA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>ZIP64_EXTRA_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name>method</name> <operator>==</operator> <name>ZIP_METHOD_STORE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>STREAM_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>readlen</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>readlen</name> <operator>=</operator> <call><name>read_istream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>readlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_binary</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_binary</name> <operator>=</operator> <call><name>entry_is_binary</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name>path_without_prefix</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>close_istream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>readlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>readlen</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compressed_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>compressed_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_zip_data_desc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name>method</name> <operator>==</operator> <name>ZIP_METHOD_DEFLATE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>STREAM_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>readlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_zstream</name></type> <name>zstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>out_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>compressed</name><index>[<expr><name>STREAM_BUFFER_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_deflate_init_raw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zstream</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>compressed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>readlen</name> <operator>=</operator> <call><name>read_istream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>readlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_binary</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_binary</name> <operator>=</operator> <call><name>entry_is_binary</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name>path_without_prefix</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>readlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>git_deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zstream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"deflate error (%d)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_len</name> <operator>=</operator> <name><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>-</operator> <name>compressed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_size</name> <operator>+=</operator> <name>out_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>compressed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>close_istream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>readlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>readlen</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>git_deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zstream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"deflate error (%d)"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>git_deflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_len</name> <operator>=</operator> <name><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>-</operator> <name>compressed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed_size</name> <operator>+=</operator> <name>out_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>compressed_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_zip_data_desc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>compressed_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zip_offset</name> <operator>+=</operator> <name>compressed_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>deflated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compressed_size</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal> <operator>||</operator>

<name>offset</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compressed_size</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zip64_dir_extra_payload_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zip64_dir_extra_payload_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zip64_dir_extra_payload_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zip_dir_extra_size</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>zip64_dir_extra_payload_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x02014b50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>creator_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>version_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zip_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zip_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>clamp32</name><argument_list>(<argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>clamp32</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zip_dir_extra_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>!</operator><name>is_binary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>clamp32</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><name>ZIP_EXTRA_MTIME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zip64_dir_extra_payload_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zip64_dir_extra_payload_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compressed_size</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zip_dir_entries</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_zip64_trailer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>zip64_dir_trailer</name></name></type> <name>trailer64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>zip64_dir_trailer_locator</name></name></type> <name>locator64</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x06064b50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>record_size</name></name></expr></argument>, <argument><expr><name>ZIP64_DIR_TRAILER_RECORD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>creator_version</name></name></expr></argument>, <argument><expr><name>max_creator_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>disk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>directory_start_disk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>entries_on_this_disk</name></name></expr></argument>, <argument><expr><name>zip_dir_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>entries</name></name></expr></argument>, <argument><expr><name>zip_dir_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>zip_dir</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>trailer64</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>zip_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>locator64</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x07064b50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>locator64</name><operator>.</operator><name>disk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le64</name><argument_list>(<argument><expr><name><name>locator64</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>zip_offset</name> <operator>+</operator> <name><name>zip_dir</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>locator64</name><operator>.</operator><name>number_of_disks</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailer64</name></expr></argument>, <argument><expr><name>ZIP64_DIR_TRAILER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>locator64</name></expr></argument>, <argument><expr><name>ZIP64_DIR_TRAILER_LOCATOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_zip_trailer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>zip_dir_trailer</name></name></type> <name>trailer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clamped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="number">0x06054b50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>disk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>directory_start_disk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16_clamp</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>entries_on_this_disk</name></name></expr></argument>, <argument><expr><name>zip_dir_entries</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>clamped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16_clamp</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>entries</name></name></expr></argument>, <argument><expr><name>zip_dir_entries</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clamped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>zip_dir</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le32_clamp</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>zip_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clamped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_le16</name><argument_list>(<argument><expr><name><name>trailer</name><operator>.</operator><name>comment_length</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>oid</name></expr> ?</condition><then> <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>zip_dir</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>zip_dir</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clamped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_zip64_trailer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailer</name></expr></argument>, <argument><expr><name>ZIP_DIR_TRAILER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dos_time</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dos_date</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dos_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>date_overflows</name><argument_list>(<argument><expr><operator>*</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"timestamp too large for this system: %"</literal><name>PRItime</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>*</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>*</operator><name>timestamp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dos_date</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>+</operator> <operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator>

<operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal> <operator>-</operator> <literal type="number">1980</literal><operator>)</operator> <operator>*</operator> <literal type="number">512</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dos_time</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>*</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>archive_zip_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>userdiff_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_zip_archive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>archiver</name></name> <modifier>*</modifier></type><name>ar</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>archiver_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>archive_zip_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dos_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zip_date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zip_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>write_archive_entries</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>write_zip_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_zip_trailer</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>commit_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>archiver</name></name></type> <name>zip_archiver</name> <init>= <expr><block>{

<expr><literal type="string">"zip"</literal></expr>,

<expr><name>write_zip_archive</name></expr>,

<expr><name>ARCHIVER_WANT_COMPRESSION_LEVELS</name><operator>|</operator><name>ARCHIVER_REMOTE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init_zip_archiver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>register_archiver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zip_archiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
