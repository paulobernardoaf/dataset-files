<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\varint.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varint.h"</cpp:file></cpp:include>

<function><type><name>uintmax_t</name></type> <name>decode_varint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>*</operator><name>bufp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>buf</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>val</name> <init>= <expr><name>c</name> <operator>&amp;</operator> <literal type="number">127</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <call><name>MSB</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>encode_varint</name><parameter_list>(<parameter><decl><type><name>uintmax_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>varint</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pos</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>varint</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>varint</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>varint</name><index>[<expr><operator>--</operator><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>|</operator> <operator>(</operator><operator>--</operator><name>value</name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>varint</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>varint</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>varint</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>pos</name></expr>;</return>

</block_content>}</block></function>

</unit>
