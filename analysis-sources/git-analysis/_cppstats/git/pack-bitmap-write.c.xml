<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\pack-bitmap-write.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-revindex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-bitmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-lookup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-objects.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-reach.h"</cpp:file></cpp:include>

<struct>struct <name>bitmapped_commit</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>write_as</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xor_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>commit_pos</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>bitmap_writer</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>commits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>trees</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>blobs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kh_oid_map_t</name> <modifier>*</modifier></type><name>bitmaps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kh_oid_map_t</name> <modifier>*</modifier></type><name>reused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>to_pack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmapped_commit</name></name> <modifier>*</modifier></type><name>selected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>selected_nr</name></decl>, <decl><type ref="prev"/><name>selected_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pack_checksum</name><index>[<expr><name>GIT_MAX_RAWSZ</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>bitmap_writer</name></name></type> <name>writer</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>bitmap_writer_show_progress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>show</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>show_progress</name></name> <operator>=</operator> <name>show</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_writer_build_type_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>to_pack</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>commits</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>trees</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>blobs</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <call><name>ewah_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>to_pack</name><operator>-&gt;</operator><name>in_pack_pos</name></name></expr></argument>, <argument><expr><name><name>to_pack</name><operator>-&gt;</operator><name>nr_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>index_nr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator>struct <name>object_entry</name> <operator>*</operator><operator>)</operator><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>real_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oe_set_in_pack_pos</name><argument_list>(<argument><expr><name>to_pack</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>oe_type</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OBJ_COMMIT</name></expr>:</case>

<case>case <expr><name>OBJ_TREE</name></expr>:</case>

<case>case <expr><name>OBJ_BLOB</name></expr>:</case>

<case>case <expr><name>OBJ_TAG</name></expr>:</case>

<expr_stmt><expr><name>real_type</name> <operator>=</operator> <call><name>oe_type</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>real_type</name> <operator>=</operator> <call><name>oid_object_info</name><argument_list>(<argument><expr><name><name>to_pack</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>real_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OBJ_COMMIT</name></expr>:</case>

<expr_stmt><expr><call><name>ewah_set</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>commits</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OBJ_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>ewah_set</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>trees</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OBJ_BLOB</name></expr>:</case>

<expr_stmt><expr><call><name>ewah_set</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>blobs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OBJ_TAG</name></expr>:</case>

<expr_stmt><expr><call><name>ewah_set</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Missing type information for %s (%d/%d)"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>real_type</name></expr></argument>,

<argument><expr><call><name>oe_type</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>object</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>seen_objects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>seen_objects_nr</name></decl>, <decl><type ref="prev"/><name>seen_objects_alloc</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>push_bitmapped_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>reused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name> <operator>&gt;=</operator> <name><name>writer</name><operator>.</operator><name>selected_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>selected_alloc</name></name> <operator>=</operator> <operator>(</operator><name><name>writer</name><operator>.</operator><name>selected_alloc</name></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>selected</name></name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>selected_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name></expr>]</index></name><operator>.</operator><name>commit</name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name></expr>]</index></name><operator>.</operator><name>bitmap</name> <operator>=</operator> <name>reused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mark_as_seen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>seen_objects</name></expr></argument>, <argument><expr><name>seen_objects_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>seen_objects_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seen_objects</name><index>[<expr><name>seen_objects_nr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_all_seen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seen_objects_nr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>seen_objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SEEN</name> <operator>|</operator> <name>ADDED</name> <operator>|</operator> <name>SHOWN</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>seen_objects_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>find_object_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>packlist_find</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>to_pack</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Failed to write bitmap index. Packfile doesn't have full closure "</literal>

<literal type="string">"(object %s is missing)"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>oe_in_pack_pos</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>to_pack</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>find_object_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_as_seen</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mark_as_seen</name><argument_list>(<argument><expr><operator>(</operator>struct <name>object</name> <operator>*</operator><operator>)</operator><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>add_to_include_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>khiter_t</name></type> <name>hash_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitmap_pos</name> <init>= <expr><call><name>find_object_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash_pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_pos</name> <operator>&lt;</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>bitmaps</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmapped_commit</name></name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>hash_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bitmap_or_ewah</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>bc</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>bitmap_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>should_include</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_to_include_set</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mark_as_seen</name><argument_list>(<argument><expr><operator>(</operator>struct <name>object</name> <operator>*</operator><operator>)</operator><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_as_seen</name><argument_list>(<argument><expr><operator>(</operator>struct <name>object</name> <operator>*</operator><operator>)</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_xor_offsets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MAX_XOR_OFFSET_SEARCH</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>next</name> <operator>&lt;</operator> <name><name>writer</name><operator>.</operator><name>selected_nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmapped_commit</name></name> <modifier>*</modifier></type><name>stored</name> <init>= <expr><operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>best_bitmap</name> <init>= <expr><name><name>stored</name><operator>-&gt;</operator><name>bitmap</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>test_xor</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_XOR_OFFSET_SEARCH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><name>next</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>test_xor</name> <operator>=</operator> <call><name>ewah_pool_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ewah_xor</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name>curr</name></expr>]</index></name><operator>.</operator><name>bitmap</name></expr></argument>, <argument><expr><name><name>stored</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>test_xor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test_xor</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&lt;</operator> <name><name>best_bitmap</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>best_bitmap</name> <operator>!=</operator> <name><name>stored</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name>best_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>best_bitmap</name> <operator>=</operator> <name>test_xor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_offset</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ewah_pool_free</name><argument_list>(<argument><expr><name>test_xor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>xor_offset</name></name> <operator>=</operator> <name>best_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>write_as</name></name> <operator>=</operator> <name>best_bitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_writer_build</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>to_pack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>REUSE_BITMAP_THRESHOLD</name> <init>= <expr><literal type="number">0.2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>reuse_after</name></decl>, <decl><type ref="prev"/><name>need_reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>bitmap_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>revs</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>bitmaps</name></name> <operator>=</operator> <call><name>kh_init_oid_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>to_pack</name></name> <operator>=</operator> <name>to_pack</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>writer</name><operator>.</operator><name>show_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <call><name>start_progress</name><argument_list>(<argument><expr><literal type="string">"Building bitmaps"</literal></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name><name>to_pack</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>tag_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>tree_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>blob_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>no_walk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>include_check</name></name> <operator>=</operator> <name>should_include</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_revision_walk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reuse_after</name> <operator>=</operator> <name><name>writer</name><operator>.</operator><name>selected_nr</name></name> <operator>*</operator> <name>REUSE_BITMAP_THRESHOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_reset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>writer</name><operator>.</operator><name>selected_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmapped_commit</name></name> <modifier>*</modifier></type><name>stored</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>khiter_t</name></type> <name>hash_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hash_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stored</name> <operator>=</operator> <operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <operator>(</operator>struct <name>object</name> <operator>*</operator><operator>)</operator><name><name>stored</name><operator>-&gt;</operator><name>commit</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stored</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>writer</name><operator>.</operator><name>selected_nr</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>need_reset</name> <operator>||</operator>

<operator>!</operator><call><name>in_merge_bases</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>commit</name></expr></argument>,

<argument><expr><name><name>stored</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bitmap_reset</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_all_seen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>include_check_data</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prepare_revision_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"revision walk setup failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>traverse_commit_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>show_commit</name></expr></argument>, <argument><expr><name>show_object</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>object_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>revs</name><operator>.</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>bitmap_to_ewah</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_reset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>need_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>reuse_after</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stored</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>BITMAP_FLAG_REUSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash_pos</name> <operator>=</operator> <call><name>kh_put_oid_map</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Duplicate entry when writing index: %s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>bitmaps</name></name></expr></argument>, <argument><expr><name>hash_pos</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>stored</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>progress</name></name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bitmap_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_xor_offsets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>next_commit_index</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MIN_COMMITS</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_COMMITS</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MUST_REGION</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MIN_REGION</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;=</operator> <name>MUST_REGION</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;=</operator> <name>MIN_REGION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>MUST_REGION</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&lt;</operator> <name>MIN_COMMITS</name><operator>)</operator></expr> ?</condition><then> <expr><name>offset</name></expr> </then><else>: <expr><name>MIN_COMMITS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>MIN_REGION</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&lt;</operator> <name>MAX_COMMITS</name><operator>)</operator></expr> ?</condition><then> <expr><name>offset</name></expr> </then><else>: <expr><name>MAX_COMMITS</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>next</name> <operator>&gt;</operator> <name>MIN_COMMITS</name><operator>)</operator></expr> ?</condition><then> <expr><name>next</name></expr> </then><else>: <expr><name>MIN_COMMITS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>date_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>date</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_writer_reuse_bitmaps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packing_data</name></name> <modifier>*</modifier></type><name>to_pack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_index</name></name> <modifier>*</modifier></type><name>bitmap_git</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bitmap_git</name> <operator>=</operator> <call><name>prepare_bitmap_git</name><argument_list>(<argument><expr><name><name>to_pack</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>reused</name></name> <operator>=</operator> <call><name>kh_init_oid_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rebuild_existing_bitmaps</name><argument_list>(<argument><expr><name>bitmap_git</name></expr></argument>, <argument><expr><name>to_pack</name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>reused</name></name></expr></argument>,

<argument><expr><name><name>writer</name><operator>.</operator><name>show_progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>find_reused_bitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>khiter_t</name></type> <name>hash_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>writer</name><operator>.</operator><name>reused</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash_pos</name> <operator>=</operator> <call><name>kh_get_oid_map</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>reused</name></name></expr></argument>, <argument><expr><operator>*</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_pos</name> <operator>&gt;=</operator> <call><name>kh_end</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>reused</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>kh_value</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>reused</name></name></expr></argument>, <argument><expr><name>hash_pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_writer_select_commits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>indexed_commits</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>indexed_commits_nr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_bitmaps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>indexed_commits</name></expr></argument>, <argument><expr><name>indexed_commits_nr</name></expr></argument>, <argument><expr><name>date_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>writer</name><operator>.</operator><name>show_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <call><name>start_progress</name><argument_list>(<argument><expr><literal type="string">"Selecting bitmap commits"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>indexed_commits_nr</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indexed_commits_nr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>push_bitmapped_commit</name><argument_list>(<argument><expr><name><name>indexed_commits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>reused_bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>chosen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>next_commit_index</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>next</name> <operator>&gt;=</operator> <name>indexed_commits_nr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_bitmaps</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>writer</name><operator>.</operator><name>selected_nr</name></name> <operator>&gt;=</operator> <name>max_bitmaps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name> <operator>=</operator> <name>max_bitmaps</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name><name>indexed_commits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reused_bitmap</name> <operator>=</operator> <call><name>find_reused_bitmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chosen</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name><name>indexed_commits</name><index>[<expr><name>i</name> <operator>+</operator> <name>next</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>next</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name><name>indexed_commits</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reused_bitmap</name> <operator>=</operator> <call><name>find_reused_bitmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cm</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reused_bitmap</name> <operator>||</operator> <operator>(</operator><name><name>cm</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>NEEDS_BITMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>parents</name></name> <operator>&amp;&amp;</operator> <name><name>cm</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>push_bitmapped_commit</name><argument_list>(<argument><expr><name>chosen</name></expr></argument>, <argument><expr><name>reused_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>next</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hashwrite_ewah_helper</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dump_bitmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ewah_serialize_to</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>hashwrite_ewah_helper</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Failed to write bitmap index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1_access</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>index</name> <init>= <expr><name>table</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>index</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name><name>oid</name><operator>.</operator><name>hash</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_selected_commits_v1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>writer</name><operator>.</operator><name>selected_nr</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmapped_commit</name></name> <modifier>*</modifier></type><name>stored</name> <init>= <expr><operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>commit_pos</name> <init>=

<expr><call><name>sha1_pos</name><argument_list>(<argument><expr><name><name>stored</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index_nr</name></expr></argument>, <argument><expr><name>sha1_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>commit_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"trying to write commit not in index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashwrite_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>commit_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite_u8</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>stored</name><operator>-&gt;</operator><name>xor_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite_u8</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>stored</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_bitmap</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>stored</name><operator>-&gt;</operator><name>write_as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_hash_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>index_nr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator>struct <name>object_entry</name> <operator>*</operator><operator>)</operator><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hash_value</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_writer_set_checksum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>pack_checksum</name></name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>bitmap_writer_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pack_idx_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>index_nr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>default_version</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>flags</name> <init>= <expr><name>BITMAP_OPT_FULL_DAG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tmp_file</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmap_disk_header</name></name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>odb_mkstemp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_file</name></expr></argument>, <argument><expr><literal type="string">"pack/tmp_bitmap_XXXXXX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>hashfd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>tmp_file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>BITMAP_IDX_SIGNATURE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITMAP_IDX_SIGNATURE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>default_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>.</operator><name>options</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>.</operator><name>entry_count</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>selected_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>checksum</name></name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>pack_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>GIT_MAX_RAWSZ</name> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_bitmap</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_bitmap</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>trees</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_bitmap</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>blobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_bitmap</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_selected_commits_v1</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>BITMAP_OPT_HASH_CACHE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_hash_cache</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>index_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>finalize_hashfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CSUM_HASH_IN_STREAM</name> <operator>|</operator> <name>CSUM_FSYNC</name> <operator>|</operator> <name>CSUM_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>adjust_shared_perm</name><argument_list>(<argument><expr><name><name>tmp_file</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"unable to make temporary bitmap file readable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name><name>tmp_file</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"unable to rename temporary bitmap file to '%s'"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
