<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\help.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"levenshtein.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"help.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command-list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"column.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<struct>struct <name>category_description</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>category</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>common_mask</name> <init>=

<expr><name>CAT_init</name> <operator>|</operator> <name>CAT_worktree</name> <operator>|</operator> <name>CAT_info</name> <operator>|</operator>

<name>CAT_history</name> <operator>|</operator> <name>CAT_remote</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>category_description</name></name></type> <name><name>common_categories</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>CAT_init</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"start a working area (see also: git help tutorial)"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_worktree</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"work on the current change (see also: git help everyday)"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_info</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"examine the history and state (see also: git help revisions)"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_history</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"grow, mark and tweak your common history"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_remote</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"collaborate (see also: git help workflows)"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>category_description</name></name></type> <name><name>main_categories</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>CAT_mainporcelain</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Main Porcelain Commands"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_ancillarymanipulators</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Ancillary Commands / Manipulators"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_ancillaryinterrogators</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Ancillary Commands / Interrogators"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_foreignscminterface</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Interacting with Others"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_plumbingmanipulators</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Low-level Commands / Manipulators"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_plumbinginterrogators</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Low-level Commands / Interrogators"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_synchingrepositories</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Low-level Commands / Syncing Repositories"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>CAT_purehelpers</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Low-level Commands / Internal Helpers"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>drop_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>category</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"git-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>new_name</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>category</name> <operator>==</operator> <name>CAT_guide</name> <operator>&amp;&amp;</operator> <call><name>skip_prefix</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"git"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>new_name</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_cmds</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p_cmds</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>cmds</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>command_list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"empty command_list[] is a sign of broken generate-cmdlist.sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>command_list</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>command_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>command_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>category</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmds</name><index>[<expr><name>nr</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmds</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>drop_prefix</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>category</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cmds</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_cmds</name> <operator>=</operator> <name>cmds</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_command_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>longest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>category</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>longest</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mput_char</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>longest</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>help</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_name_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>e1</name> <init>= <expr><name>elem1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>e2</name> <init>= <expr><name>elem2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_cmd_by_category</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>category_description</name></name> <modifier>*</modifier></type><name>catdesc</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>longest_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>cmds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>catdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>catdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>category</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>extract_cmds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmds</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>nr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>longest</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>longest</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><name>cmd_name_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>catdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><name><name>catdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>category</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>catdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_command_list</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>longest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>longest_p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>longest_p</name> <operator>=</operator> <name>longest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_cmdname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FLEX_ALLOC_MEM</name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_cmdnames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmdname_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>cmdname</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>cmdname</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b_</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uniq</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>exclude_cmds</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>excludes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ci</name></decl>, <decl><type ref="prev"/><name>cj</name></decl>, <decl><type ref="prev"/><name>ei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <name>cj</name> <operator>=</operator> <name>ei</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ci</name> <operator>&lt;</operator> <name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&amp;&amp;</operator> <name>ei</name> <operator>&lt;</operator> <name><name>excludes</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ci</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>excludes</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ei</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>cj</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ei</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ei</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>ci</name> <operator>&lt;</operator> <name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>cj</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name>cj</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pretty_print_cmdnames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>colopts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>column_options</name></name></type> <name>copts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>colopts</name> <operator>=</operator> <operator>(</operator><name>colopts</name> <operator>&amp;</operator> <operator>~</operator><name>COL_ENABLE_MASK</name><operator>)</operator> <operator>|</operator> <name>COL_ENABLED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>copts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>copts</name><operator>.</operator><name>indent</name></name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>copts</name><operator>.</operator><name>padding</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_columns</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>colopts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_commands_in_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>opendir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"git-"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>entlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_executable</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strip_suffix</name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><literal type="string">".exe"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_cmdname</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>entlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_command_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>main_cmds</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>other_cmds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env_path</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exec_path</name> <init>= <expr><call><name>git_exec_path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exec_path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>list_commands_in_dir</name><argument_list>(<argument><expr><name>main_cmds</name></expr></argument>, <argument><expr><name>exec_path</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>main_cmds</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name><name>main_cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>cmdname_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uniq</name><argument_list>(<argument><expr><name>main_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>env_path</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>paths</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>colon</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>paths</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>env_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colon</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>PATH_SEP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>colon</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exec_path</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>exec_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_commands_in_dir</name><argument_list>(<argument><expr><name>other_cmds</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>colon</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>other_cmds</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name><name>other_cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>cmdname_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uniq</name><argument_list>(<argument><expr><name>other_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exclude_cmds</name><argument_list>(<argument><expr><name>other_cmds</name></expr></argument>, <argument><expr><name>main_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_commands</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>colopts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>main_cmds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>other_cmds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>main_cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exec_path</name> <init>= <expr><call><name>git_exec_path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"available git commands in '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exec_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretty_print_cmdnames</name><argument_list>(<argument><expr><name>main_cmds</name></expr></argument>, <argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>other_cmds</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git commands available from elsewhere on your $PATH"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretty_print_cmdnames</name><argument_list>(<argument><expr><name>other_cmds</name></expr></argument>, <argument><expr><name>colopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_common_cmds_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"These are common Git commands used in various situations:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_cmd_by_category</name><argument_list>(<argument><expr><name>common_categories</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_all_main_cmds</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdnames</name></name></type> <name>main_cmds</name></decl>, <decl><type ref="prev"/><name>other_cmds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>main_cmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>other_cmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_command_list</name><argument_list>(<argument><expr><literal type="string">"git-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>main_cmds</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>clean_cmdnames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clean_cmdnames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_all_other_cmds</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdnames</name></name></type> <name>main_cmds</name></decl>, <decl><type ref="prev"/><name>other_cmds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>main_cmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>other_cmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_command_list</name><argument_list>(<argument><expr><literal type="string">"git-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>other_cmds</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>other_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>clean_cmdnames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clean_cmdnames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_cmds_by_category</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>command_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cat_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>category_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cat</name></expr></argument>, <argument><expr><name><name>category_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cat_id</name> <operator>=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cat_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unsupported command listing type '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>command_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>category</name></name> <operator>&amp;</operator> <name>cat_id</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>drop_prefix</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>category</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_cmds_by_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_get_string_const</name><argument_list>(<argument><expr><literal type="string">"completion.commands"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd_list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_remove_duplicates</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cmd_list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchrnul</name><argument_list>(<argument><expr><name>cmd_list</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>cmd_list</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>cmd_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_remove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_insert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>cmd_list</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_common_guides_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>category_description</name></name></type> <name><name>catdesc</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>CAT_guide</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"The common Git guides are:"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_cmd_by_category</name><argument_list>(<argument><expr><name>catdesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>slot_expansion</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>void</name></type> <name>list_config_help</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>for_human</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>slot_expansion</name></name></type> <name><name>slot_expansions</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"advice"</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><name>list_config_advices</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color.branch"</literal></expr>, <expr><literal type="string">"&lt;slot&gt;"</literal></expr>, <expr><name>list_config_color_branch_slots</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color.decorate"</literal></expr>, <expr><literal type="string">"&lt;slot&gt;"</literal></expr>, <expr><name>list_config_color_decorate_slots</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color.diff"</literal></expr>, <expr><literal type="string">"&lt;slot&gt;"</literal></expr>, <expr><name>list_config_color_diff_slots</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color.grep"</literal></expr>, <expr><literal type="string">"&lt;slot&gt;"</literal></expr>, <expr><name>list_config_color_grep_slots</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color.interactive"</literal></expr>, <expr><literal type="string">"&lt;slot&gt;"</literal></expr>, <expr><name>list_config_color_interactive_slots</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color.remote"</literal></expr>, <expr><literal type="string">"&lt;slot&gt;"</literal></expr>, <expr><name>list_config_color_sideband_slots</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color.status"</literal></expr>, <expr><literal type="string">"&lt;slot&gt;"</literal></expr>, <expr><name>list_config_color_status_slots</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fsck"</literal></expr>, <expr><literal type="string">"&lt;msg-id&gt;"</literal></expr>, <expr><name>list_config_fsck_msg_ids</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"receive.fsck"</literal></expr>, <expr><literal type="string">"&lt;msg-id&gt;"</literal></expr>, <expr><name>list_config_fsck_msg_ids</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>slot_expansion</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>keys</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>config_name_list</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>slot_expansions</name></expr>;</init> <condition><expr><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>found</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>slot_expansions</name></expr>;</init> <condition><expr><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>found</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"slot_expansion %s.%s is not used"</literal></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>placeholder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>keys</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>keys</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wildcard</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cut</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>for_human</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wildcard</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wildcard</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wildcard</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cut</name> <operator>=</operator> <name>wildcard</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>wildcard</name> <operator>&amp;&amp;</operator> <name>tag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cut</name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cut</name> <operator>=</operator> <ternary><condition><expr><name>wildcard</name> <operator>&lt;</operator> <name>tag</name></expr> ?</condition><then> <expr><name>wildcard</name></expr> </then><else>: <expr><name>tag</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cut</name> <operator>-</operator> <name>var</name><operator>)</operator></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"alias."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>util</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_all_cmds_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>others</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>alias_list</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>aliases</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>longest</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"See 'git help &lt;command&gt;' to read about a specific subcommand"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_cmd_by_category</name><argument_list>(<argument><expr><name>main_categories</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>longest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_all_other_cmds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>others</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>others</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"External commands"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>others</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>others</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>others</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>get_alias</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alias_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alias_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>alias_list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alias_list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>longest</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>longest</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>alias_list</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Command aliases"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>, <argument><expr><name><name>alias_list</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>alias_list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>alias_list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>help</name> <operator>=</operator> <name><name>alias_list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>category</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>aliases</name><index>[<expr><name><name>alias_list</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_command_list</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>longest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alias_list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_in_cmdlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>autocorrect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>cmdnames</name></name></type> <name>aliases</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_unknown_cmd_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"help.autocorrect"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>autocorrect</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"alias."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_cmdname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aliases</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>levenshtein_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cmdname</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>c1</name> <init>= <expr><name>p1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <modifier>*</modifier><name>c2</name> <init>= <expr><name>p2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>c1</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>c2</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>c1</name><operator>)</operator><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l2</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>c2</name><operator>)</operator><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr> ?</condition><then> <expr><name>l1</name> <operator>-</operator> <name>l2</name></expr> </then><else>: <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_cmd_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cmdnames</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name> <operator>+</operator> <name><name>old</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>, <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>old</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>names</name><index>[<expr><name><name>cmds</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMILARITY_FLOOR</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMILAR_ENOUGH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; SIMILARITY_FLOOR)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>bad_interpreter_advice</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"'%s' appears to be a git command, but we were not\n"</literal>

<literal type="string">"able to execute it. Maybe git-%s is broken?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help_unknown_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>best_similarity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdnames</name></name></type> <name>main_cmds</name></decl>, <decl><type ref="prev"/><name>other_cmds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmdname_help</name></name> <modifier>*</modifier></type><name>common_cmds</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>main_cmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>other_cmds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aliases</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_early_config</name><argument_list>(<argument><expr><name>git_unknown_cmd_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_command_list</name><argument_list>(<argument><expr><literal type="string">"git-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_cmd_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_cmd_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>main_cmds</name><operator>.</operator><name>names</name></name></expr></argument>, <argument><expr><name><name>main_cmds</name><operator>.</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>cmdname_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uniq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extract_cmds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>common_cmds</name></expr></argument>, <argument><expr><name>common_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>main_cmds</name><operator>.</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>candidate</name> <init>= <expr><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>bad_interpreter_advice</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>common_cmds</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>common_cmds</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>common_cmds</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>len</name> <operator>=</operator>

<call><name>levenshtein</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>common_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>main_cmds</name><operator>.</operator><name>names</name></name></expr></argument>, <argument><expr><name><name>main_cmds</name><operator>.</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>levenshtein_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>main_cmds</name><operator>.</operator><name>cnt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Uh oh. Your system reports no Git commands at all."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>main_cmds</name><operator>.</operator><name>cnt</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for> 

<if_stmt><if>if <condition>(<expr><name><name>main_cmds</name><operator>.</operator><name>cnt</name></name> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_similarity</name> <operator>=</operator> <name>SIMILARITY_FLOOR</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>best_similarity</name> <operator>=</operator> <name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name><operator>-&gt;</operator><name>len</name></expr>;</init>

<condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name><name>main_cmds</name><operator>.</operator><name>cnt</name></name> <operator>&amp;&amp;</operator>

<name>best_similarity</name> <operator>==</operator> <name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>len</name><operator>)</operator></expr>;</condition>

<incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>autocorrect</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SIMILAR_ENOUGH</name><argument_list>(<argument><expr><name>best_similarity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>assumed</name> <init>= <expr><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clean_cmdnames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WARNING: You called a Git command named '%s', "</literal>

<literal type="string">"which does not exist."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>autocorrect</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Continuing under the assumption that "</literal>

<literal type="string">"you meant '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>assumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Continuing in %0.1f seconds, "</literal>

<literal type="string">"assuming that you meant '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>autocorrect</name><operator>/</operator><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>assumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep_millisec</name><argument_list>(<argument><expr><name>autocorrect</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>assumed</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git: '%s' is not a git command. See 'git --help'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SIMILAR_ENOUGH</name><argument_list>(<argument><expr><name>best_similarity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"\nThe most similar command is"</literal></expr></argument>,

<argument><expr><literal type="string">"\nThe most similar commands are"</literal></expr></argument>,

<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name><name>main_cmds</name><operator>.</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_version</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>build_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git version [&lt;options&gt;]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"build-options"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>build_options</name></expr></argument>,

<argument><expr><literal type="string">"also print build options"</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"git version %s\n"</literal></expr></argument>, <argument><expr><name>git_version_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>build_options</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"cpu: %s\n"</literal></expr></argument>, <argument><expr><name>GIT_HOST_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>git_built_from_commit_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"built from commit: %s\n"</literal></expr></argument>,

<argument><expr><name>git_built_from_commit_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"no commit associated with this build\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sizeof-long: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sizeof-size_t: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>similar_ref_cb</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>similar_refs</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>append_similar_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>similar_ref_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><operator>(</operator>struct <name>similar_ref_cb</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>cb_data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>branch</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="string">"refs/remotes/"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>base_ref</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append_nodup</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>similar_refs</name></name></expr></argument>,

<argument><expr><call><name>shorten_unambiguous_ref</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>guess_refs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>similar_ref_cb</name></name></type> <name>ref_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>similar_refs</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ref_cb</name><operator>.</operator><name>base_ref</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cb</name><operator>.</operator><name>similar_refs</name></name> <operator>=</operator> <operator>&amp;</operator><name>similar_refs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>append_similar_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>similar_refs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>NORETURN</name> <name>void</name></type> <name>help_unknown_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>suggested_refs</name> <init>= <expr><call><name>guess_refs</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: %s - %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>suggested_refs</name><operator>.</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"\nDid you mean this?"</literal></expr></argument>,

<argument><expr><literal type="string">"\nDid you mean one of these?"</literal></expr></argument>,

<argument><expr><name><name>suggested_refs</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>suggested_refs</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name><name>suggested_refs</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>suggested_refs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
