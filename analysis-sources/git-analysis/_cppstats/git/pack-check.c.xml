<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\pack-check.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-revindex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<struct>struct <name>idx_entry</name> <block>{

<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nr</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_entries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idx_entry</name></name> <modifier>*</modifier></type><name>entry1</name> <init>= <expr><name>e1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>idx_entry</name></name> <modifier>*</modifier></type><name>entry2</name> <init>= <expr><name>e2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry1</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>entry2</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry1</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>entry2</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_pack_crc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pack_window</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>w_curs</name></decl></parameter>,

<parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>index_crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_crc</name> <init>= <expr><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>use_pack</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w_curs</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>avail</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data_crc</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name>data_crc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>avail</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>avail</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>

<expr_stmt><expr><name>index_crc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>index_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index_crc</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>*</operator> <operator>(</operator><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>nr</name></expr>;</expr_stmt>

<return>return <expr><name>data_crc</name> <operator>!=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><name>index_crc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_packfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pack_window</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>w_curs</name></decl></parameter>,

<parameter><decl><type><name>verify_fn</name></type> <name>fn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>base_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>off_t</name></type> <name>index_size</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>index_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>index_base</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>index_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_hash_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>GIT_MAX_RAWSZ</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pack_sig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pack_sig_ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nr_objects</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>idx_entry</name></name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_pack_valid</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"packfile %s cannot be accessed"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>remaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>use_pack</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w_curs</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>remaining</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pack_sig_ofs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pack_sig_ofs</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pack_size</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>pack_sig_ofs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>-</operator> <name>pack_sig_ofs</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>pack_sig_ofs</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pack_sig</name> <operator>=</operator> <call><name>use_pack</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w_curs</name></expr></argument>, <argument><expr><name>pack_sig_ofs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasheq</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pack_sig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s pack checksum mismatch"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasheq</name><argument_list>(<argument><expr><name>index_base</name> <operator>+</operator> <name>index_size</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>, <argument><expr><name>pack_sig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s pack checksum does not match its index"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unuse_pack</name><argument_list>(<argument><expr><name>w_curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr_objects</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>num_objects</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>nr_objects</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entries</name><index>[<expr><name>nr_objects</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>pack_sig_ofs</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_objects</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>nth_packed_object_offset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>nr_objects</name></expr></argument>, <argument><expr><name>compare_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_objects</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>curpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_valid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nth_packed_object_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unable to get oid of object %lu from %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name> <init>= <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>len</name> <init>= <expr><name><name>entries</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nr</name> <init>= <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_pack_crc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w_curs</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"index CRC mismatch for object %s "</literal>

<literal type="string">"from %s at offset %"</literal><name>PRIuMAX</name><literal type="string">""</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>unpack_object_header</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w_curs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unuse_pack</name><argument_list>(<argument><expr><name>w_curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBJ_BLOB</name> <operator>&amp;&amp;</operator> <name>big_file_threshold</name> <operator>&lt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>unpack_entry</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data_valid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot unpack %s from %s at offset %"</literal><name>PRIuMAX</name><literal type="string">""</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>check_object_signature</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"packed %s from %s is corrupt"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eaten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>fn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eaten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eaten</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>base_count</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1023</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>base_count</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>base_count</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>verify_pack_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>off_t</name></type> <name>index_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>index_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_hash_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>GIT_MAX_RAWSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>open_pack_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"packfile %s index not opened"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index_size</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>index_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index_base</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>index_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>index_base</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>index_size</name> <operator>-</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasheq</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>index_base</name> <operator>+</operator> <name>index_size</name> <operator>-</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"Packfile index for %s hash mismatch"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>verify_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>verify_fn</name></type> <name>fn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>base_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pack_window</name></name> <modifier>*</modifier></type><name>w_curs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>verify_pack_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>index_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>verify_packfile</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_curs</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>base_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unuse_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w_curs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

</unit>
