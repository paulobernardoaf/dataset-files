<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\xdiff-interface.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff/xtypes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff/xdiffi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff/xemit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff/xmacros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff/xutils.h"</cpp:file></cpp:include>

<struct>struct <name>xdiff_emit_state</name> <block>{

<decl_stmt><decl><type><name>xdiff_emit_hunk_fn</name></type> <name>hunk_fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdiff_emit_line_fn</name></type> <name>line_fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>consume_callback_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>remainder</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdiff_out_hunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>old_begin</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>old_nr</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>new_begin</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>new_nr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>xdiff_emit_state</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name>priv_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>remainder</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"xdiff emitted hunk in the middle of a line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>hunk_fn</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>consume_callback_data</name></name></expr></argument>,

<argument><expr><name>old_begin</name></expr></argument>, <argument><expr><name>old_nr</name></expr></argument>, <argument><expr><name>new_begin</name></expr></argument>, <argument><expr><name>new_nr</name></expr></argument>,

<argument><expr><name>func</name></expr></argument>, <argument><expr><name>funclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>consume_one</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>xdiff_emit_state</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name>priv_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>this_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>this_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ep</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><operator>(</operator><name>ep</name> <operator>-</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>line_fn</name></name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>consume_callback_data</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>this_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>this_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>this_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdiff_outf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_</name></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbuf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>xdiff_emit_state</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name>priv_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>line_fn</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbuf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ptr</name><index>[<expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>remainder</name></name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>remainder</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>consume_one</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>remainder</name></name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>consume_one</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>remainder</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>remainder</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>remainder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>remainder</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>consume_one</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>remainder</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>remainder</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>remainder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trim_common_tail</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>blk</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>trimmed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>recovered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>smaller</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blk</name> <operator>+</operator> <name>trimmed</name> <operator>&lt;=</operator> <name>smaller</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ap</name> <operator>-</operator> <name>blk</name></expr></argument>, <argument><expr><name>bp</name> <operator>-</operator> <name>blk</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>trimmed</name> <operator>+=</operator> <name>blk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ap</name> <operator>-=</operator> <name>blk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>-=</operator> <name>blk</name></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>recovered</name> <operator>&lt;</operator> <name>trimmed</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><index>[<expr><name>recovered</name><operator>++</operator></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>trimmed</name> <operator>-</operator> <name>recovered</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>trimmed</name> <operator>-</operator> <name>recovered</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdi_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>xecb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>a</name> <init>= <expr><operator>*</operator><name>mf1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>mf2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf1</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_XDIFF_SIZE</name> <operator>||</operator> <name><name>mf2</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_XDIFF_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>xecfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XDL_EMIT_FUNCCONTEXT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trim_common_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>xdl_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>xecb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>discard_hunk_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>ob</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdi_diff_outf</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>,

<parameter><decl><type><name>xdiff_emit_hunk_fn</name></type> <name>hunk_fn</name></decl></parameter>,

<parameter><decl><type><name>xdiff_emit_line_fn</name></type> <name>line_fn</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>consume_callback_data</name></decl></parameter>,

<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>, <parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>xdiff_emit_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitcb_t</name></type> <name>ecb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>hunk_fn</name></name> <operator>=</operator> <name>hunk_fn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>line_fn</name></name> <operator>=</operator> <name>line_fn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>consume_callback_data</name></name> <operator>=</operator> <name>consume_callback_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ecb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hunk_fn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ecb</name><operator>.</operator><name>out_hunk</name></name> <operator>=</operator> <name>xdiff_out_hunk</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ecb</name><operator>.</operator><name>out_line</name></name> <operator>=</operator> <name>xdiff_outf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecb</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <operator>&amp;</operator><name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>remainder</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xdi_diff</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>remainder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_mmfile</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"Could not stat %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"Could not open %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>xsize_t</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>sz</name></expr> ?</condition><then> <expr><name>sz</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&amp;&amp;</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Could not read %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>read_mmblob</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read blob object %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_FEW_BYTES</name></cpp:macro> <cpp:value>8000</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>buffer_is_binary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>FIRST_FEW_BYTES</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>FIRST_FEW_BYTES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>memchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>ff_regs</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<struct>struct <name>ff_reg</name> <block>{

<decl_stmt><decl><type><name>regex_t</name></type> <name>re</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>negate</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>array</name></decl>;</struct>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>long</name></type> <name>ff_regexp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>buffer_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_regs</name></name> <modifier>*</modifier></type><name>regs</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>regs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_reg</name></name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><name><name>regs</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>regexec_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reg</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>negate</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>regs</name><operator>-&gt;</operator><name>nr</name></name> <operator>&lt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name><name>pmatch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>-</operator> <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <name>buffer_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>buffer_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>result</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>xdiff_set_find_func</name><parameter_list>(<parameter><decl><type><name>xdemitconf_t</name> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_regs</name></name> <modifier>*</modifier></type><name>regs</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func</name></name> <operator>=</operator> <name>ff_regexp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>regs</name> <operator>=</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>find_func_priv</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ff_regs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>regs</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regs</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>regs</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>regs</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>regs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_reg</name></name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><name><name>regs</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>expression</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"mismatch between line count and parsing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>-&gt;</operator><name>negate</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'!'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>-&gt;</operator><name>negate</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name><name>regs</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Last expression must not be negated: %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expression</name> <operator>=</operator> <name>buffer</name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>expression</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reg</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>expression</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Invalid regexp to look for hunk header: %s"</literal></expr></argument>, <argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>ep</name></expr> ?</condition><then> <expr><name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>xdiff_clear_find_func</name><parameter_list>(<parameter><decl><type><name>xdemitconf_t</name> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ff_regs</name></name> <modifier>*</modifier></type><name>regs</name> <init>= <expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func_priv</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>regs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>regs</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>regs</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func_priv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>xdiff_hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xdl_hash_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdiff_compare_lines</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xdl_recmatch</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>git_xmerge_style</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>git_xmerge_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"merge.conflictstyle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"'%s' is not a boolean"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"diff3"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>git_xmerge_style</name> <operator>=</operator> <name>XDL_MERGE_DIFF3</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>git_xmerge_style</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unknown style '%s' given for '%s'"</literal></expr></argument>,

<argument><expr><name>value</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
