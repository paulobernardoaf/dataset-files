<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\contrib\credential\wincred\git-credential-wincred.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x)/sizeof(x[0]))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>xmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>_CREDENTIAL_ATTRIBUTEW</name> <block>{

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>Keyword</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ValueSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPBYTE</name></type> <name>Value</name></decl>;</decl_stmt>

}</block></struct></type> <name>CREDENTIAL_ATTRIBUTEW</name><operator>,</operator> *<name>PCREDENTIAL_ATTRIBUTEW</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_CREDENTIALW</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>TargetName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>Comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>LastWritten</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>CredentialBlobSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPBYTE</name></type> <name>CredentialBlob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>Persist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>AttributeCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PCREDENTIAL_ATTRIBUTEW</name></type> <name>Attributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>TargetAlias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWSTR</name></type> <name>UserName</name></decl>;</decl_stmt>

}</block></struct></type> <name>CREDENTIALW</name><operator>,</operator> *<name>PCREDENTIALW</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_TYPE_GENERIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_PERSIST_LOCAL_MACHINE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRED_MAX_ATTRIBUTES</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CredWriteWT</name>)<parameter_list>(<parameter><decl><type><name>PCREDENTIALW</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CredEnumerateWT</name>)<parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>PCREDENTIALW</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CredFreeT</name>)<parameter_list>(<parameter><decl><type><name>PVOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CredDeleteWT</name>)<parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>advapi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CredWriteWT</name></type> <name>CredWriteW</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CredEnumerateWT</name></type> <name>CredEnumerateW</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CredFreeT</name></type> <name>CredFree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CredDeleteWT</name></type> <name>CredDeleteW</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_cred_funcs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>advapi</name> <operator>=</operator> <call><name>LoadLibraryExA</name><argument_list>(<argument><expr><literal type="string">"advapi32.dll"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advapi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"failed to load advapi32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>CredWriteW</name> <operator>=</operator> <operator>(</operator><name>CredWriteWT</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>advapi</name></expr></argument>, <argument><expr><literal type="string">"CredWriteW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CredEnumerateW</name> <operator>=</operator> <operator>(</operator><name>CredEnumerateWT</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>advapi</name></expr></argument>,

<argument><expr><literal type="string">"CredEnumerateW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CredFree</name> <operator>=</operator> <operator>(</operator><name>CredFreeT</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>advapi</name></expr></argument>, <argument><expr><literal type="string">"CredFree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CredDeleteW</name> <operator>=</operator> <operator>(</operator><name>CredDeleteWT</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>advapi</name></expr></argument>, <argument><expr><literal type="string">"CredDeleteW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CredWriteW</name> <operator>||</operator> <operator>!</operator><name>CredEnumerateW</name> <operator>||</operator> <operator>!</operator><name>CredFree</name> <operator>||</operator> <operator>!</operator><name>CredDeleteW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"failed to load functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wusername</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>password</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>protocol</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>host</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name></decl>, <decl><type ref="prev"/><name><name>target</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>wbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wbuf</name> <operator>||</operator> <operator>!</operator><name>wlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s=\n"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"WideCharToMultiByte failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LPCWSTR</name></type> <name>wcsstr_last</name><parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>find</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LPCWSTR</name></type> <name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <call><name>wcsstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>find</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pos</name></expr>;</condition> <incr><expr><name>pos</name> <operator>=</operator> <call><name>wcsstr</name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>find</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_part_with_last</name><parameter_list>(<parameter><decl><type><name>LPCWSTR</name> <modifier>*</modifier></type><name>ptarget</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>want</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>delim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LPCWSTR</name></type> <name>delim_pos</name></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><operator>*</operator><name>ptarget</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>delim</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delim_pos</name> <operator>=</operator> <ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><call><name>wcsstr_last</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>wcsstr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>delim_pos</name> <operator>=</operator> <name>start</name> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delim_pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>delim_pos</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delim_pos</name> <operator>||</operator> <name>want</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptarget</name> <operator>=</operator> <ternary><condition><expr><name>delim_pos</name></expr> ?</condition><then> <expr><name>delim_pos</name> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>start</name> <operator>+</operator> <name>len</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><name>want</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><name>want</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>want</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_part</name><parameter_list>(<parameter><decl><type><name>LPCWSTR</name> <modifier>*</modifier></type><name>ptarget</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>want</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>delim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>match_part_with_last</name><argument_list>(<argument><expr><name>ptarget</name></expr></argument>, <argument><expr><name>want</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_part_last</name><parameter_list>(<parameter><decl><type><name>LPCWSTR</name> <modifier>*</modifier></type><name>ptarget</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>want</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>delim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>match_part_with_last</name><argument_list>(<argument><expr><name>ptarget</name></expr></argument>, <argument><expr><name>want</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_cred</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CREDENTIALW</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LPCWSTR</name></type> <name>target</name> <init>= <expr><name><name>cred</name><operator>-&gt;</operator><name>TargetName</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wusername</name> <operator>&amp;&amp;</operator> <call><name>wcscmp</name><argument_list>(<argument><expr><name>wusername</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cred</name><operator>-&gt;</operator><name>UserName</name></name></expr> ?</condition><then> <expr><name><name>cred</name><operator>-&gt;</operator><name>UserName</name></name></expr> </then><else>: <expr><literal type="string">L""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>match_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><literal type="string">L"git"</literal></expr></argument>, <argument><expr><literal type="string">L":"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>match_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><literal type="string">L"://"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>match_part_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>wusername</name></expr></argument>, <argument><expr><literal type="string">L"@"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>match_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">L"/"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>match_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L""</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_credential</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CREDENTIALW</name> <modifier>*</modifier><modifier>*</modifier></type><name>creds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>num_creds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CredEnumerateW</name><argument_list>(<argument><expr><literal type="string">L"git:*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_creds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>creds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_creds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>match_cred</name><argument_list>(<argument><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_item</name><argument_list>(<argument><expr><literal type="string">"username"</literal></expr></argument>, <argument><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>UserName</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>UserName</name></expr> ?</condition><then> <expr><call><name>wcslen</name><argument_list>(<argument><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>UserName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_item</name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>CredentialBlob</name></expr></argument>,

<argument><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>CredentialBlobSize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>CredFree</name><argument_list>(<argument><expr><name>creds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_credential</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CREDENTIALW</name></type> <name>cred</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wusername</name> <operator>||</operator> <operator>!</operator><name>password</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name>CRED_TYPE_GENERIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>TargetName</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>Comment</name></name> <operator>=</operator> <literal type="string">L"saved by git-credential-wincred"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>CredentialBlobSize</name></name> <operator>=</operator> <operator>(</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>CredentialBlob</name></name> <operator>=</operator> <operator>(</operator><name>LPVOID</name><operator>)</operator><name>password</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>Persist</name></name> <operator>=</operator> <name>CRED_PERSIST_LOCAL_MACHINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>AttributeCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>TargetAlias</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>.</operator><name>UserName</name></name> <operator>=</operator> <name>wusername</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CredWriteW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"CredWrite failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>erase_credential</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CREDENTIALW</name> <modifier>*</modifier><modifier>*</modifier></type><name>creds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>num_creds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CredEnumerateW</name><argument_list>(<argument><expr><literal type="string">L"git:*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_creds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>creds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_creds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>match_cred</name><argument_list>(<argument><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CredDeleteW</name><argument_list>(<argument><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>TargetName</name></expr></argument>, <argument><expr><name><name>creds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>Type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CredFree</name><argument_list>(<argument><expr><name>creds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>utf8_to_utf16_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wstr</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>wlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>wstr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_credential</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad input: %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"protocol"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>utf8_to_utf16_dup</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>utf8_to_utf16_dup</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>utf8_to_utf16_dup</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"username"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wusername</name> <operator>=</operator> <call><name>utf8_to_utf16_dup</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>password</name> <operator>=</operator> <call><name>utf8_to_utf16_dup</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unrecognized input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usage</name> <init>=

<expr><literal type="string">"usage: git credential-wincred &lt;get|store|erase&gt;\n"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_credential</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_cred_funcs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>protocol</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>host</name> <operator>||</operator> <name>path</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="string">L"git:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcsncat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcsncat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="string">L"://"</literal></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wusername</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wcsncat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>wusername</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcsncat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="string">L"@"</literal></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wcsncat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wcsncat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="string">L"/"</literal></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcsncat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_credential</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"store"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>store_credential</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"erase"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>erase_credential</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
