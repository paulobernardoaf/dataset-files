<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\contrib\credential\gnome-keyring\git-credential-gnome-keyring.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnome-keyring.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GNOME_KEYRING_DEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnome-keyring-memory.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNOME_KEYRING_DEFAULT</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNOME_KEYRING_RESULT_NO_MATCH</name></cpp:macro> <cpp:value>GNOME_KEYRING_RESULT_DENIED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gnome_keyring_memory_alloc</name></cpp:macro> <cpp:value>g_malloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gnome_keyring_memory_free</name></cpp:macro> <cpp:value>gnome_keyring_free_password</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gnome_keyring_memory_strdup</name></cpp:macro> <cpp:value>g_strdup</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gnome_keyring_result_to_message</name><parameter_list>(<parameter><decl><type><name>GnomeKeyringResult</name></type> <name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GNOME_KEYRING_RESULT_OK</name></expr>:</case>

<return>return <expr><literal type="string">"OK"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_DENIED</name></expr>:</case>

<return>return <expr><literal type="string">"Denied"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_NO_KEYRING_DAEMON</name></expr>:</case>

<return>return <expr><literal type="string">"No Keyring Daemon"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_ALREADY_UNLOCKED</name></expr>:</case>

<return>return <expr><literal type="string">"Already UnLocked"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_NO_SUCH_KEYRING</name></expr>:</case>

<return>return <expr><literal type="string">"No Such Keyring"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_BAD_ARGUMENTS</name></expr>:</case>

<return>return <expr><literal type="string">"Bad Arguments"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_IO_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"IO Error"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_CANCELLED</name></expr>:</case>

<return>return <expr><literal type="string">"Cancelled"</literal></expr>;</return>

<case>case <expr><name>GNOME_KEYRING_RESULT_ALREADY_EXISTS</name></expr>:</case>

<return>return <expr><literal type="string">"Already Exists"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"Unknown Error"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GLIB_MAJOR_VERSION</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>GLIB_MINOR_VERSION</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gnome_keyring_done_cb</name><parameter_list>(<parameter><decl><type><name>GnomeKeyringResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gpointer</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>gpointer</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>done</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GnomeKeyringResult</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>GnomeKeyringResult</name> <operator>*</operator><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wait_for_request_completion</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GMainContext</name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><call><name>g_main_context_default</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_main_context_iteration</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GnomeKeyringResult</name></type> <name>gnome_keyring_item_delete_sync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyring</name></decl></parameter>, <parameter><decl><type><name>guint32</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GnomeKeyringResult</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gpointer</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>done</name></expr>, <expr><operator>&amp;</operator><name>result</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnome_keyring_item_delete</name><argument_list>(<argument><expr><name>keyring</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>gnome_keyring_done_cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_for_request_completion</name><argument_list>(<argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>credential</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREDENTIAL_INIT</name></cpp:macro> <cpp:value>{ NULL, NULL, 0, NULL, NULL, NULL }</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>credential_op_cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>credential_operation</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>credential_op_cb</name></type> <name>op</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREDENTIAL_OP_END</name></cpp:macro> <cpp:value>{ NULL, NULL }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>keyring_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s:%hd/%s"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keyring_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GnomeKeyringNetworkPasswordData</name> <modifier>*</modifier></type><name>password_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GnomeKeyringResult</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>host</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>keyring_object</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gnome_keyring_find_network_password_sync</name><argument_list>(

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,

<argument><expr><name>object</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>GNOME_KEYRING_RESULT_NO_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>GNOME_KEYRING_RESULT_CANCELLED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>GNOME_KEYRING_RESULT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gnome_keyring_result_to_message</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>password_data</name> <operator>=</operator> <operator>(</operator><name>GnomeKeyringNetworkPasswordData</name> <operator>*</operator><operator>)</operator><name><name>entries</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_keyring_memory_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <call><name>gnome_keyring_memory_strdup</name><argument_list>(<argument><expr><name><name>password_data</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>password_data</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gnome_keyring_network_password_list_free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keyring_store</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>guint32</name></type> <name>item_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GnomeKeyringResult</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>host</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>||</operator>

<operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>username</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>password</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>keyring_object</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gnome_keyring_set_network_password_sync</name><argument_list>(

<argument><expr><name>GNOME_KEYRING_DEFAULT</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,

<argument><expr><name>object</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>password</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>item_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>GNOME_KEYRING_RESULT_OK</name> <operator>&amp;&amp;</operator>

<name>result</name> <operator>!=</operator> <name>GNOME_KEYRING_RESULT_CANCELLED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gnome_keyring_result_to_message</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keyring_erase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GnomeKeyringNetworkPasswordData</name> <modifier>*</modifier></type><name>password_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GnomeKeyringResult</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>host</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>keyring_object</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gnome_keyring_find_network_password_sync</name><argument_list>(

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,

<argument><expr><name>object</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> ,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>GNOME_KEYRING_RESULT_NO_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>GNOME_KEYRING_RESULT_CANCELLED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>GNOME_KEYRING_RESULT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gnome_keyring_result_to_message</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>password_data</name> <operator>=</operator> <operator>(</operator><name>GnomeKeyringNetworkPasswordData</name> <operator>*</operator><operator>)</operator><name><name>entries</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gnome_keyring_item_delete_sync</name><argument_list>(

<argument><expr><name><name>password_data</name><operator>-&gt;</operator><name>keyring</name></name></expr></argument>, <argument><expr><name><name>password_data</name><operator>-&gt;</operator><name>item_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_keyring_network_password_list_free</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>GNOME_KEYRING_RESULT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gnome_keyring_result_to_message</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>credential_operation</name></name> <specifier>const</specifier></type> <name><name>credential_helper_ops</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"get"</literal></expr>, <expr><name>keyring_get</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"store"</literal></expr>, <expr><name>keyring_store</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"erase"</literal></expr>, <expr><name>keyring_erase</name></expr> }</block></expr>,

<expr><name>CREDENTIAL_OP_END</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>credential_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>credential_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_keyring_memory_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>credential_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>credential_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <call><name>gnome_keyring_memory_alloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_len</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>line_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>--</operator><name>line_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line_len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"invalid credential line: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_keyring_memory_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"protocol"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"username"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnome_keyring_memory_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <call><name>gnome_keyring_memory_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>gnome_keyring_memory_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>credential_write_item</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s=%s\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>credential_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>credential</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>credential_write_item</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"username"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>credential_write_item</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>credential_operation</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>try_op</name> <init>= <expr><name>credential_helper_ops</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>basename</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>basename</name><operator>)</operator></expr> ?</condition><then> <expr><name>basename</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s &lt;"</literal></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>try_op</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>try_op</name><operator>++</operator><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>try_op</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>EXIT_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>credential_operation</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>try_op</name> <init>= <expr><name>credential_helper_ops</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>credential</name></name></type> <name>cred</name> <init>= <expr><name>CREDENTIAL_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_set_application_name</name><argument_list>(<argument><expr><literal type="string">"Git Credential Helper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>try_op</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>try_op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>try_op</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>try_op</name><operator>-&gt;</operator><name>name</name></name> <operator>||</operator> <operator>!</operator><name><name>try_op</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>credential_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>try_op</name><operator>-&gt;</operator><name>op</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>credential_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>credential_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
