<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\xdiff\xemit.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xinclude.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>long</name></type> <name>xdl_get_rec</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rec</name> <operator>=</operator> <name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>ri</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>

<return>return <expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>ri</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_emit_record</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pre</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>psize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>xdl_get_rec</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_diffrec</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xdl_get_hunk</name><parameter_list>(<parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xscr</name></decl></parameter>, <parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xchp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lxch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>max_common</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name> <operator>+</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>interhunkctxlen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>max_ignorable</name> <init>= <expr><name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ignored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>xchp</name> <operator>=</operator> <operator>*</operator><name>xscr</name></expr>;</init> <condition><expr><name>xchp</name> <operator>&amp;&amp;</operator> <name><name>xchp</name><operator>-&gt;</operator><name>ignore</name></name></expr>;</condition> <incr><expr><name>xchp</name> <operator>=</operator> <name><name>xchp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>xch</name> <operator>=</operator> <name><name>xchp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xch</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <operator>(</operator><name><name>xchp</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xchp</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator> <operator>&gt;=</operator> <name>max_ignorable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xscr</name> <operator>=</operator> <name>xch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>xscr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lxch</name> <operator>=</operator> <operator>*</operator><name>xscr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>xchp</name> <operator>=</operator> <operator>*</operator><name>xscr</name></expr><operator>,</operator> <expr><name>xch</name> <operator>=</operator> <name><name>xchp</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>xch</name></expr>;</condition> <incr><expr><name>xchp</name> <operator>=</operator> <name>xch</name></expr><operator>,</operator> <expr><name>xch</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>distance</name> <init>= <expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <operator>(</operator><name><name>xchp</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xchp</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <name>max_common</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>max_ignorable</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name> <operator>||</operator> <name>lxch</name> <operator>==</operator> <name>xchp</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lxch</name> <operator>=</operator> <name>xch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ignored</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>max_ignorable</name> <operator>&amp;&amp;</operator> <name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ignored</name> <operator>+=</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lxch</name> <operator>!=</operator> <name>xchp</name> <operator>&amp;&amp;</operator>

<name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name>ignored</name> <operator>-</operator> <operator>(</operator><name><name>lxch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>lxch</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator> <operator>&gt;</operator> <name>max_common</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lxch</name> <operator>=</operator> <name>xch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ignored</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ignored</name> <operator>+=</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>lxch</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>def_ff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>rec</name></expr></argument>)</argument_list></call> <operator>||</operator> 

<operator>*</operator><name>rec</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> 

<operator>*</operator><name>rec</name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>rec</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>match_func_rec</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ri</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>xdl_get_rec</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xecfg</name><operator>-&gt;</operator><name>find_func</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>def_ff</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func_priv</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>xecfg</name><operator>-&gt;</operator><name>find_func</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>xecfg</name><operator>-&gt;</operator><name>find_func_priv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_func_rec</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>dummy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<return>return <expr><call><name>match_func_rec</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>func_line</name> <block>{

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>long</name></type> <name>get_func_line</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>func_line</name></name> <modifier>*</modifier></type><name>func_line</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>step</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>start</name> <operator>&gt;</operator> <name>limit</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"/><name><name>dummy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <ternary><condition><expr><name>func_line</name></expr> ?</condition><then> <expr><name><name>func_line</name><operator>-&gt;</operator><name>buf</name></name></expr> </then><else>: <expr><name>dummy</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>func_line</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>func_line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>limit</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>&lt;</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr>;</condition> <incr><expr><name>l</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>match_func_rec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>func_line</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>func_line</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_empty_rec</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>xdl_get_rec</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XDL_ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rec</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>!</operator><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_emit_diff</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>,

<parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>e2</name></decl>, <decl><type ref="prev"/><name>lctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xche</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>funclineprev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>func_line</name></name></type> <name>func_line</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>xch</name> <operator>=</operator> <name>xscr</name></expr>;</init> <condition><expr><name>xch</name></expr>;</condition> <incr><expr><name>xch</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xchp</name> <init>= <expr><name>xch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xche</name> <operator>=</operator> <call><name>xdl_get_hunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xch</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xch</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<label><name>pre_context_calculation</name>:</label>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>XDL_MAX</name><argument_list>(<argument><expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>XDL_MAX</name><argument_list>(<argument><expr><name><name>xch</name><operator>-&gt;</operator><name>i2</name></name> <operator>-</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xecfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XDL_EMIT_FUNCCONTEXT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>fs1</name></decl>, <decl><type ref="prev"/><name>i1</name> <init>= <expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&gt;=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i2</name> <init>= <expr><name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_func_rec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>post_context_calculation</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fs1</name> <operator>=</operator> <call><name>get_func_line</name><argument_list>(<argument><expr><name>xe</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>fs1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_empty_rec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name>fs1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>is_func_rec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>fs1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fs1</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>fs1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fs1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fs1</name> <operator>&lt;</operator> <name>s1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>XDL_MAX</name><argument_list>(<argument><expr><name>s2</name> <operator>-</operator> <operator>(</operator><name>s1</name> <operator>-</operator> <name>fs1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>fs1</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>xchp</name> <operator>!=</operator> <name>xch</name> <operator>&amp;&amp;</operator>

<name><name>xchp</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xchp</name><operator>-&gt;</operator><name>chg1</name></name> <operator>&lt;=</operator> <name>s1</name> <operator>&amp;&amp;</operator>

<name><name>xchp</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xchp</name><operator>-&gt;</operator><name>chg2</name></name> <operator>&lt;=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xchp</name> <operator>=</operator> <name><name>xchp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>xchp</name> <operator>!=</operator> <name>xch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xch</name> <operator>=</operator> <name>xchp</name></expr>;</expr_stmt>

<goto>goto <name>pre_context_calculation</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>post_context_calculation</name>:</label>

<expr_stmt><expr><name>lctx</name> <operator>=</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lctx</name> <operator>=</operator> <call><name>XDL_MIN</name><argument_list>(<argument><expr><name>lctx</name></expr></argument>, <argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <operator>(</operator><name><name>xche</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lctx</name> <operator>=</operator> <call><name>XDL_MIN</name><argument_list>(<argument><expr><name>lctx</name></expr></argument>, <argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <operator>(</operator><name><name>xche</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg2</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg1</name></name> <operator>+</operator> <name>lctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg2</name></name> <operator>+</operator> <name>lctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xecfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XDL_EMIT_FUNCCONTEXT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>fe1</name> <init>= <expr><call><name>get_func_line</name><argument_list>(<argument><expr><name>xe</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>xche</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg1</name></name></expr></argument>,

<argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>fe1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_empty_rec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name>fe1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fe1</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>fe1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fe1</name> <operator>=</operator> <name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fe1</name> <operator>&gt;</operator> <name>e1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>XDL_MIN</name><argument_list>(<argument><expr><name>e2</name> <operator>+</operator> <operator>(</operator><name>fe1</name> <operator>-</operator> <name>e1</name><operator>)</operator></expr></argument>, <argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>fe1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xche</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><call><name>XDL_MIN</name><argument_list>(<argument><expr><name><name>xche</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>i1</name></name></expr></argument>,

<argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>-</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name> <operator>&lt;=</operator> <name>e1</name> <operator>||</operator>

<call><name>get_func_line</name><argument_list>(<argument><expr><name>xe</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xche</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<goto>goto <name>post_context_calculation</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xecfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XDL_EMIT_FUNCNAMES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_func_line</name><argument_list>(<argument><expr><name>xe</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func_line</name></expr></argument>,

<argument><expr><name>s1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>funclineprev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>funclineprev</name> <operator>=</operator> <name>s1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_hunk_hdr</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name> <operator>-</operator> <name>s1</name></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>e2</name> <operator>-</operator> <name>s2</name></expr></argument>,

<argument><expr><name><name>func_line</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>func_line</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>s2</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</condition> <incr><expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>s1</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr><operator>,</operator> <expr><name>s2</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</init><condition>;</condition> <incr><expr><name>xch</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>s1</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</condition> <incr><expr><name>s1</name><operator>++</operator></expr><operator>,</operator> <expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>s1</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr>;</init> <condition><expr><name>s1</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</condition> <incr><expr><name>s1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>s2</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</init> <condition><expr><name>s2</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</condition> <incr><expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>xch</name> <operator>==</operator> <name>xche</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>s2</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</init> <condition><expr><name>s2</name> <operator>&lt;</operator> <name>e2</name></expr>;</condition> <incr><expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
