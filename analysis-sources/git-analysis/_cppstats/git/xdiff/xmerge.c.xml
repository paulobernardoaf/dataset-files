<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\xdiff\xmerge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xinclude.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>s_xdmerge</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>s_xdmerge</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i1</name></decl>, <name>i2</name>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>chg1</name></decl>, <name>chg2</name>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>chg0</name></decl>;</decl_stmt>

}</block></struct></type> <name>xdmerge_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_append_merge</name><parameter_list>(<parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>merge</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>i0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>chg0</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>chg1</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>i2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>chg2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>*</operator><name>merge</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i1</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>||</operator> <name>i2</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg2</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name><name>m</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg0</name></name> <operator>=</operator> <name>i0</name> <operator>+</operator> <name>chg0</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>i0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>=</operator> <name>i1</name> <operator>+</operator> <name>chg1</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>=</operator> <name>i2</name> <operator>+</operator> <name>chg2</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xdmerge_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i0</name></name> <operator>=</operator> <name>i0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg0</name></name> <operator>=</operator> <name>chg0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>=</operator> <name>chg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>=</operator> <name>chg2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>merge</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>merge</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>merge</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_cleanup_merge</name><parameter_list>(<parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>next_c</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name>next_c</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_merge_cmp_lines</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rec1</name> <init>= <expr><name><name>xe1</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name></name> <operator>+</operator> <name>i1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rec2</name> <init>= <expr><name><name>xe2</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name></name> <operator>+</operator> <name>i2</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>xdl_recmatch</name><argument_list>(<argument><expr><name><name>rec1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>rec1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>,

<argument><expr><name><name>rec2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>rec2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_recs_copy_0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>use_orig</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>needs_cr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_nl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xrecord_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>recs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>recs</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>use_orig</name></expr> ?</condition><then> <expr><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>recs</name></name></expr> </then><else>: <expr><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name></name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>size</name> <operator>+=</operator> <name><name>recs</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>add_nl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>recs</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>recs</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>needs_cr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_recs_copy</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>needs_cr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_nl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xdl_recs_copy_0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xe</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>needs_cr</name></expr></argument>, <argument><expr><name>add_nl</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_orig_copy</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>needs_cr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_nl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xdl_recs_copy_0</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xe</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>needs_cr</name></expr></argument>, <argument><expr><name>add_nl</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_eol_crlf</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>nrec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>size</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>file</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ptr</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>nrec</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>file</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ptr</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>file</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ptr</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>file</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>ptr</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_cr_needed</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe1</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe2</name></decl></parameter>, <parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>needs_cr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>needs_cr</name> <operator>=</operator> <call><name>is_eol_crlf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe1</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_cr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>needs_cr</name> <operator>=</operator> <call><name>is_eol_crlf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe2</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_cr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>needs_cr</name> <operator>=</operator> <call><name>is_eol_crlf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe1</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>needs_cr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>needs_cr</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_conflict_hunk</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,

<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>marker1_size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>name1</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marker2_size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>name2</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marker3_size</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>name3</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name3</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needs_cr</name> <init>= <expr><call><name>is_cr_needed</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>xe2</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>marker_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>marker_size</name> <operator>=</operator> <name>DEFAULT_CONFLICT_MARKER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_recs_copy</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>needs_cr</name> <operator>+</operator> <name>marker1_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>marker1_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>marker1_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker1_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_cr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_recs_copy</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name></expr></argument>, <argument><expr><name>needs_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <name>XDL_MERGE_DIFF3</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>needs_cr</name> <operator>+</operator> <name>marker3_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>marker3_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name3</name></expr></argument>, <argument><expr><name>marker3_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker3_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_cr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_orig_copy</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i0</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>chg0</name></name></expr></argument>, <argument><expr><name>needs_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>needs_cr</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_cr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_recs_copy</name><argument_list>(<argument><expr><name>xe2</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>chg2</name></name></expr></argument>, <argument><expr><name>needs_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>needs_cr</name> <operator>+</operator> <name>marker2_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>marker2_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name2</name></expr></argument>, <argument><expr><name>marker2_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>marker2_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_cr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_fill_merge_buffer</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,

<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ancestor_name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>favor</name></decl></parameter>,

<parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>size</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>favor</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>favor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>fill_conflict_hunk</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>xe2</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>,

<argument><expr><name>ancestor_name</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,

<argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_recs_copy</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>needs_cr</name> <init>= <expr><call><name>is_cr_needed</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>xe2</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_recs_copy</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name></expr></argument>, <argument><expr><name>needs_cr</name></expr></argument>, <argument><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_recs_copy</name><argument_list>(<argument><expr><name>xe2</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>chg2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>xdl_recs_copy</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>xe1</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>dest</name></expr> ?</condition><then> <expr><name>dest</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_refine_conflicts</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe1</name></decl></parameter>, <parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe2</name></decl></parameter>, <parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdfenv_t</name></type> <name>xe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name></expr></init></decl>, <decl><type ref="prev"/><name>i2</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>xe1</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>xe1</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name>

<operator>+</operator> <name><name>xe1</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>-</operator> <name><name>t1</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t2</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>xe2</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t2</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>xe2</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name>

<operator>+</operator> <name><name>xe2</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>-</operator> <name><name>t2</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_do_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_build_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xscr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xscr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xscr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name>i1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name>i2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>xscr</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m2</name> <init>= <expr><call><name>xdl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xdmerge_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xscr</name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m2</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name>i1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i2</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name>i2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>=</operator> <name><name>xscr</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>line_contains_alnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lines_contain_alnum</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>chg</name></expr>;</condition> <incr><expr><name>chg</name><operator>--</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>line_contains_alnum</name><argument_list>(<argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,

<argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xdl_merge_two_conflicts</name><parameter_list>(<parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>next_m</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>=</operator> <name><name>next_m</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>next_m</name><operator>-&gt;</operator><name>chg1</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>=</operator> <name><name>next_m</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>next_m</name><operator>-&gt;</operator><name>chg2</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>next_m</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>next_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_simplify_non_conflicts</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe1</name></decl></parameter>, <parameter><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>simplify_if_no_alnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>next_m</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next_m</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>next_m</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>next_m</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>simplify_if_no_alnum</name> <operator>||</operator>

<call><name>lines_contain_alnum</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>next_m</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_merge_two_conflicts</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_do_merge</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe1</name></decl></parameter>, <parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr1</name></decl></parameter>,

<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe2</name></decl></parameter>, <parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr2</name></decl></parameter>,

<parameter><decl><type><name>xmparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xmp</name></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xdmerge_t</name> <modifier>*</modifier></type><name>changes</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name> <init>= <expr><operator>&amp;</operator><name><name>xmp</name><operator>-&gt;</operator><name>xpp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ancestor_name</name> <init>= <expr><name><name>xmp</name><operator>-&gt;</operator><name>ancestor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name1</name> <init>= <expr><name><name>xmp</name><operator>-&gt;</operator><name>file1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name2</name> <init>= <expr><name><name>xmp</name><operator>-&gt;</operator><name>file2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i0</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>chg0</name></decl>, <decl><type ref="prev"/><name>chg1</name></decl>, <decl><type ref="prev"/><name>chg2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>xmp</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>style</name> <init>= <expr><name><name>xmp</name><operator>-&gt;</operator><name>style</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>favor</name> <init>= <expr><name><name>xmp</name><operator>-&gt;</operator><name>favor</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <name>XDL_MERGE_DIFF3</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>XDL_MERGE_EAGER</name> <operator>&lt;</operator> <name>level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>XDL_MERGE_EAGER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>changes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>xscr1</name> <operator>&amp;&amp;</operator> <name>xscr2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>changes</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name> <operator>&lt;</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i2</name></name> <operator>-</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg0</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg2</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_append_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>chg0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>chg1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>chg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xscr1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name> <operator>&lt;</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i2</name></name> <operator>-</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg0</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg1</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_append_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>chg0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>chg1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>chg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xscr2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>XDL_MERGE_MINIMAL</name> <operator>||</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name> <operator>!=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name> <operator>||</operator>

<name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name> <operator>!=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name> <operator>||</operator>

<name><name>xscr1</name><operator>-&gt;</operator><name>chg2</name></name> <operator>!=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg2</name></name> <operator>||</operator>

<call><name>xdl_merge_cmp_lines</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name><name>xscr1</name><operator>-&gt;</operator><name>i2</name></name></expr></argument>,

<argument><expr><name>xe2</name></expr></argument>, <argument><expr><name><name>xscr2</name><operator>-&gt;</operator><name>i2</name></name></expr></argument>,

<argument><expr><name><name>xscr1</name><operator>-&gt;</operator><name>chg2</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffo</name> <init>= <expr><name>off</name> <operator>+</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name> <operator>-</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i0</name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i2</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>chg0</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name> <operator>-</operator> <name>i0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg2</name></name> <operator>-</operator> <name>i1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg2</name></name> <operator>-</operator> <name>i2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ffo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chg0</name> <operator>-=</operator> <name>ffo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg1</name> <operator>-=</operator> <name>ffo</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>chg2</name> <operator>+=</operator> <name>ffo</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_append_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>chg0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>chg1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>chg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&gt;=</operator> <name>i2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xscr2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i2</name> <operator>&gt;=</operator> <name>i1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xscr1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>xscr1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>changes</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xe2</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <name><name>xe2</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg0</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg2</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_append_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>chg0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>chg1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>chg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xscr1</name> <operator>=</operator> <name><name>xscr1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>xscr2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>changes</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xe1</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <name><name>xe1</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>i2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg0</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg1</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chg2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_append_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>chg0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>chg1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>chg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xscr2</name> <operator>=</operator> <name><name>xscr2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>changes</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>XDL_MERGE_ZEALOUS</name> <operator>&lt;=</operator> <name>level</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>xdl_refine_conflicts</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>xe2</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_simplify_non_conflicts</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>,

<argument><expr><name>XDL_MERGE_ZEALOUS</name> <operator>&lt;</operator> <name>level</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>marker_size</name> <init>= <expr><name><name>xmp</name><operator>-&gt;</operator><name>marker_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>xdl_fill_merge_buffer</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>xe2</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>,

<argument><expr><name>ancestor_name</name></expr></argument>,

<argument><expr><name>favor</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>,

<argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_fill_merge_buffer</name><argument_list>(<argument><expr><name>xe1</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>xe2</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>,

<argument><expr><name>ancestor_name</name></expr></argument>, <argument><expr><name>favor</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>,

<argument><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>xdl_cleanup_merge</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xdl_merge</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>,

<parameter><decl><type><name>xmparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xmp</name></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xscr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdfenv_t</name></type> <name>xe1</name></decl>, <decl><type ref="prev"/><name>xe2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name> <init>= <expr><operator>&amp;</operator><name><name>xmp</name><operator>-&gt;</operator><name>xpp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_do_diff</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xe1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_do_diff</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xe2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe1</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe1</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe1</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe1</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_build_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xscr1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe2</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe2</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_change_compact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe2</name><operator>.</operator><name>xdf2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xe2</name><operator>.</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name><name>xpp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xdl_build_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xscr2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>xscr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xscr1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name><name>mf2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>mf2</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>xscr2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>xdl_malloc</name><argument_list>(<argument><expr><name><name>mf1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>mf1</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>xdl_do_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe1</name></expr></argument>, <argument><expr><name>xscr1</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>xe2</name></expr></argument>, <argument><expr><name>xscr2</name></expr></argument>,

<argument><expr><name>xmp</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>xscr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_script</name><argument_list>(<argument><expr><name>xscr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xdl_free_env</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xe2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

</unit>
