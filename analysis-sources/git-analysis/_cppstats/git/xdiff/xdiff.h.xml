<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\xdiff\xdiff.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_NEED_MINIMAL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_IGNORE_WHITESPACE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_IGNORE_WHITESPACE_CHANGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_IGNORE_WHITESPACE_AT_EOL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_IGNORE_CR_AT_EOL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_WHITESPACE_FLAGS</name></cpp:macro> <cpp:value>(XDF_IGNORE_WHITESPACE | XDF_IGNORE_WHITESPACE_CHANGE | XDF_IGNORE_WHITESPACE_AT_EOL | XDF_IGNORE_CR_AT_EOL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_IGNORE_BLANK_LINES</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_PATIENCE_DIFF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_HISTOGRAM_DIFF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_DIFF_ALGORITHM_MASK</name></cpp:macro> <cpp:value>(XDF_PATIENCE_DIFF | XDF_HISTOGRAM_DIFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_DIFF_ALG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; XDF_DIFF_ALGORITHM_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDF_INDENT_HEURISTIC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_EMIT_FUNCNAMES</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_EMIT_FUNCCONTEXT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_MINIMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_EAGER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_ZEALOUS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_ZEALOUS_ALNUM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_FAVOR_OURS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_FAVOR_THEIRS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_FAVOR_UNION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MERGE_DIFF3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>s_mmfile</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>mmfile_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>s_mmbuffer</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>mmbuffer_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>s_xpparam</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>anchors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>anchors_nr</name></decl>;</decl_stmt>

}</block></struct></type> <name>xpparam_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>s_xdemitcb</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>out_hunk</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>old_begin</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>old_nr</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>new_begin</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>new_nr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>out_line</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>xdemitcb_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>long</name></type> (<modifier>*</modifier><name>find_func_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>line_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>buffer_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xdl_emit_hunk_consume_func_t</name>)<parameter_list>(<parameter><decl><type><name>long</name></type> <name>start_a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count_a</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>start_b</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count_b</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>s_xdemitconf</name> <block>{

<decl_stmt><decl><type><name>long</name></type> <name>ctxlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>interhunkctxlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>find_func_t</name></type> <name>find_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>find_func_priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdl_emit_hunk_consume_func_t</name></type> <name>hunk_func</name></decl>;</decl_stmt>

}</block></struct></type> <name>xdemitconf_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>s_bdiffparam</name> <block>{

<decl_stmt><decl><type><name>long</name></type> <name>bsize</name></decl>;</decl_stmt>

}</block></struct></type> <name>bdiffparam_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdl_malloc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xmalloc(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdl_free</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xdl_realloc</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xrealloc(ptr,x)</cpp:value></cpp:define>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>xdl_mmfile_first</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mmf</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>xdl_mmfile_size</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mmf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>xdl_diff</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>, <parameter><decl><type><name>xpparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xpp</name></decl></parameter>,

<parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>s_xmparam</name> <block>{

<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marker_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>favor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ancestor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file2</name></decl>;</decl_stmt> 

}</block></struct></type> <name>xmparam_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CONFLICT_MARKER_SIZE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>xdl_merge</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>,

<parameter><decl><type><name>xmparam_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xmp</name></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
