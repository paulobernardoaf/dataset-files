<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\diffcore-rename.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> struct <name>diff_rename_dst</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>rename_dst</name></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rename_dst_nr</name></decl>, <decl><type ref="prev"/><name>rename_dst_alloc</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_rename_dst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>rename_dst_nr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>last</name> <operator>&gt;</operator> <name>first</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>first</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_rename_dst</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>rename_dst</name><index>[<expr><name>next</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>next</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>next</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><name>first</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>diff_rename_dst</name></name> <modifier>*</modifier></type><name>locate_rename_dst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ofs</name> <init>= <expr><call><name>find_rename_dst</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>ofs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>rename_dst</name><index>[<expr><name>ofs</name></expr>]</index></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_rename_dst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><call><name>find_rename_dst</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>-</operator><name>first</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>rename_dst</name></expr></argument>, <argument><expr><name>rename_dst_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rename_dst_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rename_dst_nr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&lt;</operator> <name>rename_dst_nr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MOVE_ARRAY</name><argument_list>(<argument><expr><name>rename_dst</name> <operator>+</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rename_dst</name> <operator>+</operator> <name>first</name></expr></argument>,

<argument><expr><name>rename_dst_nr</name> <operator>-</operator> <name>first</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rename_dst</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>two</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name><name>rename_dst</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>oid_valid</name></name></expr></argument>,

<argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rename_dst</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>pair</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>diff_rename_src</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>score</name></decl>;</decl_stmt> 

}</block> <decl><modifier>*</modifier><name>rename_src</name></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rename_src_nr</name></decl>, <decl><type ref="prev"/><name>rename_src_alloc</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>diff_rename_src</name></name> <modifier>*</modifier></type><name>register_rename_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>score</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>rename_src_nr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>last</name> <operator>&gt;</operator> <name>first</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>first</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_rename_src</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>rename_src</name><index>[<expr><name>next</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>src</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>next</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>rename_src</name></expr></argument>, <argument><expr><name>rename_src_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rename_src_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rename_src_nr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&lt;</operator> <name>rename_src_nr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MOVE_ARRAY</name><argument_list>(<argument><expr><name>rename_src</name> <operator>+</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rename_src</name> <operator>+</operator> <name>first</name></expr></argument>,

<argument><expr><name>rename_src_nr</name> <operator>-</operator> <name>first</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rename_src</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rename_src</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>rename_src</name><index>[<expr><name>first</name></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>basename_same</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>src_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>dst_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>src_len</name> <operator>&amp;&amp;</operator> <name>dst_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c1</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>path</name><index>[<expr><operator>--</operator><name>src_len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c2</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>path</name><index>[<expr><operator>--</operator><name>dst_len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><operator>!</operator><name>src_len</name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>src_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>dst_len</name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>dst_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>diff_score</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>src</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dst</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>name_score</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_similarity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>minimum_score</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>max_size</name></decl>, <decl><type ref="prev"/><name>delta_size</name></decl>, <decl><type ref="prev"/><name>base_size</name></decl>, <decl><type ref="prev"/><name>src_copied</name></decl>, <decl><type ref="prev"/><name>literal_added</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>cnt_data</name></name> <operator>&amp;&amp;</operator>

<call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>CHECK_SIZE_ONLY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>cnt_data</name></name> <operator>&amp;&amp;</operator>

<call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>CHECK_SIZE_ONLY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_size</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>base_size</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>delta_size</name> <operator>=</operator> <name>max_size</name> <operator>-</operator> <name>base_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>*</operator> <operator>(</operator><name>MAX_SCORE</name><operator>-</operator><name>minimum_score</name><operator>)</operator> <operator>&lt;</operator> <name>delta_size</name> <operator>*</operator> <name>MAX_SCORE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>cnt_data</name></name> <operator>&amp;&amp;</operator> <call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>cnt_data</name></name> <operator>&amp;&amp;</operator> <call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diffcore_count_changes</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>cnt_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>cnt_data</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>src_copied</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>literal_added</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>src_copied</name> <operator>*</operator> <name>MAX_SCORE</name> <operator>/</operator> <name>max_size</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>score</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>record_rename_pair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dst_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>score</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rename_dst</name><index>[<expr><name>dst_index</name></expr>]</index></name><operator>.</operator><name>pair</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"internal error: dst already matched."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>rename_src</name><index>[<expr><name>src_index</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>rename_used</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>rename_dst</name><index>[<expr><name>dst_index</name></expr>]</index></name><operator>.</operator><name>two</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>diff_queue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>renamed_pair</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name><name>rename_src</name><index>[<expr><name>src_index</name></expr>]</index></name><operator>.</operator><name>score</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rename_dst</name><index>[<expr><name>dst_index</name></expr>]</index></name><operator>.</operator><name>pair</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>score_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_score</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>a_</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>dst</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>dst</name></name><operator>)</operator></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>dst</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>score</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>name_score</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>name_score</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>score</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>score</name></name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>file_similarity</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>filespec</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>hash_filespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>filespec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filespec</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filespec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hash_object_file</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>hash_algo</name></name></expr></argument>, <argument><expr><name><name>filespec</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>filespec</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><literal type="string">"blob"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filespec</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>oidhash</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filespec</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_identical_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>srcs</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_index</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>renames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name><name>rename_dst</name><index>[<expr><name>dst_index</name></expr>]</index></name><operator>.</operator><name>two</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>file_similarity</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>best</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>, <decl><type ref="prev"/><name>best_score</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name> <init>= <expr><call><name>hash_filespec</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>hashmap_get_entry_from_hash</name><argument_list>(<argument><expr><name>srcs</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr>struct <name>file_similarity</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>hashmap_for_each_entry_from</name><argument_list>(<argument>srcs</argument>, <argument>p</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>filespec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>target</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>rename_used</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>rename_used</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>!=</operator> <name>DIFF_DETECT_COPY</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>basename_same</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>best</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>record_rename_pair</name><argument_list>(<argument><expr><name>dst_index</name></expr></argument>, <argument><expr><name><name>best</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>MAX_SCORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>renames</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>renames</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_file_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>filespec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>file_similarity</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>filespec</name></name> <operator>=</operator> <name>filespec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><call><name>hash_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filespec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_exact_renames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>renames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>file_table</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_table</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rename_src_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>rename_src_nr</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>insert_file_table</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>file_table</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>rename_src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rename_dst_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>renames</name> <operator>+=</operator> <call><name>find_identical_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_table</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>hashmap_free_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_table</name></expr></argument>, <argument><expr>struct <name>file_similarity</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>renames</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CANDIDATE_PER_DST</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>record_if_better</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_score</name></name></type> <name><name>m</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_score</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>worst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>worst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CANDIDATE_PER_DST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>score_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><name>worst</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>worst</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>score_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><name>worst</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><index>[<expr><name>worst</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>o</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>too_many_rename_candidates</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_create</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rename_limit</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>rename_limit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_src</name> <init>= <expr><name>rename_src_nr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>needed_rename_limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rename_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rename_limit</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num_create</name> <operator>&lt;=</operator> <name>rename_limit</name> <operator>||</operator> <name>num_src</name> <operator>&lt;=</operator> <name>rename_limit</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>num_create</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>num_src</name>

<operator>&lt;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>rename_limit</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>rename_limit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>needed_rename_limit</name></name> <operator>=</operator>

<ternary><condition><expr><name>num_src</name> <operator>&gt;</operator> <name>num_create</name></expr> ?</condition><then> <expr><name>num_src</name></expr> </then><else>: <expr><name>num_create</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>num_src</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rename_src_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name><name>rename_src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num_create</name> <operator>&lt;=</operator> <name>rename_limit</name> <operator>||</operator> <name>num_src</name> <operator>&lt;=</operator> <name>rename_limit</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>num_create</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>num_src</name>

<operator>&lt;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>rename_limit</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>rename_limit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_renames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_score</name></name> <modifier>*</modifier></type><name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minimum_score</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copies</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_cnt</name> <operator>*</operator> <name>NUM_CANDIDATE_PER_DST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_rename_dst</name></name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dst</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>mx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>&lt;</operator> <name>minimum_score</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>rename_dst</name><index>[<expr><name><name>mx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dst</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>pair</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copies</name> <operator>&amp;&amp;</operator> <name><name>rename_src</name><index>[<expr><name><name>mx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>src</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>rename_used</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>record_rename_pair</name><argument_list>(<argument><expr><name><name>mx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dst</name></expr></argument>, <argument><expr><name><name>mx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>src</name></expr></argument>, <argument><expr><name><name>mx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diffcore_rename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>detect_rename</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minimum_score</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>rename_score</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>outq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_score</name></name> <modifier>*</modifier></type><name>mx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rename_count</name></decl>, <decl><type ref="prev"/><name>skip_unmodified</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_create</name></decl>, <decl><type ref="prev"/><name>dst_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>minimum_score</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>minimum_score</name> <operator>=</operator> <name>DEFAULT_RENAME_SCORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>single_follow</name></name> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>single_follow</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>rename_empty</name></name> <operator>&amp;&amp;</operator>

<call><name>is_empty_blob_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>add_rename_dst</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"skipping rename detection, detected"</literal>

<literal type="string">" duplicate destination '%s'"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>rename_empty</name></name> <operator>&amp;&amp;</operator>

<call><name>is_empty_blob_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>broken_pair</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>rename_used</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>register_rename_src</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>detect_rename</name> <operator>==</operator> <name>DIFF_DETECT_COPY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>rename_used</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_rename_src</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rename_dst_nr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>rename_src_nr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rename_count</name> <operator>=</operator> <call><name>find_exact_renames</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minimum_score</name> <operator>==</operator> <name>MAX_SCORE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_create</name> <operator>=</operator> <operator>(</operator><name>rename_dst_nr</name> <operator>-</operator> <name>rename_count</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_create</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>too_many_rename_candidates</name><argument_list>(<argument><expr><name>num_create</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<goto>goto <name>cleanup</name>;</goto>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>degraded_cc_to_c</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>skip_unmodified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>show_rename_progress</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Performing inexact rename detection"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>rename_dst_nr</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>rename_src_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><call><name>st_mult</name><argument_list>(<argument><expr><name>NUM_CANDIDATE_PER_DST</name></expr></argument>, <argument><expr><name>num_create</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dst_cnt</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rename_dst_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name> <init>= <expr><name><name>rename_dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>two</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_score</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rename_dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pair</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>mx</name><index>[<expr><name>dst_cnt</name> <operator>*</operator> <name>NUM_CANDIDATE_PER_DST</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_CANDIDATE_PER_DST</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rename_src_nr</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name> <init>= <expr><name><name>rename_src</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_score</name></name></type> <name>this_src</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_unmodified</name> <operator>&amp;&amp;</operator>

<call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name><name>rename_src</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>this_src</name><operator>.</operator><name>score</name></name> <operator>=</operator> <call><name>estimate_similarity</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>,

<argument><expr><name>minimum_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this_src</name><operator>.</operator><name>name_score</name></name> <operator>=</operator> <call><name>basename_same</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this_src</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this_src</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_if_better</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_blob</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_blob</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst_cnt</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>rename_src_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STABLE_QSORT</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>dst_cnt</name> <operator>*</operator> <name>NUM_CANDIDATE_PER_DST</name></expr></argument>, <argument><expr><name>score_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rename_count</name> <operator>+=</operator> <call><name>find_renames</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>dst_cnt</name></expr></argument>, <argument><expr><name>minimum_score</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>detect_rename</name> <operator>==</operator> <name>DIFF_DETECT_COPY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rename_count</name> <operator>+=</operator> <call><name>find_renames</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>dst_cnt</name></expr></argument>, <argument><expr><name>minimum_score</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair_to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_rename_dst</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>locate_rename_dst</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>pair</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pair_to_free</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_BROKEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_rename_dst</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>locate_rename_dst</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>pair</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pair_to_free</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>rename_used</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pair_to_free</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pair_to_free</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pair_to_free</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pair_to_free</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name>pair_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>diff_debug_queue</name><argument_list>(<argument><expr><literal type="string">"done copying original"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>outq</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_debug_queue</name><argument_list>(<argument><expr><literal type="string">"done collapsing"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rename_dst_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name><name>rename_dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>rename_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rename_dst_nr</name> <operator>=</operator> <name>rename_dst_alloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>rename_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rename_src_nr</name> <operator>=</operator> <name>rename_src_alloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

</unit>
