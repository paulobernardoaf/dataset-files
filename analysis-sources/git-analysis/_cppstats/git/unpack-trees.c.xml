<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\unpack-trees.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache-tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unpack-trees.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"split-index.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fsmonitor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"promisor-remote.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>unpack_plumbing_errors</name><index>[<expr><name>NB_UNPACK_TREES_ERROR_TYPES</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Entry '%s' would be overwritten by merge. Cannot merge."</literal></expr>,

<expr><literal type="string">"Entry '%s' not uptodate. Cannot merge."</literal></expr>,

<expr><literal type="string">"Updating '%s' would lose untracked files in it"</literal></expr>,

<expr><literal type="string">"Untracked working tree file '%s' would be overwritten by merge."</literal></expr>,

<expr><literal type="string">"Untracked working tree file '%s' would be removed by merge."</literal></expr>,

<expr><literal type="string">"Entry '%s' overlaps with '%s'. Cannot bind."</literal></expr>,

<expr><literal type="string">"Entry '%s' not uptodate. Cannot update sparse checkout."</literal></expr>,

<expr><literal type="string">"Working tree file '%s' would be overwritten by sparse checkout update."</literal></expr>,

<expr><literal type="string">"Working tree file '%s' would be removed by sparse checkout update."</literal></expr>,

<expr><literal type="string">"Submodule '%s' cannot checkout new HEAD."</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRORMSG</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((o) &amp;&amp; (o)-&gt;msgs[(type)]) ? ((o)-&gt;msgs[(type)]) : (unpack_plumbing_errors[(type)]) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>super_prefixed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>STRBUF_INIT</name></expr>, <expr><name>STRBUF_INIT</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>super_prefix_len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>idx</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>super_prefix_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>super_prefix</name> <init>= <expr><call><name>get_super_prefix</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>super_prefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>super_prefix_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>super_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>super_prefix_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>super_prefix_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>idx</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>super_prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>buf</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>setup_unpack_trees_porcelain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msgs</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>msgs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>msgs_to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"checkout"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your local changes to the following files would be overwritten by checkout:\n%%s"</literal>

<literal type="string">"Please commit your changes or stash them before you switch branches."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your local changes to the following files would be overwritten by checkout:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your local changes to the following files would be overwritten by merge:\n%%s"</literal>

<literal type="string">"Please commit your changes or stash them before you merge."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your local changes to the following files would be overwritten by merge:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your local changes to the following files would be overwritten by %s:\n%%s"</literal>

<literal type="string">"Please commit your changes or stash them before you %s."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Your local changes to the following files would be overwritten by %s:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_WOULD_OVERWRITE</name></expr>]</index></name> <operator>=</operator> <name><name>msgs</name><index>[<expr><name>ERROR_NOT_UPTODATE_FILE</name></expr>]</index></name> <operator>=</operator>

<call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>msgs_to_free</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_NOT_UPTODATE_DIR</name></expr>]</index></name> <operator>=</operator>

<call><name>_</name><argument_list>(<argument><expr><literal type="string">"Updating the following directories would lose untracked files in them:\n%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"checkout"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be removed by checkout:\n%%s"</literal>

<literal type="string">"Please move or remove them before you switch branches."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be removed by checkout:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be removed by merge:\n%%s"</literal>

<literal type="string">"Please move or remove them before you merge."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be removed by merge:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be removed by %s:\n%%s"</literal>

<literal type="string">"Please move or remove them before you %s."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be removed by %s:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_WOULD_LOSE_UNTRACKED_REMOVED</name></expr>]</index></name> <operator>=</operator>

<call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>msgs_to_free</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"checkout"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be overwritten by checkout:\n%%s"</literal>

<literal type="string">"Please move or remove them before you switch branches."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be overwritten by checkout:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be overwritten by merge:\n%%s"</literal>

<literal type="string">"Please move or remove them before you merge."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be overwritten by merge:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <ternary><condition><expr><name>advice_commit_before_merge</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be overwritten by %s:\n%%s"</literal>

<literal type="string">"Please move or remove them before you %s."</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following untracked working tree files would be overwritten by %s:\n%%s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN</name></expr>]</index></name> <operator>=</operator>

<call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>msgs_to_free</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_BIND_OVERLAP</name></expr>]</index></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Entry '%s' overlaps with '%s'. Cannot bind."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_SPARSE_NOT_UPTODATE_FILE</name></expr>]</index></name> <operator>=</operator>

<call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot update sparse checkout: the following entries are not up to date:\n%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_WOULD_LOSE_ORPHANED_OVERWRITTEN</name></expr>]</index></name> <operator>=</operator>

<call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following working tree files would be overwritten by sparse checkout update:\n%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_WOULD_LOSE_ORPHANED_REMOVED</name></expr>]</index></name> <operator>=</operator>

<call><name>_</name><argument_list>(<argument><expr><literal type="string">"The following working tree files would be removed by sparse checkout update:\n%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>ERROR_WOULD_LOSE_SUBMODULE</name></expr>]</index></name> <operator>=</operator>

<call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot update submodule:\n%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>show_all_errors</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>unpack_rejects</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>unpack_rejects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>strdup_strings</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_unpack_trees_porcelain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>msgs_to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>msgs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>msgs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>clear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>clear</name> <operator>|=</operator> <name>CE_HASHED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name> <operator>&amp;</operator> <name>CE_REMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>|=</operator> <name>CE_WT_REMOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>clear</name><operator>)</operator> <operator>|</operator> <name>set</name></expr>;</expr_stmt>

<return>return <expr><call><name>add_index_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>,

<argument><expr><name>ADD_CACHE_OK_TO_ADD</name> <operator>|</operator> <name>ADD_CACHE_OK_TO_REPLACE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>clear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>dup_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_rejected_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type> <name>e</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>show_all_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>ERRORMSG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>super_prefixed</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>unpack_rejects</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_error_msgs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>something_displayed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>NB_UNPACK_TREES_ERROR_TYPES</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>rejects</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>unpack_rejects</name><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rejects</name><operator>-&gt;</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>something_displayed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rejects</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name><name>rejects</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>ERRORMSG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>super_prefixed</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><name>rejects</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>something_displayed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Aborting\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_submodule_move_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_id</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>SUBMODULE_MOVE_HEAD_DRY_RUN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>submodule</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>submodule_from_ce</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SUBMODULE_MOVE_HEAD_FORCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>submodule_move_head</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>old_id</name></expr></argument>, <argument><expr><name>new_id</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_rejected_path</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ERROR_WOULD_LOSE_SUBMODULE</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_gitmodules_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>checkout</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>index_name_pos</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>GITMODULES_FILE</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>GITMODULES_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name> <operator>&amp;&amp;</operator> <name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_WT_REMOVE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>repo_read_gitmodules</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>submodule_free</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>checkout_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>repo_read_gitmodules</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>get_progress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>update</name></name> <operator>||</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>verbose_update</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CE_UPDATE</name> <operator>|</operator> <name>CE_WT_REMOVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>start_delayed_progress</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Updating files"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_collided_checkout_detection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>clone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CE_MATCHED</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_collided_checkout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_MATCHED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_MATCHED</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>list</name><operator>.</operator><name>cmp</name></name> <operator>=</operator> <name>fspathcmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the following paths have collided (e.g. case-sensitive paths\n"</literal>

<literal type="string">"on a case-insensitive filesystem) and only one from the same\n"</literal>

<literal type="string">"colliding group is in the working tree:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" '%s'\n"</literal></expr></argument>, <argument><expr><name><name>list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_updates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout</name></name></type> <name>state</name> <init>= <expr><name>CHECKOUT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace_performance_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>force</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>refresh_cache</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>istate</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clone_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>update</name></name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>dry_run</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_marked_cache_entries</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_performance_leave</name><argument_list>(<argument><expr><literal type="string">"check_updates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>clone</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_collided_checkout_detection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>get_progress</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_attr_set_direction</name><argument_list>(<argument><expr><name>GIT_ATTR_CHECKOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>should_update_submodules</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>load_gitmodules_file</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_WT_REMOVE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><operator>++</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>remove_marked_cache_entries</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_scheduled_dirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>should_update_submodules</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>load_gitmodules_file</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>enable_delayed_checkout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_promisor_remote</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>to_fetch</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE</name><operator>)</operator> <operator>||</operator>

<call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>OBJECT_INFO_FOR_PREFETCH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to_fetch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>to_fetch</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>promisor_remote_get_direct</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><name><name>to_fetch</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>to_fetch</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to_fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_WT_REMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"both update and delete flags are set on %s"</literal></expr></argument>,

<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><operator>++</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_UPDATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>checkout_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>finish_delayed_checkout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_attr_set_direction</name><argument_list>(<argument><expr><name>GIT_ATTR_CHECKIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>clone</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>report_collided_checkout</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_performance_leave</name><argument_list>(<argument><expr><literal type="string">"check_updates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>errs</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>verify_uptodate_sparse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>verify_absent_sparse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_sparse_checkout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>was_skip_worktree</name> <init>= <expr><call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_NEW_SKIP_WORKTREE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_SKIP_WORKTREE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_SKIP_WORKTREE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_skip_worktree</name> <operator>!=</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UPDATE_IN_BASE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_fsmonitor_invalid</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_changed</name></name> <operator>|=</operator> <name>CE_ENTRY_CHANGED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_skip_worktree</name> <operator>&amp;&amp;</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_UPDATE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_REMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_WT_REMOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_skip_worktree</name> <operator>&amp;&amp;</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>verify_uptodate_sparse</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_WT_REMOVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_UPDATE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_skip_worktree</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>verify_absent_sparse</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UPDATE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>call_unpack_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>o</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_ce_used</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UNPACKED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr>]</index></name> <operator>==</operator> <name>ce</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bottom</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>bottom</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;</operator> <name>CE_UNPACKED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bottom</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_all_ce_unused</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ce_flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CE_UNPACKED</name> <operator>|</operator> <name>CE_ADDED</name> <operator>|</operator> <name>CE_NEW_SKIP_WORKTREE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>locate_in_src_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>index_name_pos</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_ce_used_same_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <call><name>locate_in_src_index</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mark_ce_used</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>next_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UNPACKED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ce</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_same_unmerged</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>index_name_pos</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"programming error in a caller of mark_ce_used_same_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <operator>-</operator><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_ce_used</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_index_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><name>MAX_UNPACK_TREES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_ce_used</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>skip_unmerged</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>call_unpack_fn</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_ce_used_same_name</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>find_cache_pos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_cache_bottom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>diff_index_cached</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>switch_cache_bottom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>diff_index_cached</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>find_cache_pos</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>are_same_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>name_j</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>name_k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>name_j</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>name_k</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>name_j</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name_k</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>all_trees_same_as_cache_tree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dirmask</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>names</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>merge</name></name> <operator>||</operator> <name>dirmask</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>are_same_oid</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>names</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><call><name>cache_tree_matches_traversal</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache_tree</name></name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>index_pos_by_traverse_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>names</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_make_traverse_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>names</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>names</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>index_name_pos</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"This is a directory and should not exist in index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>||</operator>

<operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"pos %d doesn't point to the first entry of %s in index"</literal></expr></argument>,

<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>traverse_by_cache_tree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_entries</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr_names</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><name>MAX_UNPACK_TREES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>tree_ce</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ce_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"We need cache-tree to do this optimization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_ce_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_ce_len</name> <operator>=</operator> <call><name>cache_entry_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_ce_len</name> <operator>&gt;</operator> <name>ce_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_ce_len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tree_ce</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>tree_ce</name></expr></argument>, <argument><expr><name>new_ce_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tree_ce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>new_ce_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ce_len</name> <operator>=</operator> <name>new_ce_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tree_ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <call><name>create_ce_flags</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <name>nr_names</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>tree_ce</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tree_ce</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ce_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tree_ce</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree_ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tree_ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>call_unpack_fn</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>cache_entry</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tree_ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mark_ce_used</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tree_ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>debug_unpack</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unpacked %d entries from %s to %s using cache-tree\n"</literal></expr></argument>,

<argument><expr><name>nr_entries</name></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name> <operator>+</operator> <name>nr_entries</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>traverse_trees_recursive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dirmask</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>df_conflicts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>names</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>t</name><index>[<expr><name>MAX_UNPACK_TREES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><name>MAX_UNPACK_TREES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>traverse_info</name></name></type> <name>newinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_entries</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nr_entries</name> <operator>=</operator> <call><name>all_trees_same_as_cache_tree</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>dirmask</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr_entries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>index_pos_by_traverse_info</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>merge</name></name> <operator>||</operator> <name>df_conflicts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Wrong condition to get here buddy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>traverse_by_cache_tree</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>nr_entries</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>names</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>newinfo</name> <operator>=</operator> <operator>*</operator><name>info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newinfo</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newinfo</name><operator>.</operator><name>pathspec</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pathspec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newinfo</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newinfo</name><operator>.</operator><name>namelen</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pathlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newinfo</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newinfo</name><operator>.</operator><name>pathlen</name></name> <operator>=</operator> <call><name>st_add3</name><argument_list>(<argument><expr><name><name>newinfo</name><operator>.</operator><name>pathlen</name></name></expr></argument>, <argument><expr><call><name>tree_entry_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newinfo</name><operator>.</operator><name>df_conflicts</name></name> <operator>|=</operator> <name>df_conflicts</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dirmask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>are_same_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>names</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>are_same_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>names</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirmask</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oid</name> <operator>=</operator> <operator>&amp;</operator><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>nr_buf</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <call><name>switch_cache_bottom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>traverse_trees</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_cache_bottom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newinfo</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr_buf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_compare_entry_piecewise</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name></decl>, <decl><type ref="prev"/><name>ce_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ce_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>do_compare_entry_piecewise</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>namelen</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pathlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ce_len</name> <operator>=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ce_len</name> <operator>&lt;</operator> <name>pathlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ce_len</name> <operator>-=</operator> <name>pathlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ce_name</name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>pathlen</name></expr>;</expr_stmt>

<return>return <expr><call><name>df_name_compare</name><argument_list>(<argument><expr><name>ce_name</name></expr></argument>, <argument><expr><name>ce_len</name></expr></argument>, <argument><expr><name>S_IFREG</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_compare_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name></decl>, <decl><type ref="prev"/><name>ce_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ce_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>traverse_path</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>do_compare_entry_piecewise</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>traverse_path</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pathlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ce_len</name> <operator>=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ce_len</name> <operator>&lt;</operator> <name>pathlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ce_len</name> <operator>-=</operator> <name>pathlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ce_name</name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>pathlen</name></expr>;</expr_stmt>

<return>return <expr><call><name>df_name_compare</name><argument_list>(<argument><expr><name>ce_name</name></expr></argument>, <argument><expr><name>ce_len</name></expr></argument>, <argument><expr><name>S_IFREG</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>do_compare_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>traverse_path_len</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>tree_entry_len</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ce_in_traverse_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_compare_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>namelen</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>pathlen</name></name> <operator>&lt;</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>create_ce_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is_transient</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>traverse_path_len</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>tree_entry_len</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>=

<expr><ternary><condition><expr><name>is_transient</name></expr> ?</condition><then>

<expr><call><name>make_empty_transient_cache_entry</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>make_empty_cache_entry</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>=</operator> <call><name>create_ce_mode</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <call><name>create_ce_flags</name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_traverse_path</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ce</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_nondirectories</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dirmask</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>names</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>conflicts</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>df_conflicts</name></name> <operator>|</operator> <name>dirmask</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <name>dirmask</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name> <init>= <expr><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>conflicts</name> <operator>&amp;</operator> <name>bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>]</index></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>bit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stage</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>stage</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>]</index></name> <operator>=</operator> <call><name>create_ce_entry</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>names</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>call_unpack_fn</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>cache_entry</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>,

<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ce</name> <operator>!=</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_failed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>discard_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>exiting_early</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_cache_pos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>p_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pfxlen</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>pathlen</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ce_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ce_slash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>ce_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UNPACKED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_in_traverse_path</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>traverse_path</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>traverse_path</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ce_name</name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>pfxlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ce_slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ce_name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ce_slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ce_len</name> <operator>=</operator> <name>ce_slash</name> <operator>-</operator> <name>ce_name</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ce_len</name> <operator>=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pfxlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>name_compare</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_len</name></expr></argument>, <argument><expr><name>ce_name</name></expr></argument>, <argument><expr><name>ce_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ce_slash</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>p_len</name> <operator>&lt;</operator> <name>ce_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ce_name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>ce_name</name><index>[<expr><name>p_len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<break>break;</break>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>find_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>find_cache_pos</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>debug_path</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_name_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ent#%d %06o %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>mode</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><literal type="string">"(missing)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_unpack_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dirmask</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>names</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"* unpack mask %lu, dirmask %lu, cnt %d "</literal></expr></argument>,

<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>dirmask</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_path</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>debug_name_entry</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>names</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dirmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><name>MAX_UNPACK_TREES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>names</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>debug_unpack</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>debug_unpack_callback</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>dirmask</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>diff_index_cached</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>next_cache_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>find_cache_entry</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compare_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unpack_index_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>unpack_failed</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>skip_unmerged</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_same_unmerged</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mask</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_nondirectories</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>dirmask</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>merge</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_ce_used_same_name</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_ce_used</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dirmask</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>diff_index_cached</name></name> <operator>&amp;&amp;</operator>

<name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dirmask</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>names</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>matches</name></decl>;</decl_stmt>

<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>cache_tree_matches_traversal</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache_tree</name></name></expr></argument>,

<argument><expr><name>names</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>cache_bottom</name></name> <operator>+=</operator> <name>matches</name></expr>;</expr_stmt>

<return>return <expr><name>mask</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>traverse_trees_recursive</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>dirmask</name></expr></argument>, <argument><expr><name>mask</name> <operator>&amp;</operator> <operator>~</operator><name>dirmask</name></expr></argument>,

<argument><expr><name>names</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>mask</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mask</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>clear_ce_flags_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>select_mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clear_mask</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pattern_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>pattern_match_result</name></name></type> <name>default_match</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>progress_nr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>clear_ce_flags_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>select_mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clear_mask</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pattern_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>pattern_match_result</name></name></type> <name>default_match</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>progress_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dtype</name> <init>= <expr><name>DT_DIR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>pattern_match_result</name></name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>orig_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>orig_ret</name> <operator>=</operator> <call><name>path_matches_pattern_list</name><argument_list>(<argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,

<argument><expr><name>basename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>orig_ret</name> <operator>==</operator> <name>UNDECIDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>default_match</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>orig_ret</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>cache_end</name> <operator>=</operator> <name>cache</name></expr>;</init> <condition><expr><name>cache_end</name> <operator>!=</operator> <name>cache</name> <operator>+</operator> <name>nr</name></expr>;</condition> <incr><expr><name>cache_end</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><operator>*</operator><name>cache_end</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>use_cone_patterns</name></name> <operator>&amp;&amp;</operator> <name>orig_ret</name> <operator>==</operator> <name>MATCHED_RECURSIVE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ce</name> <init>= <expr><name>cache</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>cache_end</name> <operator>-</operator> <name>cache</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ce</name> <operator>&lt;</operator> <name>cache_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ce</name><operator>)</operator><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>clear_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ce</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pl</name><operator>-&gt;</operator><name>use_cone_patterns</name></name> <operator>&amp;&amp;</operator> <name>orig_ret</name> <operator>==</operator> <name>NOT_MATCHED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>cache_end</name> <operator>-</operator> <name>cache</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>clear_ce_flags_1</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cache_end</name> <operator>-</operator> <name>cache</name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>,

<argument><expr><name>select_mask</name></expr></argument>, <argument><expr><name>clear_mask</name></expr></argument>,

<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,

<argument><expr><name>progress_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>clear_ce_flags_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>select_mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clear_mask</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pattern_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>pattern_match_result</name></name></type> <name>default_match</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>progress_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache_end</name> <init>= <expr><ternary><condition><expr><name>nr</name></expr> ?</condition><then> <expr><name>cache</name> <operator>+</operator> <name>nr</name></expr> </then><else>: <expr><name>cache</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>cache</name> <operator>!=</operator> <name>cache_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><operator>*</operator><name>cache</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>dtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>pattern_match_result</name></name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>progress_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>select_mask</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>select_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cache</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>progress_nr</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prefix</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name><name>prefix</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>processed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slash</name> <operator>-</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>processed</name> <operator>=</operator> <call><name>clear_ce_flags_dir</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cache_end</name> <operator>-</operator> <name>cache</name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>,

<argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>prefix</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><name>select_mask</name></expr></argument>, <argument><expr><name>clear_mask</name></expr></argument>,

<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>default_match</name></expr></argument>,

<argument><expr><name>progress_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>processed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cache</name> <operator>+=</operator> <name>processed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>progress_nr</name> <operator>+=</operator> <name>processed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>processed</name> <operator>=</operator> <call><name>clear_ce_flags_1</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cache_end</name> <operator>-</operator> <name>cache</name></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>,

<argument><expr><name>select_mask</name></expr></argument>, <argument><expr><name>clear_mask</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>,

<argument><expr><name>default_match</name></expr></argument>, <argument><expr><name>progress_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cache</name> <operator>+=</operator> <name>processed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>progress_nr</name> <operator>+=</operator> <name>processed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dtype</name> <operator>=</operator> <call><name>ce_to_dtype</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>path_matches_pattern_list</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>UNDECIDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>default_match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MATCHED</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>MATCHED_RECURSIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>clear_mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cache</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>progress_nr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>progress_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nr</name> <operator>-</operator> <operator>(</operator><name>cache_end</name> <operator>-</operator> <name>cache</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>clear_ce_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>select_mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clear_mask</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pattern_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>show_progress</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>prefix</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>label</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_progress</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>istate</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Updating index flags"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"clear_ce_flags(0x%08lx,0x%08lx)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>select_mask</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>clear_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"unpack_trees"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>clear_ce_flags_1</name><argument_list>(<argument><expr><name>istate</name></expr></argument>,

<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>,

<argument><expr><name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prefix</name></expr></argument>,

<argument><expr><name>select_mask</name></expr></argument>, <argument><expr><name>clear_mask</name></expr></argument>,

<argument><expr><name>pl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"unpack_trees"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>istate</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_new_skip_worktree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pattern_list</name></name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>select_flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_wt_flag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>show_progress</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>select_flag</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>select_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_CONFLICTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>skip_wt_flag</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>skip_wt_flag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>clear_ce_flags</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>select_flag</name></expr></argument>, <argument><expr><name>skip_wt_flag</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>, <argument><expr><name>show_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>verify_absent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>unpack_trees</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>dfc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pattern_list</name></name></type> <name>pl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAX_UNPACK_TREES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unpack_trees takes at most %d trees"</literal></expr></argument>, <argument><expr><name>MAX_UNPACK_TREES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_performance_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>core_apply_sparse_checkout</name> <operator>||</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>skip_sparse_checkout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>skip_sparse_checkout</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>pl</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sparse</name> <init>= <expr><call><name>git_pathdup</name><argument_list>(<argument><expr><literal type="string">"info/sparse-checkout"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pl</name><operator>.</operator><name>use_cone_patterns</name></name> <operator>=</operator> <name>core_sparse_checkout_cone</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_patterns_from_file_to_list</name><argument_list>(<argument><expr><name>sparse</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>skip_sparse_checkout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>pl</name></name> <operator>=</operator> <operator>&amp;</operator><name>pl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>timestamp</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>timestamp</name><operator>.</operator><name>nsec</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>nsec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>split_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>split_index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>dst_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>split_index</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>split_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>split_index</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>split_index</name></name> <operator>=</operator> <call><name>init_split_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>merge_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_all_ce_unused</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>fsmonitor_last_update</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>fsmonitor_last_update</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>skip_sparse_checkout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_new_skip_worktree</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>CE_NEW_SKIP_WORKTREE</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>verbose_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dfc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dfc</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cache_entry_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name> <operator>=</operator> <name>dfc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>prefix</name></name></expr> ?</condition><then> <expr><name><name>o</name><operator>-&gt;</operator><name>prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>traverse_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_traverse_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>unpack_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>show_all_errors</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>show_all_errors</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>pathspec</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>pathspec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><call><name>next_cache_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_in_traverse_path</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_index_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>return_failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trace_performance_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>traverse_trees</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_performance_leave</name><argument_list>(<argument><expr><literal type="string">"traverse_trees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>return_failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><call><name>next_cache_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_index_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>return_failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mark_all_ce_unused</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>trivial_merges_only</name></name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>nontrivial_merge</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unpack_failed</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Merge requires file-level merging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>skip_sparse_checkout</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>empty_worktree</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mark_new_skip_worktree</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>,

<argument><expr><name>CE_ADDED</name></expr></argument>, <argument><expr><name>CE_SKIP_WORKTREE</name> <operator>|</operator> <name>CE_NEW_SKIP_WORKTREE</name></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>verbose_update</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>cache_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_ADDED</name> <operator>&amp;&amp;</operator>

<call><name>verify_absent</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>show_all_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>return_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>apply_sparse_checkout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>show_all_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>return_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>empty_worktree</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>return_failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>cache_nr</name></name> <operator>&amp;&amp;</operator> <name>empty_worktree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unpack_failed</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Sparse checkout leaves no entry on working directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>check_updates</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>dst_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>move_index_extensions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_CHECK_CACHE_TREE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cache_tree_verify</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>cache_tree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>cache_tree</name></name> <operator>=</operator> <call><name>cache_tree</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cache_tree_fully_valid</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>cache_tree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cache_tree_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>,

<argument><expr><name>WRITE_TREE_SILENT</name> <operator>|</operator>

<name>WRITE_TREE_REPAIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>updated_workdir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_index</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>dst_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>o</name><operator>-&gt;</operator><name>dst_index</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>discard_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>trace_performance_leave</name><argument_list>(<argument><expr><literal type="string">"unpack_trees"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>keep_pattern_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_pattern_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<label><name>return_failed</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>show_all_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>display_error_msgs</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mark_all_ce_unused</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unpack_failed</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>exiting_early</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reject_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>add_rejected_path</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ERROR_WOULD_OVERWRITE</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>same</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name>a</name> <operator>!=</operator> <operator>!</operator><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|</operator> <name><name>b</name><operator>-&gt;</operator><name>ce_flags</name></name><operator>)</operator> <operator>&amp;</operator> <name>CE_CONFLICTED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>&amp;&amp;</operator>

<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_uptodate_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type> <name>error_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>index_only</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_VALID</name><operator>)</operator> <operator>||</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>reset</name></name> <operator>||</operator> <call><name>ce_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>CE_MATCH_IGNORE_VALID</name><operator>|</operator><name>CE_MATCH_IGNORE_SKIP_WORKTREE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>changed</name> <init>= <expr><call><name>ie_match_stat</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>submodule_from_ce</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>check_submodule_move_head</name><argument_list>(<argument><expr><name>ce</name></expr></argument>,

<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_rejected_path</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>error_type</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>add_rejected_path</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>error_type</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>verify_uptodate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>skip_sparse_checkout</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_NEW_SKIP_WORKTREE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>verify_uptodate_1</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>ERROR_NOT_UPTODATE_FILE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_uptodate_sparse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>verify_uptodate_1</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>ERROR_SPARSE_NOT_UPTODATE_FILE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_ce_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cache_tree_invalidate_path</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>untracked_cache_invalidate_path</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_clean_submodule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_sha1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>submodule_from_ce</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>check_submodule_move_head</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>old_sha1</name></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_clean_subdirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_struct</name></name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub_head</name> <init>= <expr><call><name>resolve_gitlink_ref</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub_head</name> <operator>&amp;&amp;</operator> <call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>verify_clean_submodule</name><argument_list>(<argument><expr><ternary><condition><expr><name>sub_head</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>locate_in_src_index</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce2</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>namelen</name> <operator>||</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ce2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>ce2</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>verify_uptodate</name><argument_list>(<argument><expr><name>ce2</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ce2</name></expr></argument>, <argument><expr><name>CE_REMOVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_ce_path</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_ce_used</name><argument_list>(<argument><expr><name>ce2</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pathbuf</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%.*s/"</literal></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>exclude_per_dir</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>dir</name><operator>-&gt;</operator><name>exclude_per_dir</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>read_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>namelen</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_rejected_path</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ERROR_NOT_UPTODATE_DIR</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>icase_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>index_file_exists</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>src</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ie_match_stat</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>CE_MATCH_IGNORE_VALID</name><operator>|</operator><name>CE_MATCH_IGNORE_SKIP_WORKTREE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_ok_to_remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dtype</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type> <name>error_type</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_case</name> <operator>&amp;&amp;</operator> <call><name>icase_exists</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>dir</name></name> <operator>&amp;&amp;</operator>

<call><name>is_excluded</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>verify_clean_subdirectory</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>index_file_exists</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_REMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>add_rejected_path</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>error_type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_absent_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type> <name>error_type</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>index_only</name></name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>reset</name></name> <operator>||</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>update</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>check_leading_path</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"cannot stat '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>submodule_from_ce</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_submodule_move_head</name><argument_list>(<argument><expr><name>ce</name></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_ok_to_remove</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>DT_UNKNOWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>error_type</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"cannot stat '%s'"</literal></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>submodule_from_ce</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>check_submodule_move_head</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>check_ok_to_remove</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ce_to_dtype</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>,

<argument><expr><name>error_type</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_absent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type> <name>error_type</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>skip_sparse_checkout</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_NEW_SKIP_WORKTREE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>verify_absent_1</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>error_type</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_absent_sparse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type> <name>error_type</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>unpack_trees_error_types</name></name></type> <name>orphaned_error</name> <init>= <expr><name>error_type</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>orphaned_error</name> <operator>==</operator> <name>ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>orphaned_error</name> <operator>=</operator> <name>ERROR_WOULD_LOSE_ORPHANED_OVERWRITTEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>verify_absent_1</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>orphaned_error</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>merged_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>update</name> <init>= <expr><name>CE_UPDATE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>merge</name> <init>= <expr><call><name>dup_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>update</name> <operator>|=</operator> <name>CE_ADDED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>merge</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_NEW_SKIP_WORKTREE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>verify_absent</name><argument_list>(<argument><expr><name>merge</name></expr></argument>,

<argument><expr><name>ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>invalidate_ce_path</name><argument_list>(<argument><expr><name>merge</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>submodule_from_ce</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_exists</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>check_submodule_move_head</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>old</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_CONFLICTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>same</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_cache_entry</name><argument_list>(<argument><expr><name>merge</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>update</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>verify_uptodate</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>update</name> <operator>|=</operator> <name><name>old</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CE_SKIP_WORKTREE</name> <operator>|</operator> <name>CE_NEW_SKIP_WORKTREE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_ce_path</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>submodule_from_ce</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_exists</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>check_submodule_move_head</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>invalidate_ce_path</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>merge</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>CE_STAGEMASK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>deleted_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>verify_absent</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ERROR_WOULD_LOSE_UNTRACKED_REMOVED</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>old</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_CONFLICTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>verify_uptodate</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>CE_REMOVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_ce_path</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keep_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invalidate_ce_path</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DBRT_DEBUG</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_stage_entry</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"%s (missing)\n"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"%s%06o %s %d\t%s\n"</literal></expr></argument>,

<argument><expr><name>label</name></expr></argument>,

<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>threeway_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>stages</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><name><name>stages</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>head_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remote_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>df_conflict_head</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>df_conflict_remote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>any_anc_missing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_anc_exists</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>any_anc_missing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>no_anc_exists</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>stages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>stages</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>df_conflict_head</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remote</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>df_conflict_remote</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>remote</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>same</name><argument_list>(<argument><expr><name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>head_match</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>same</name><argument_list>(<argument><expr><name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>remote_match</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remote</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>df_conflict_head</name> <operator>&amp;&amp;</operator> <name>head_match</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>remote_match</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>same</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>same</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>reject_merge</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>same</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>reject_merge</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>head</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>same</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>df_conflict_remote</name> <operator>&amp;&amp;</operator> <name>remote_match</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>head_match</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>head</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>remote</name> <operator>&amp;&amp;</operator> <name>any_anc_missing</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>aggressive</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>head_deleted</name> <init>= <expr><operator>!</operator><name>head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remote_deleted</name> <init>= <expr><operator>!</operator><name>remote</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>head</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>remote</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name>remote</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>head_deleted</name> <operator>&amp;&amp;</operator> <name>remote_deleted</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>head_deleted</name> <operator>&amp;&amp;</operator> <name>remote</name> <operator>&amp;&amp;</operator> <name>remote_match</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>remote_deleted</name> <operator>&amp;&amp;</operator> <name>head</name> <operator>&amp;&amp;</operator> <name>head_match</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>deleted_entry</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ce</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>head_deleted</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>verify_absent</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ERROR_WOULD_LOSE_UNTRACKED_REMOVED</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_anc_exists</name> <operator>&amp;&amp;</operator> <name>head</name> <operator>&amp;&amp;</operator> <name>remote</name> <operator>&amp;&amp;</operator> <call><name>same</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>verify_uptodate</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>nontrivial_merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>head_match</name> <operator>||</operator> <operator>!</operator><name>remote_match</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>head_idx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>keep_entry</name><argument_list>(<argument><expr><name><name>stages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DBRT_DEBUG</name></expr></cpp:if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"read-tree: warning #16 detected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_stage_entry</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"head "</literal></expr></argument>, <argument><expr><name><name>stages</name><index>[<expr><name>head_match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_stage_entry</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"remote "</literal></expr></argument>, <argument><expr><name><name>stages</name><index>[<expr><name>remote_match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>head</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>keep_entry</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remote</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>keep_entry</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>twoway_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>oldtree</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>newtree</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>merge_size</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot do a twoway merge of %d trees"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>merge_size</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oldtree</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldtree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newtree</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newtree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_CONFLICTED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>same</name><argument_list>(<argument><expr><name>oldtree</name></expr></argument>, <argument><expr><name>newtree</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newtree</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>deleted_entry</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>newtree</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>reject_merge</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name>oldtree</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>newtree</name><operator>)</operator> <operator>||</operator> 

<operator>(</operator><operator>!</operator><name>oldtree</name> <operator>&amp;&amp;</operator> <name>newtree</name> <operator>&amp;&amp;</operator>

<call><name>same</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>newtree</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 

<operator>(</operator><name>oldtree</name> <operator>&amp;&amp;</operator> <name>newtree</name> <operator>&amp;&amp;</operator>

<call><name>same</name><argument_list>(<argument><expr><name>oldtree</name></expr></argument>, <argument><expr><name>newtree</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 

<operator>(</operator><name>oldtree</name> <operator>&amp;&amp;</operator> <name>newtree</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>same</name><argument_list>(<argument><expr><name>oldtree</name></expr></argument>, <argument><expr><name>newtree</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 

<call><name>same</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>newtree</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>keep_entry</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oldtree</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>newtree</name> <operator>&amp;&amp;</operator> <call><name>same</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>oldtree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>deleted_entry</name><argument_list>(<argument><expr><name>oldtree</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oldtree</name> <operator>&amp;&amp;</operator> <name>newtree</name> <operator>&amp;&amp;</operator>

<call><name>same</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>oldtree</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>same</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>newtree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>newtree</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>reject_merge</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>newtree</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldtree</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>initial_checkout</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>same</name><argument_list>(<argument><expr><name>oldtree</name></expr></argument>, <argument><expr><name>newtree</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>reject_merge</name><argument_list>(<argument><expr><name>oldtree</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>newtree</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>deleted_entry</name><argument_list>(<argument><expr><name>oldtree</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>bind_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>merge_size</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot do a bind merge of %d trees"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>merge_size</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>quiet</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>:

<expr><call><name>error</name><argument_list>(<argument><expr><call><name>ERRORMSG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ERROR_BIND_OVERLAP</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>super_prefixed</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>super_prefixed</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>keep_entry</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>oneway_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>merge_size</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot do a oneway merge of %d trees"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>merge_size</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name> <operator>||</operator> <name>a</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>df_conflict_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>deleted_entry</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old</name> <operator>&amp;&amp;</operator> <call><name>same</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>update</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>reset</name></name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>update</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ce_uptodate</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>old</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_FSMONITOR_VALID</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>ie_match_stat</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>src_index</name></name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>CE_MATCH_IGNORE_VALID</name><operator>|</operator><name>CE_MATCH_IGNORE_SKIP_WORKTREE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>update</name> <operator>|=</operator> <name>CE_UPDATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>update</name></name> <operator>&amp;&amp;</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>should_update_submodules</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>verify_uptodate</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>update</name> <operator>|=</operator> <name>CE_UPDATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>CE_STAGEMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>merged_entry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
