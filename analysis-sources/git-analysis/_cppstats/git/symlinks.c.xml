<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\symlinks.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>threaded_check_leading_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>threaded_has_dirs_only_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>longest_path_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_b</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>previous_slash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_len</name></decl>, <decl><type ref="prev"/><name>match_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>match_len_prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_len</name> <operator>=</operator> <ternary><condition><expr><name>len_a</name> <operator>&lt;</operator> <name>len_b</name></expr> ?</condition><then> <expr><name>len_a</name></expr> </then><else>: <expr><name>len_b</name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max_len</name> <operator>&amp;&amp;</operator> <name><name>name_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>name_b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_len_prev</name> <operator>=</operator> <name>match_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match_len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>max_len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>len_a</name> <operator>&gt;</operator> <name>len_b</name> <operator>&amp;&amp;</operator> <name><name>name_a</name><index>[<expr><name>len_b</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>len_a</name> <operator>&lt;</operator> <name>len_b</name> <operator>&amp;&amp;</operator> <name><name>name_b</name><index>[<expr><name>len_a</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>len_a</name> <operator>==</operator> <name>len_b</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_len_prev</name> <operator>=</operator> <name>match_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match_len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>previous_slash</name> <operator>=</operator> <name>match_len_prev</name></expr>;</expr_stmt>

<return>return <expr><name>match_len</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>cache_def</name></name></type> <name>default_cache</name> <init>= <expr><name>CACHE_DEF_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reset_lstat_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_DIR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_NOENT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_SYMLINK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_LSTATERR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_ERR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_FULLPATH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lstat_cache_matchlen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>track_flags</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefix_len_stat_func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>match_len</name></decl>, <decl><type ref="prev"/><name>last_slash</name></decl>, <decl><type ref="prev"/><name>last_slash_dir</name></decl>, <decl><type ref="prev"/><name>previous_slash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_flags</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>track_flags</name></name> <operator>!=</operator> <name>track_flags</name> <operator>||</operator>

<name><name>cache</name><operator>-&gt;</operator><name>prefix_len_stat_func</name></name> <operator>!=</operator> <name>prefix_len_stat_func</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_lstat_cache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>track_flags</name></name> <operator>=</operator> <name>track_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>prefix_len_stat_func</name></name> <operator>=</operator> <name>prefix_len_stat_func</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match_len</name> <operator>=</operator> <name>last_slash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>match_len</name> <operator>=</operator> <name>last_slash</name> <operator>=</operator>

<call><name>longest_path_match</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>previous_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>track_flags</name> <operator>&amp;</operator> <operator>(</operator><name>FL_NOENT</name><operator>|</operator><name>FL_SYMLINK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>track_flags</name> <operator>&amp;</operator> <name>FL_FULLPATH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>match_len</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match_len</name> <operator>=</operator> <name>last_slash</name> <operator>=</operator> <name>previous_slash</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ret_flags</name> <operator>&amp;&amp;</operator> <name>match_len</name> <operator>==</operator> <name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>match_len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>=</operator> <name>track_flags</name> <operator>&amp;</operator> <name>FL_DIR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ret_flags</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <name>match_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>match_len</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>=</operator> <name>FL_DIR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_slash_dir</name> <operator>=</operator> <name>last_slash</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>match_len</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name><index>[<expr><name>match_len</name></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><name>match_len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>match_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>match_len</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>match_len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>match_len</name> <operator>&gt;=</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>track_flags</name> <operator>&amp;</operator> <name>FL_FULLPATH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_slash</name> <operator>=</operator> <name>match_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name><index>[<expr><name>last_slash</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_slash</name> <operator>&lt;=</operator> <name>prefix_len_stat_func</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>=</operator> <name>FL_LSTATERR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>|=</operator> <name>FL_NOENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_slash_dir</name> <operator>=</operator> <name>last_slash</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>=</operator> <name>FL_SYMLINK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>=</operator> <name>FL_ERR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<expr_stmt><expr><name>save_flags</name> <operator>=</operator> <operator>*</operator><name>ret_flags</name> <operator>&amp;</operator> <name>track_flags</name> <operator>&amp;</operator> <operator>(</operator><name>FL_NOENT</name><operator>|</operator><name>FL_SYMLINK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_flags</name> <operator>&amp;&amp;</operator> <name>last_slash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name><index>[<expr><name>last_slash</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>last_slash</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>save_flags</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>track_flags</name> <operator>&amp;</operator> <name>FL_DIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>last_slash_dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>buf</name><index>[<expr><name>last_slash_dir</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>last_slash_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FL_DIR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>reset_lstat_cache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>match_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lstat_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>track_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix_len_stat_func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>lstat_cache_matchlen</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>track_flags</name></expr></argument>,

<argument><expr><name>prefix_len_stat_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>flags</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ONLY_LSTAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>threaded_has_symlink_leading_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lstat_cache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>FL_SYMLINK</name><operator>|</operator><name>FL_DIR</name></expr></argument>, <argument><expr><name>USE_ONLY_LSTAT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FL_SYMLINK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>has_symlink_leading_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>threaded_has_symlink_leading_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_cache</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_leading_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>threaded_check_leading_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_cache</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>threaded_check_leading_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match_len</name> <init>= <expr><call><name>lstat_cache_matchlen</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>,

<argument><expr><name>FL_SYMLINK</name><operator>|</operator><name>FL_NOENT</name><operator>|</operator><name>FL_DIR</name></expr></argument>, <argument><expr><name>USE_ONLY_LSTAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FL_NOENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FL_DIR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>match_len</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>has_dirs_only_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>threaded_has_dirs_only_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_cache</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>threaded_has_dirs_only_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lstat_cache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>FL_DIR</name><operator>|</operator><name>FL_FULLPATH</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>

<name>FL_DIR</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>removal</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_remove_scheduled_dirs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>removal</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>new_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>removal</name><operator>.</operator><name>buf</name><index>[<expr><name><name>removal</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><name><name>removal</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>removal</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>removal</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>new_len</name> <operator>&amp;&amp;</operator>

<name><name>removal</name><operator>.</operator><name>buf</name><index>[<expr><name><name>removal</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition>;</do>

</block_content>}</block></while>

<expr_stmt><expr><name><name>removal</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>schedule_dir_for_removal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>match_len</name></decl>, <decl><type ref="prev"/><name>last_slash</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>previous_slash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>match_len</name> <operator>=</operator> <name>last_slash</name> <operator>=</operator> <name>i</name> <operator>=</operator>

<call><name>longest_path_match</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>removal</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>removal</name><operator>.</operator><name>len</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>previous_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_slash</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>match_len</name> <operator>&lt;</operator> <name>last_slash</name> <operator>&amp;&amp;</operator> <name>match_len</name> <operator>&lt;</operator> <name><name>removal</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_remove_scheduled_dirs</name><argument_list>(<argument><expr><name>match_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match_len</name> <operator>&lt;</operator> <name>last_slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>removal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><name>match_len</name></expr>]</index></name></expr></argument>, <argument><expr><name>last_slash</name> <operator>-</operator> <name>match_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_scheduled_dirs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_remove_scheduled_dirs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
