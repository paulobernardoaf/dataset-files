<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\urlmatch.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urlmatch.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_ALPHA</name></cpp:macro> <cpp:value>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_DIGIT</name></cpp:macro> <cpp:value>"0123456789"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_ALPHADIGIT</name></cpp:macro> <cpp:value>URL_ALPHA URL_DIGIT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_SCHEME_CHARS</name></cpp:macro> <cpp:value>URL_ALPHADIGIT "+.-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_HOST_CHARS</name></cpp:macro> <cpp:value>URL_ALPHADIGIT ".-[:]"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_UNSAFE_CHARS</name></cpp:macro> <cpp:value>" &lt;&gt;\"%{}|\\^`"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_GEN_RESERVED</name></cpp:macro> <cpp:value>":/?#[]@"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_SUB_RESERVED</name></cpp:macro> <cpp:value>"!$&amp;'()*+,;="</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_RESERVED</name></cpp:macro> <cpp:value>URL_GEN_RESERVED URL_SUB_RESERVED</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>append_normalized_escapes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>from_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>esc_extra</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>esc_ok</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>from_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>from</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_esc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>from_len</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>from_len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>hex2chr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>from</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>from_len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>was_esc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x1F</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x7F</literal> <operator>||</operator>

<call><name>strchr</name><argument_list>(<argument><expr><name>URL_UNSAFE_CHARS</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name>esc_extra</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>esc_extra</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>was_esc</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>esc_ok</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%%%02X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end_of_token</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_host</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>url_info</name></name> <modifier>*</modifier></type><name>url_info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>url_info</name></name> <modifier>*</modifier></type><name>pattern_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name><name>url_info</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>url_info</name><operator>-&gt;</operator><name>host_off</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><name><name>pattern_info</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>pattern_info</name><operator>-&gt;</operator><name>host_off</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>url_len</name> <init>= <expr><name><name>url_info</name><operator>-&gt;</operator><name>host_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pat_len</name> <init>= <expr><name><name>pattern_info</name><operator>-&gt;</operator><name>host_len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>url_len</name> <operator>&amp;&amp;</operator> <name>pat_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url_next</name> <init>= <expr><call><name>end_of_token</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>url_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pat_next</name> <init>= <expr><call><name>end_of_token</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>pat_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pat_next</name> <operator>==</operator> <name>pat</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>pat_next</name> <operator>-</operator> <name>pat</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>url_next</name> <operator>-</operator> <name>url</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>url_next</name> <operator>-</operator> <name>url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>url_next</name> <operator>&lt;</operator> <name>url</name> <operator>+</operator> <name>url_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url_next</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>url_len</name> <operator>-=</operator> <name>url_next</name> <operator>-</operator> <name>url</name></expr>;</expr_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>url_next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat_next</name> <operator>&lt;</operator> <name>pat</name> <operator>+</operator> <name>pat_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pat_next</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pat_len</name> <operator>-=</operator> <name>pat_next</name> <operator>-</operator> <name>pat</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>pat_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><operator>!</operator><name>url_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pat_len</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>url_normalize_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>url_info</name></name> <modifier>*</modifier></type><name>out_info</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>allow_globs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>url_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>norm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>spanned</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>scheme_len</name></decl>, <decl><type ref="prev"/><name>user_off</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>user_len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>passwd_off</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>passwd_len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>host_off</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>host_len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>port_off</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>port_len</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>path_off</name></decl>, <decl><type ref="prev"/><name>path_len</name></decl>, <decl><type ref="prev"/><name>result_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>at_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>colon_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spanned</name> <operator>=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>URL_SCHEME_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spanned</name> <operator>||</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>spanned</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>url_len</name> <operator>||</operator>

<name><name>url</name><index>[<expr><name>spanned</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>url</name><index>[<expr><name>spanned</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>url</name><index>[<expr><name>spanned</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid URL scheme name or missing '://' suffix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name>url_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scheme_len</name> <operator>=</operator> <name>spanned</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spanned</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>url_len</name> <operator>-=</operator> <name>spanned</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>spanned</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>url</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>at_ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slash_ptr</name> <operator>=</operator> <name>url</name> <operator>+</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"/?#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at_ptr</name> <operator>&amp;&amp;</operator> <name>at_ptr</name> <operator>&lt;</operator> <name>slash_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>user_off</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at_ptr</name> <operator>&gt;</operator> <name>url</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>append_normalized_escapes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>at_ptr</name> <operator>-</operator> <name>url</name></expr></argument>,

<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>URL_RESERVED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid %XX escape sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>colon_ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>norm</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>scheme_len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colon_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>passwd_off</name> <operator>=</operator> <operator>(</operator><name>colon_ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>norm</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>passwd_len</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>passwd_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>user_len</name> <operator>=</operator> <operator>(</operator><name>passwd_off</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>scheme_len</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>user_len</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name> <operator>-</operator> <operator>(</operator><name>scheme_len</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>url_len</name> <operator>-=</operator> <operator>(</operator><operator>++</operator><name>at_ptr</name> <operator>-</operator> <name>url</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>at_ptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url_len</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">":/?#"</literal></expr></argument>, <argument><expr><operator>*</operator><name>url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>norm</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"file:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing host and scheme is not 'file:'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>host_off</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>colon_ptr</name> <operator>=</operator> <name>slash_ptr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>colon_ptr</name> <operator>&gt;</operator> <name>url</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>colon_ptr</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>colon_ptr</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>colon_ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>colon_ptr</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colon_ptr</name> <operator>=</operator> <name>slash_ptr</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>host_off</name> <operator>&amp;&amp;</operator> <name>colon_ptr</name> <operator>&lt;</operator> <name>slash_ptr</name> <operator>&amp;&amp;</operator> <name>colon_ptr</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>slash_ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"a 'file:' URL may not have a port number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allow_globs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>spanned</name> <operator>=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>URL_HOST_CHARS</name> <literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>spanned</name> <operator>=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>URL_HOST_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spanned</name> <operator>&lt;</operator> <name>colon_ptr</name> <operator>-</operator> <name>url</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid characters in host name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>url</name> <operator>&lt;</operator> <name>colon_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>url</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>url_len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>colon_ptr</name> <operator>&lt;</operator> <name>slash_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>url</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>url</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <name>slash_ptr</name> <operator>&amp;&amp;</operator> <name><name>url</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <name>slash_ptr</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>slash_ptr</name> <operator>-</operator> <name>url</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>norm</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"http:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>slash_ptr</name> <operator>-</operator> <name>url</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>norm</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"https:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"443"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>spanned</name> <operator>=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>URL_DIGIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spanned</name> <operator>&lt;</operator> <name>slash_ptr</name> <operator>-</operator> <name>url</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid port number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slash_ptr</name> <operator>-</operator> <name>url</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pnum</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pnum</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid port number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>port_off</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>slash_ptr</name> <operator>-</operator> <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>port_len</name> <operator>=</operator> <name>slash_ptr</name> <operator>-</operator> <name>url</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>url_len</name> <operator>-=</operator> <name>slash_ptr</name> <operator>-</operator> <name>colon_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>slash_ptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>host_off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>host_len</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>host_off</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>port_len</name></expr> ?</condition><then> <expr><name>port_len</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path_off</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>path_start</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>path_off</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>url</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>url</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>url_len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>seg_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>seg_start_off</name> <init>= <expr><name><name>norm</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_slash</name> <init>= <expr><name>url</name> <operator>+</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"/?#"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_add_slash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>append_normalized_escapes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>next_slash</name> <operator>-</operator> <name>url</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,

<argument><expr><name>URL_RESERVED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid %XX escape sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seg_start</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>seg_start_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>seg_start</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seg_start</name> <operator>==</operator> <name>path_start</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name><name>norm</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip_add_slash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name><name>norm</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>seg_start</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prev_slash</name> <init>= <expr><name><name>norm</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>norm</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_slash</name> <operator>==</operator> <name>path_start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid '..' path segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>--</operator><name>prev_slash</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content/>}</block></while>

<if_stmt><if>if <condition>(<expr><name>prev_slash</name> <operator>==</operator> <name>path_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name>prev_slash</name> <operator>-</operator> <name><name>norm</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip_add_slash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name>prev_slash</name> <operator>-</operator> <name><name>norm</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>url_len</name> <operator>-=</operator> <name>next_slash</name> <operator>-</operator> <name>url</name></expr>;</expr_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>next_slash</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>url</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>url</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>url_len</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_add_slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>path_len</name> <operator>=</operator> <name><name>norm</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>path_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>url</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>append_normalized_escapes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>url_len</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>URL_RESERVED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid %XX escape sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>norm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>url_len</name></name> <operator>=</operator> <name>result_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>scheme_len</name></name> <operator>=</operator> <name>scheme_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>user_off</name></name> <operator>=</operator> <name>user_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>user_len</name></name> <operator>=</operator> <name>user_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>passwd_off</name></name> <operator>=</operator> <name>passwd_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>passwd_len</name></name> <operator>=</operator> <name>passwd_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>host_off</name></name> <operator>=</operator> <name>host_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>host_len</name></name> <operator>=</operator> <name>host_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>port_off</name></name> <operator>=</operator> <name>port_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>port_len</name></name> <operator>=</operator> <name>port_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>path_off</name></name> <operator>=</operator> <name>path_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_info</name><operator>-&gt;</operator><name>path_len</name></name> <operator>=</operator> <name>path_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>url_normalize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>url_info</name></name> <modifier>*</modifier></type><name>out_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>url_normalize_1</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>out_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>url_match_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url_prefix</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>url_prefix_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name> <operator>||</operator> <operator>!</operator><name>url_prefix</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url_prefix_len</name> <operator>||</operator> <operator>(</operator><name>url_prefix_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>url_prefix</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><operator>*</operator><name>url</name> <operator>||</operator> <operator>*</operator><name>url</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url_prefix</name><index>[<expr><name>url_prefix_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url_prefix_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>url_prefix</name></expr></argument>, <argument><expr><name>url_prefix_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>url_prefix_len</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>url</name><index>[<expr><name>url_prefix_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>url_prefix_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_urls</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>url_info</name></name> <modifier>*</modifier></type><name>url</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>url_info</name></name> <modifier>*</modifier></type><name>url_prefix</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>urlmatch_item</name></name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>usermatched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pathmatchlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name> <operator>||</operator> <operator>!</operator><name>url_prefix</name> <operator>||</operator> <operator>!</operator><name><name>url</name><operator>-&gt;</operator><name>url</name></name> <operator>||</operator> <operator>!</operator><name><name>url_prefix</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url_prefix</name><operator>-&gt;</operator><name>scheme_len</name></name> <operator>!=</operator> <name><name>url</name><operator>-&gt;</operator><name>scheme_len</name></name> <operator>||</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>url_prefix</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>scheme_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>url_prefix</name><operator>-&gt;</operator><name>user_off</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>url</name><operator>-&gt;</operator><name>user_off</name></name> <operator>||</operator> <name><name>url</name><operator>-&gt;</operator><name>user_len</name></name> <operator>!=</operator> <name><name>url_prefix</name><operator>-&gt;</operator><name>user_len</name></name> <operator>||</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>url</name><operator>-&gt;</operator><name>user_off</name></name></expr></argument>,

<argument><expr><name><name>url_prefix</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>url_prefix</name><operator>-&gt;</operator><name>user_off</name></name></expr></argument>,

<argument><expr><name><name>url</name><operator>-&gt;</operator><name>user_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>usermatched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match_host</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>url_prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>url_prefix</name><operator>-&gt;</operator><name>port_len</name></name> <operator>!=</operator> <name><name>url</name><operator>-&gt;</operator><name>port_len</name></name> <operator>||</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>url</name><operator>-&gt;</operator><name>port_off</name></name></expr></argument>,

<argument><expr><name><name>url_prefix</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>url_prefix</name><operator>-&gt;</operator><name>port_off</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>port_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pathmatchlen</name> <operator>=</operator> <call><name>url_match_prefix</name><argument_list>(

<argument><expr><name><name>url</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>url</name><operator>-&gt;</operator><name>path_off</name></name></expr></argument>,

<argument><expr><name><name>url_prefix</name><operator>-&gt;</operator><name>url</name></name> <operator>+</operator> <name><name>url_prefix</name><operator>-&gt;</operator><name>path_off</name></name></expr></argument>,

<argument><expr><name><name>url_prefix</name><operator>-&gt;</operator><name>url_len</name></name> <operator>-</operator> <name><name>url_prefix</name><operator>-&gt;</operator><name>path_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pathmatchlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>hostmatch_len</name></name> <operator>=</operator> <name><name>url_prefix</name><operator>-&gt;</operator><name>host_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>pathmatch_len</name></name> <operator>=</operator> <name>pathmatchlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>user_matched</name></name> <operator>=</operator> <name>usermatched</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>urlmatch_item</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>urlmatch_item</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>hostmatch_len</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>hostmatch_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>hostmatch_len</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>hostmatch_len</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>pathmatch_len</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>pathmatch_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>pathmatch_len</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>pathmatch_len</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>user_matched</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>user_matched</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>user_matched</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>urlmatch_config_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>urlmatch_config</name></name> <modifier>*</modifier></type><name>collect</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>urlmatch_item</name></name></type> <name>matched</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>url_info</name></name> <modifier>*</modifier></type><name>url</name> <init>= <expr><operator>&amp;</operator><name><name>collect</name><operator>-&gt;</operator><name>url</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>synthkey</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>select_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>urlmatch_item</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>urlmatch_item</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <init>=

<expr><ternary><condition><expr><name><name>collect</name><operator>-&gt;</operator><name>select_fn</name></name></expr> ?</condition><then> <expr><name><name>collect</name><operator>-&gt;</operator><name>select_fn</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><name>cmp_matches</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name><name>collect</name><operator>-&gt;</operator><name>section</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><operator>(</operator><name>key</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>collect</name><operator>-&gt;</operator><name>cascade_fn</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>collect</name><operator>-&gt;</operator><name>cascade_fn</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dot</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_url</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>norm_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>url_info</name></name></type> <name>norm_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name>config_url</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>dot</name> <operator>-</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>norm_url</name> <operator>=</operator> <call><name>url_normalize_1</name><argument_list>(<argument><expr><name>config_url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>norm_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>norm_url</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>match_urls</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>norm_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>norm_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>retval</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>dot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>collect</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>collect</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>collect</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>matched</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>select_fn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>matched</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>synthkey</name></expr></argument>, <argument><expr><name><name>collect</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>synthkey</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>synthkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>collect</name><operator>-&gt;</operator><name>collect_fn</name></name><argument_list>(<argument><expr><name><name>synthkey</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>collect</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>synthkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

</unit>
