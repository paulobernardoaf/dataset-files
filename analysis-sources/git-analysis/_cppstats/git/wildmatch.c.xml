<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\wildmatch.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wildmatch.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uchar</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEGATE_CLASS</name></cpp:macro> <cpp:value>'!'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEGATE_CLASS2</name></cpp:macro> <cpp:value>'^'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_EQ</name><parameter_list>(<parameter><type><name>class</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>litmatch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((len) == sizeof (litmatch)-1 &amp;&amp; *(class) == *(litmatch) &amp;&amp; strncmp((char*)class, litmatch, len) == 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>STDC_HEADERS</name> <operator>||</operator> <operator>!</operator><name>defined</name> <name>isascii</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISASCII</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISASCII</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isascii(c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isblank</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISBLANK</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isblank(c))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISBLANK</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == ' ' || (c) == '\t')</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>isgraph</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISGRAPH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isgraph(c))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISGRAPH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isprint(c) &amp;&amp; !isspace(c))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPRINT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isprint(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isdigit(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALNUM</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isalnum(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALPHA</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isalpha(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISCNTRL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; iscntrl(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISLOWER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; islower(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPUNCT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; ispunct(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isspace(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISUPPER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isupper(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISXDIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ISASCII(c) &amp;&amp; isxdigit(c))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dowild</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uchar</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uchar</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uchar</name></type> <name>p_ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uchar</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>(</operator><name>p_ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>text</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>, <decl><type ref="prev"/><name>match_slash</name></decl>, <decl><type ref="prev"/><name>negated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uchar</name></type> <name>t_ch</name></decl>, <decl><type ref="prev"/><name>prev_ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t_ch</name> <operator>=</operator> <operator>*</operator><name>text</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>p_ch</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_ABORT_ALL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_CASEFOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISUPPER</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t_ch</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_CASEFOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISUPPER</name><argument_list>(<argument><expr><name>p_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>p_ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>p_ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>t_ch</name> <operator>!=</operator> <name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_PATHNAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>t_ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uchar</name> <modifier>*</modifier></type><name>prev_p</name> <init>= <expr><name>p</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content/>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_PATHNAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match_slash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>prev_p</name> <operator>&lt;</operator> <name>pattern</name> <operator>||</operator> <operator>*</operator><name>prev_p</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator>

<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator>

<call><name>dowild</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WM_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_MATCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>match_slash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>match_slash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>match_slash</name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>WM_PATHNAME</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_slash</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>WM_MATCH</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>match_slash</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slash</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uchar</name><operator>*</operator><operator>)</operator><name>slash</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t_ch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_glob_special</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_CASEFOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISUPPER</name><argument_list>(<argument><expr><name>p_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>p_ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t_ch</name> <operator>=</operator> <operator>*</operator><name>text</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>match_slash</name> <operator>||</operator> <name>t_ch</name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_CASEFOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISUPPER</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t_ch</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_ch</name> <operator>==</operator> <name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>t_ch</name> <operator>!=</operator> <name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>matched</name> <operator>=</operator> <call><name>dowild</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WM_NOMATCH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_slash</name> <operator>||</operator> <name>matched</name> <operator>!=</operator> <name>WM_ABORT_TO_STARSTAR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>matched</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>match_slash</name> <operator>&amp;&amp;</operator> <name>t_ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_ABORT_TO_STARSTAR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>text</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>WM_ABORT_ALL</name></expr>;</return>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEGATE_CLASS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>==</operator> <name>NEGATE_CLASS2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <name>NEGATE_CLASS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>negated</name> <operator>=</operator> <ternary><condition><expr><name>p_ch</name> <operator>==</operator> <name>NEGATE_CLASS</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negated</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_ABORT_ALL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_ABORT_ALL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_ch</name> <operator>==</operator> <name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_ch</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>prev_ch</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_ABORT_ALL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_ch</name> <operator>&lt;=</operator> <name>p_ch</name> <operator>&amp;&amp;</operator> <name>t_ch</name> <operator>&gt;=</operator> <name>prev_ch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_CASEFOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISLOWER</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uchar</name></type> <name>t_ch_upper</name> <init>= <expr><call><name>toupper</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t_ch_upper</name> <operator>&lt;=</operator> <name>p_ch</name> <operator>&amp;&amp;</operator> <name>t_ch_upper</name> <operator>&gt;=</operator> <name>prev_ch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_ch</name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uchar</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>(</operator><name>p_ch</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_ch</name> <operator>!=</operator> <literal type="char">']'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_ABORT_ALL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t_ch</name> <operator>==</operator> <name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"alnum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"alpha"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISALPHA</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"blank"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISBLANK</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"cntrl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISCNTRL</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"digit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"graph"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISGRAPH</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"lower"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISLOWER</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"print"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISPRINT</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"punct"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISPUNCT</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"space"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"upper"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISUPPER</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_CASEFOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISLOWER</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CC_EQ</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"xdigit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ISXDIGIT</name><argument_list>(<argument><expr><name>t_ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<return>return <expr><name>WM_ABORT_ALL</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t_ch</name> <operator>==</operator> <name>p_ch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>prev_ch</name> <operator>=</operator> <name>p_ch</name></expr><operator>,</operator> <expr><operator>(</operator><name>p_ch</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name><operator>)</operator> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>matched</name> <operator>==</operator> <name>negated</name> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WM_PATHNAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>t_ch</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WM_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>text</name></expr> ?</condition><then> <expr><name>WM_NOMATCH</name></expr> </then><else>: <expr><name>WM_MATCH</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>wildmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>dowild</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uchar</name><operator>*</operator><operator>)</operator><name>pattern</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uchar</name><operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
