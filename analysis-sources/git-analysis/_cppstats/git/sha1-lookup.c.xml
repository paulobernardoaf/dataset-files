<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\sha1-lookup.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-lookup.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>take2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>sha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>sha1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha1_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nr</name></decl></parameter>,

<parameter><decl><type><name>sha1_access_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>hi</name> <init>= <expr><name>nr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>lov</name></decl>, <decl><type ref="prev"/><name>hiv</name></decl>, <decl><type ref="prev"/><name>miv</name></decl>, <decl><type ref="prev"/><name>ofs</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ofs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ofs</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ofs</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lov</name> <operator>=</operator> <call><name>take2</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hiv</name> <operator>=</operator> <call><name>take2</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>miv</name> <operator>=</operator> <call><name>take2</name><argument_list>(<argument><expr><name>hash</name> <operator>+</operator> <name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>miv</name> <operator>&lt;</operator> <name>lov</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hiv</name> <operator>&lt;</operator> <name>miv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>index_pos_to_insert_pos</name><argument_list>(<argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lov</name> <operator>!=</operator> <name>hiv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <operator>(</operator><name>nr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>miv</name> <operator>-</operator> <name>lov</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>hiv</name> <operator>-</operator> <name>lov</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lo</name> <operator>&lt;=</operator> <name>mi</name> <operator>&amp;&amp;</operator> <name>mi</name> <operator>&lt;</operator> <name>hi</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"assertion failed in binary search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>hashcmp</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>mi</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mi</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mi</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>lo</name> <operator>&lt;</operator> <name>hi</name></expr>)</condition>;</do>

<return>return <expr><call><name>index_pos_to_insert_pos</name><argument_list>(<argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>bsearch_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>fanout_nbo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>fanout_nbo</name><index>[<expr><operator>*</operator><name>sha1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>sha1</name> <operator>==</operator> <literal type="number">0x0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>fanout_nbo</name><index>[<expr><operator>*</operator><name>sha1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>lo</name> <operator>&lt;</operator> <name>hi</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mi</name> <init>= <expr><name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>hashcmp</name><argument_list>(<argument><expr><name>table</name> <operator>+</operator> <name>mi</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>mi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mi</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mi</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
