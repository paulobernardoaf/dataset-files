<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\patch-delta.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta.h"</cpp:file></cpp:include>

<function><type><name>void</name> <modifier>*</modifier></type><name>patch_delta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>src_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>delta_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>delta_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dst_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"/><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_size</name> <operator>&lt;</operator> <name>DELTA_SIZE_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>delta_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>delta_buf</name> <operator>+</operator> <name>delta_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>get_delta_hdr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>src_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>get_delta_hdr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_buf</name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>dst_buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>data</name> <operator>&lt;</operator> <name>top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cp_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_CP_PARAM</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (cmd &amp; (bit)) { if (data &gt;= top) goto bad_length; var |= ((unsigned) *data++ &lt;&lt; (shift)); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PARSE_CP_PARAM</name><argument_list>(<argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name>cp_off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_CP_PARAM</name><argument_list>(<argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><name>cp_off</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_CP_PARAM</name><argument_list>(<argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><name>cp_off</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_CP_PARAM</name><argument_list>(<argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><name>cp_off</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_CP_PARAM</name><argument_list>(<argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><name>cp_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_CP_PARAM</name><argument_list>(<argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><name>cp_size</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_CP_PARAM</name><argument_list>(<argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><name>cp_size</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PARSE_CP_PARAM</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>cp_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp_size</name> <operator>=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unsigned_add_overflows</name><argument_list>(<argument><expr><name>cp_off</name></expr></argument>, <argument><expr><name>cp_size</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name>cp_off</name> <operator>+</operator> <name>cp_size</name> <operator>&gt;</operator> <name>src_size</name> <operator>||</operator>

<name>cp_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bad_length</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>src_buf</name> <operator>+</operator> <name>cp_off</name></expr></argument>, <argument><expr><name>cp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>cp_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>cp_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&gt;</operator> <name>size</name> <operator>||</operator> <name>cmd</name> <operator>&gt;</operator> <name>top</name> <operator>-</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bad_length</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>cmd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unexpected delta opcode 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>bad</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>top</name> <operator>||</operator> <name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>bad_length</name>:</label>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"delta replay has gone wild"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>bad</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dst_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_size</name> <operator>=</operator> <name>out</name> <operator>-</operator> <name>dst_buf</name></expr>;</expr_stmt>

<return>return <expr><name>dst_buf</name></expr>;</return>

</block_content>}</block></function>

</unit>
