<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\diff-delta.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_LIMIT</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RABIN_SHIFT</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RABIN_WINDOW</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>T</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xab59b4d1</literal></expr>, <expr><literal type="number">0x56b369a2</literal></expr>, <expr><literal type="number">0xfdeadd73</literal></expr>, <expr><literal type="number">0x063f6795</literal></expr>, <expr><literal type="number">0xad66d344</literal></expr>,

<expr><literal type="number">0x508c0e37</literal></expr>, <expr><literal type="number">0xfbd5bae6</literal></expr>, <expr><literal type="number">0x0c7ecf2a</literal></expr>, <expr><literal type="number">0xa7277bfb</literal></expr>, <expr><literal type="number">0x5acda688</literal></expr>, <expr><literal type="number">0xf1941259</literal></expr>,

<expr><literal type="number">0x0a41a8bf</literal></expr>, <expr><literal type="number">0xa1181c6e</literal></expr>, <expr><literal type="number">0x5cf2c11d</literal></expr>, <expr><literal type="number">0xf7ab75cc</literal></expr>, <expr><literal type="number">0x18fd9e54</literal></expr>, <expr><literal type="number">0xb3a42a85</literal></expr>,

<expr><literal type="number">0x4e4ef7f6</literal></expr>, <expr><literal type="number">0xe5174327</literal></expr>, <expr><literal type="number">0x1ec2f9c1</literal></expr>, <expr><literal type="number">0xb59b4d10</literal></expr>, <expr><literal type="number">0x48719063</literal></expr>, <expr><literal type="number">0xe32824b2</literal></expr>,

<expr><literal type="number">0x1483517e</literal></expr>, <expr><literal type="number">0xbfdae5af</literal></expr>, <expr><literal type="number">0x423038dc</literal></expr>, <expr><literal type="number">0xe9698c0d</literal></expr>, <expr><literal type="number">0x12bc36eb</literal></expr>, <expr><literal type="number">0xb9e5823a</literal></expr>,

<expr><literal type="number">0x440f5f49</literal></expr>, <expr><literal type="number">0xef56eb98</literal></expr>, <expr><literal type="number">0x31fb3ca8</literal></expr>, <expr><literal type="number">0x9aa28879</literal></expr>, <expr><literal type="number">0x6748550a</literal></expr>, <expr><literal type="number">0xcc11e1db</literal></expr>,

<expr><literal type="number">0x37c45b3d</literal></expr>, <expr><literal type="number">0x9c9defec</literal></expr>, <expr><literal type="number">0x6177329f</literal></expr>, <expr><literal type="number">0xca2e864e</literal></expr>, <expr><literal type="number">0x3d85f382</literal></expr>, <expr><literal type="number">0x96dc4753</literal></expr>,

<expr><literal type="number">0x6b369a20</literal></expr>, <expr><literal type="number">0xc06f2ef1</literal></expr>, <expr><literal type="number">0x3bba9417</literal></expr>, <expr><literal type="number">0x90e320c6</literal></expr>, <expr><literal type="number">0x6d09fdb5</literal></expr>, <expr><literal type="number">0xc6504964</literal></expr>,

<expr><literal type="number">0x2906a2fc</literal></expr>, <expr><literal type="number">0x825f162d</literal></expr>, <expr><literal type="number">0x7fb5cb5e</literal></expr>, <expr><literal type="number">0xd4ec7f8f</literal></expr>, <expr><literal type="number">0x2f39c569</literal></expr>, <expr><literal type="number">0x846071b8</literal></expr>,

<expr><literal type="number">0x798aaccb</literal></expr>, <expr><literal type="number">0xd2d3181a</literal></expr>, <expr><literal type="number">0x25786dd6</literal></expr>, <expr><literal type="number">0x8e21d907</literal></expr>, <expr><literal type="number">0x73cb0474</literal></expr>, <expr><literal type="number">0xd892b0a5</literal></expr>,

<expr><literal type="number">0x23470a43</literal></expr>, <expr><literal type="number">0x881ebe92</literal></expr>, <expr><literal type="number">0x75f463e1</literal></expr>, <expr><literal type="number">0xdeadd730</literal></expr>, <expr><literal type="number">0x63f67950</literal></expr>, <expr><literal type="number">0xc8afcd81</literal></expr>,

<expr><literal type="number">0x354510f2</literal></expr>, <expr><literal type="number">0x9e1ca423</literal></expr>, <expr><literal type="number">0x65c91ec5</literal></expr>, <expr><literal type="number">0xce90aa14</literal></expr>, <expr><literal type="number">0x337a7767</literal></expr>, <expr><literal type="number">0x9823c3b6</literal></expr>,

<expr><literal type="number">0x6f88b67a</literal></expr>, <expr><literal type="number">0xc4d102ab</literal></expr>, <expr><literal type="number">0x393bdfd8</literal></expr>, <expr><literal type="number">0x92626b09</literal></expr>, <expr><literal type="number">0x69b7d1ef</literal></expr>, <expr><literal type="number">0xc2ee653e</literal></expr>,

<expr><literal type="number">0x3f04b84d</literal></expr>, <expr><literal type="number">0x945d0c9c</literal></expr>, <expr><literal type="number">0x7b0be704</literal></expr>, <expr><literal type="number">0xd05253d5</literal></expr>, <expr><literal type="number">0x2db88ea6</literal></expr>, <expr><literal type="number">0x86e13a77</literal></expr>,

<expr><literal type="number">0x7d348091</literal></expr>, <expr><literal type="number">0xd66d3440</literal></expr>, <expr><literal type="number">0x2b87e933</literal></expr>, <expr><literal type="number">0x80de5de2</literal></expr>, <expr><literal type="number">0x7775282e</literal></expr>, <expr><literal type="number">0xdc2c9cff</literal></expr>,

<expr><literal type="number">0x21c6418c</literal></expr>, <expr><literal type="number">0x8a9ff55d</literal></expr>, <expr><literal type="number">0x714a4fbb</literal></expr>, <expr><literal type="number">0xda13fb6a</literal></expr>, <expr><literal type="number">0x27f92619</literal></expr>, <expr><literal type="number">0x8ca092c8</literal></expr>,

<expr><literal type="number">0x520d45f8</literal></expr>, <expr><literal type="number">0xf954f129</literal></expr>, <expr><literal type="number">0x04be2c5a</literal></expr>, <expr><literal type="number">0xafe7988b</literal></expr>, <expr><literal type="number">0x5432226d</literal></expr>, <expr><literal type="number">0xff6b96bc</literal></expr>,

<expr><literal type="number">0x02814bcf</literal></expr>, <expr><literal type="number">0xa9d8ff1e</literal></expr>, <expr><literal type="number">0x5e738ad2</literal></expr>, <expr><literal type="number">0xf52a3e03</literal></expr>, <expr><literal type="number">0x08c0e370</literal></expr>, <expr><literal type="number">0xa39957a1</literal></expr>,

<expr><literal type="number">0x584ced47</literal></expr>, <expr><literal type="number">0xf3155996</literal></expr>, <expr><literal type="number">0x0eff84e5</literal></expr>, <expr><literal type="number">0xa5a63034</literal></expr>, <expr><literal type="number">0x4af0dbac</literal></expr>, <expr><literal type="number">0xe1a96f7d</literal></expr>,

<expr><literal type="number">0x1c43b20e</literal></expr>, <expr><literal type="number">0xb71a06df</literal></expr>, <expr><literal type="number">0x4ccfbc39</literal></expr>, <expr><literal type="number">0xe79608e8</literal></expr>, <expr><literal type="number">0x1a7cd59b</literal></expr>, <expr><literal type="number">0xb125614a</literal></expr>,

<expr><literal type="number">0x468e1486</literal></expr>, <expr><literal type="number">0xedd7a057</literal></expr>, <expr><literal type="number">0x103d7d24</literal></expr>, <expr><literal type="number">0xbb64c9f5</literal></expr>, <expr><literal type="number">0x40b17313</literal></expr>, <expr><literal type="number">0xebe8c7c2</literal></expr>,

<expr><literal type="number">0x16021ab1</literal></expr>, <expr><literal type="number">0xbd5bae60</literal></expr>, <expr><literal type="number">0x6cb54671</literal></expr>, <expr><literal type="number">0xc7ecf2a0</literal></expr>, <expr><literal type="number">0x3a062fd3</literal></expr>, <expr><literal type="number">0x915f9b02</literal></expr>,

<expr><literal type="number">0x6a8a21e4</literal></expr>, <expr><literal type="number">0xc1d39535</literal></expr>, <expr><literal type="number">0x3c394846</literal></expr>, <expr><literal type="number">0x9760fc97</literal></expr>, <expr><literal type="number">0x60cb895b</literal></expr>, <expr><literal type="number">0xcb923d8a</literal></expr>,

<expr><literal type="number">0x3678e0f9</literal></expr>, <expr><literal type="number">0x9d215428</literal></expr>, <expr><literal type="number">0x66f4eece</literal></expr>, <expr><literal type="number">0xcdad5a1f</literal></expr>, <expr><literal type="number">0x3047876c</literal></expr>, <expr><literal type="number">0x9b1e33bd</literal></expr>,

<expr><literal type="number">0x7448d825</literal></expr>, <expr><literal type="number">0xdf116cf4</literal></expr>, <expr><literal type="number">0x22fbb187</literal></expr>, <expr><literal type="number">0x89a20556</literal></expr>, <expr><literal type="number">0x7277bfb0</literal></expr>, <expr><literal type="number">0xd92e0b61</literal></expr>,

<expr><literal type="number">0x24c4d612</literal></expr>, <expr><literal type="number">0x8f9d62c3</literal></expr>, <expr><literal type="number">0x7836170f</literal></expr>, <expr><literal type="number">0xd36fa3de</literal></expr>, <expr><literal type="number">0x2e857ead</literal></expr>, <expr><literal type="number">0x85dcca7c</literal></expr>,

<expr><literal type="number">0x7e09709a</literal></expr>, <expr><literal type="number">0xd550c44b</literal></expr>, <expr><literal type="number">0x28ba1938</literal></expr>, <expr><literal type="number">0x83e3ade9</literal></expr>, <expr><literal type="number">0x5d4e7ad9</literal></expr>, <expr><literal type="number">0xf617ce08</literal></expr>,

<expr><literal type="number">0x0bfd137b</literal></expr>, <expr><literal type="number">0xa0a4a7aa</literal></expr>, <expr><literal type="number">0x5b711d4c</literal></expr>, <expr><literal type="number">0xf028a99d</literal></expr>, <expr><literal type="number">0x0dc274ee</literal></expr>, <expr><literal type="number">0xa69bc03f</literal></expr>,

<expr><literal type="number">0x5130b5f3</literal></expr>, <expr><literal type="number">0xfa690122</literal></expr>, <expr><literal type="number">0x0783dc51</literal></expr>, <expr><literal type="number">0xacda6880</literal></expr>, <expr><literal type="number">0x570fd266</literal></expr>, <expr><literal type="number">0xfc5666b7</literal></expr>,

<expr><literal type="number">0x01bcbbc4</literal></expr>, <expr><literal type="number">0xaae50f15</literal></expr>, <expr><literal type="number">0x45b3e48d</literal></expr>, <expr><literal type="number">0xeeea505c</literal></expr>, <expr><literal type="number">0x13008d2f</literal></expr>, <expr><literal type="number">0xb85939fe</literal></expr>,

<expr><literal type="number">0x438c8318</literal></expr>, <expr><literal type="number">0xe8d537c9</literal></expr>, <expr><literal type="number">0x153feaba</literal></expr>, <expr><literal type="number">0xbe665e6b</literal></expr>, <expr><literal type="number">0x49cd2ba7</literal></expr>, <expr><literal type="number">0xe2949f76</literal></expr>,

<expr><literal type="number">0x1f7e4205</literal></expr>, <expr><literal type="number">0xb427f6d4</literal></expr>, <expr><literal type="number">0x4ff24c32</literal></expr>, <expr><literal type="number">0xe4abf8e3</literal></expr>, <expr><literal type="number">0x19412590</literal></expr>, <expr><literal type="number">0xb2189141</literal></expr>,

<expr><literal type="number">0x0f433f21</literal></expr>, <expr><literal type="number">0xa41a8bf0</literal></expr>, <expr><literal type="number">0x59f05683</literal></expr>, <expr><literal type="number">0xf2a9e252</literal></expr>, <expr><literal type="number">0x097c58b4</literal></expr>, <expr><literal type="number">0xa225ec65</literal></expr>,

<expr><literal type="number">0x5fcf3116</literal></expr>, <expr><literal type="number">0xf49685c7</literal></expr>, <expr><literal type="number">0x033df00b</literal></expr>, <expr><literal type="number">0xa86444da</literal></expr>, <expr><literal type="number">0x558e99a9</literal></expr>, <expr><literal type="number">0xfed72d78</literal></expr>,

<expr><literal type="number">0x0502979e</literal></expr>, <expr><literal type="number">0xae5b234f</literal></expr>, <expr><literal type="number">0x53b1fe3c</literal></expr>, <expr><literal type="number">0xf8e84aed</literal></expr>, <expr><literal type="number">0x17bea175</literal></expr>, <expr><literal type="number">0xbce715a4</literal></expr>,

<expr><literal type="number">0x410dc8d7</literal></expr>, <expr><literal type="number">0xea547c06</literal></expr>, <expr><literal type="number">0x1181c6e0</literal></expr>, <expr><literal type="number">0xbad87231</literal></expr>, <expr><literal type="number">0x4732af42</literal></expr>, <expr><literal type="number">0xec6b1b93</literal></expr>,

<expr><literal type="number">0x1bc06e5f</literal></expr>, <expr><literal type="number">0xb099da8e</literal></expr>, <expr><literal type="number">0x4d7307fd</literal></expr>, <expr><literal type="number">0xe62ab32c</literal></expr>, <expr><literal type="number">0x1dff09ca</literal></expr>, <expr><literal type="number">0xb6a6bd1b</literal></expr>,

<expr><literal type="number">0x4b4c6068</literal></expr>, <expr><literal type="number">0xe015d4b9</literal></expr>, <expr><literal type="number">0x3eb80389</literal></expr>, <expr><literal type="number">0x95e1b758</literal></expr>, <expr><literal type="number">0x680b6a2b</literal></expr>, <expr><literal type="number">0xc352defa</literal></expr>,

<expr><literal type="number">0x3887641c</literal></expr>, <expr><literal type="number">0x93ded0cd</literal></expr>, <expr><literal type="number">0x6e340dbe</literal></expr>, <expr><literal type="number">0xc56db96f</literal></expr>, <expr><literal type="number">0x32c6cca3</literal></expr>, <expr><literal type="number">0x999f7872</literal></expr>,

<expr><literal type="number">0x6475a501</literal></expr>, <expr><literal type="number">0xcf2c11d0</literal></expr>, <expr><literal type="number">0x34f9ab36</literal></expr>, <expr><literal type="number">0x9fa01fe7</literal></expr>, <expr><literal type="number">0x624ac294</literal></expr>, <expr><literal type="number">0xc9137645</literal></expr>,

<expr><literal type="number">0x26459ddd</literal></expr>, <expr><literal type="number">0x8d1c290c</literal></expr>, <expr><literal type="number">0x70f6f47f</literal></expr>, <expr><literal type="number">0xdbaf40ae</literal></expr>, <expr><literal type="number">0x207afa48</literal></expr>, <expr><literal type="number">0x8b234e99</literal></expr>,

<expr><literal type="number">0x76c993ea</literal></expr>, <expr><literal type="number">0xdd90273b</literal></expr>, <expr><literal type="number">0x2a3b52f7</literal></expr>, <expr><literal type="number">0x8162e626</literal></expr>, <expr><literal type="number">0x7c883b55</literal></expr>, <expr><literal type="number">0xd7d18f84</literal></expr>,

<expr><literal type="number">0x2c043562</literal></expr>, <expr><literal type="number">0x875d81b3</literal></expr>, <expr><literal type="number">0x7ab75cc0</literal></expr>, <expr><literal type="number">0xd1eee811</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>U</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x7eb5200d</literal></expr>, <expr><literal type="number">0x5633f4cb</literal></expr>, <expr><literal type="number">0x2886d4c6</literal></expr>, <expr><literal type="number">0x073e5d47</literal></expr>, <expr><literal type="number">0x798b7d4a</literal></expr>,

<expr><literal type="number">0x510da98c</literal></expr>, <expr><literal type="number">0x2fb88981</literal></expr>, <expr><literal type="number">0x0e7cba8e</literal></expr>, <expr><literal type="number">0x70c99a83</literal></expr>, <expr><literal type="number">0x584f4e45</literal></expr>, <expr><literal type="number">0x26fa6e48</literal></expr>,

<expr><literal type="number">0x0942e7c9</literal></expr>, <expr><literal type="number">0x77f7c7c4</literal></expr>, <expr><literal type="number">0x5f711302</literal></expr>, <expr><literal type="number">0x21c4330f</literal></expr>, <expr><literal type="number">0x1cf9751c</literal></expr>, <expr><literal type="number">0x624c5511</literal></expr>,

<expr><literal type="number">0x4aca81d7</literal></expr>, <expr><literal type="number">0x347fa1da</literal></expr>, <expr><literal type="number">0x1bc7285b</literal></expr>, <expr><literal type="number">0x65720856</literal></expr>, <expr><literal type="number">0x4df4dc90</literal></expr>, <expr><literal type="number">0x3341fc9d</literal></expr>,

<expr><literal type="number">0x1285cf92</literal></expr>, <expr><literal type="number">0x6c30ef9f</literal></expr>, <expr><literal type="number">0x44b63b59</literal></expr>, <expr><literal type="number">0x3a031b54</literal></expr>, <expr><literal type="number">0x15bb92d5</literal></expr>, <expr><literal type="number">0x6b0eb2d8</literal></expr>,

<expr><literal type="number">0x4388661e</literal></expr>, <expr><literal type="number">0x3d3d4613</literal></expr>, <expr><literal type="number">0x39f2ea38</literal></expr>, <expr><literal type="number">0x4747ca35</literal></expr>, <expr><literal type="number">0x6fc11ef3</literal></expr>, <expr><literal type="number">0x11743efe</literal></expr>,

<expr><literal type="number">0x3eccb77f</literal></expr>, <expr><literal type="number">0x40799772</literal></expr>, <expr><literal type="number">0x68ff43b4</literal></expr>, <expr><literal type="number">0x164a63b9</literal></expr>, <expr><literal type="number">0x378e50b6</literal></expr>, <expr><literal type="number">0x493b70bb</literal></expr>,

<expr><literal type="number">0x61bda47d</literal></expr>, <expr><literal type="number">0x1f088470</literal></expr>, <expr><literal type="number">0x30b00df1</literal></expr>, <expr><literal type="number">0x4e052dfc</literal></expr>, <expr><literal type="number">0x6683f93a</literal></expr>, <expr><literal type="number">0x1836d937</literal></expr>,

<expr><literal type="number">0x250b9f24</literal></expr>, <expr><literal type="number">0x5bbebf29</literal></expr>, <expr><literal type="number">0x73386bef</literal></expr>, <expr><literal type="number">0x0d8d4be2</literal></expr>, <expr><literal type="number">0x2235c263</literal></expr>, <expr><literal type="number">0x5c80e26e</literal></expr>,

<expr><literal type="number">0x740636a8</literal></expr>, <expr><literal type="number">0x0ab316a5</literal></expr>, <expr><literal type="number">0x2b7725aa</literal></expr>, <expr><literal type="number">0x55c205a7</literal></expr>, <expr><literal type="number">0x7d44d161</literal></expr>, <expr><literal type="number">0x03f1f16c</literal></expr>,

<expr><literal type="number">0x2c4978ed</literal></expr>, <expr><literal type="number">0x52fc58e0</literal></expr>, <expr><literal type="number">0x7a7a8c26</literal></expr>, <expr><literal type="number">0x04cfac2b</literal></expr>, <expr><literal type="number">0x73e5d470</literal></expr>, <expr><literal type="number">0x0d50f47d</literal></expr>,

<expr><literal type="number">0x25d620bb</literal></expr>, <expr><literal type="number">0x5b6300b6</literal></expr>, <expr><literal type="number">0x74db8937</literal></expr>, <expr><literal type="number">0x0a6ea93a</literal></expr>, <expr><literal type="number">0x22e87dfc</literal></expr>, <expr><literal type="number">0x5c5d5df1</literal></expr>,

<expr><literal type="number">0x7d996efe</literal></expr>, <expr><literal type="number">0x032c4ef3</literal></expr>, <expr><literal type="number">0x2baa9a35</literal></expr>, <expr><literal type="number">0x551fba38</literal></expr>, <expr><literal type="number">0x7aa733b9</literal></expr>, <expr><literal type="number">0x041213b4</literal></expr>,

<expr><literal type="number">0x2c94c772</literal></expr>, <expr><literal type="number">0x5221e77f</literal></expr>, <expr><literal type="number">0x6f1ca16c</literal></expr>, <expr><literal type="number">0x11a98161</literal></expr>, <expr><literal type="number">0x392f55a7</literal></expr>, <expr><literal type="number">0x479a75aa</literal></expr>,

<expr><literal type="number">0x6822fc2b</literal></expr>, <expr><literal type="number">0x1697dc26</literal></expr>, <expr><literal type="number">0x3e1108e0</literal></expr>, <expr><literal type="number">0x40a428ed</literal></expr>, <expr><literal type="number">0x61601be2</literal></expr>, <expr><literal type="number">0x1fd53bef</literal></expr>,

<expr><literal type="number">0x3753ef29</literal></expr>, <expr><literal type="number">0x49e6cf24</literal></expr>, <expr><literal type="number">0x665e46a5</literal></expr>, <expr><literal type="number">0x18eb66a8</literal></expr>, <expr><literal type="number">0x306db26e</literal></expr>, <expr><literal type="number">0x4ed89263</literal></expr>,

<expr><literal type="number">0x4a173e48</literal></expr>, <expr><literal type="number">0x34a21e45</literal></expr>, <expr><literal type="number">0x1c24ca83</literal></expr>, <expr><literal type="number">0x6291ea8e</literal></expr>, <expr><literal type="number">0x4d29630f</literal></expr>, <expr><literal type="number">0x339c4302</literal></expr>,

<expr><literal type="number">0x1b1a97c4</literal></expr>, <expr><literal type="number">0x65afb7c9</literal></expr>, <expr><literal type="number">0x446b84c6</literal></expr>, <expr><literal type="number">0x3adea4cb</literal></expr>, <expr><literal type="number">0x1258700d</literal></expr>, <expr><literal type="number">0x6ced5000</literal></expr>,

<expr><literal type="number">0x4355d981</literal></expr>, <expr><literal type="number">0x3de0f98c</literal></expr>, <expr><literal type="number">0x15662d4a</literal></expr>, <expr><literal type="number">0x6bd30d47</literal></expr>, <expr><literal type="number">0x56ee4b54</literal></expr>, <expr><literal type="number">0x285b6b59</literal></expr>,

<expr><literal type="number">0x00ddbf9f</literal></expr>, <expr><literal type="number">0x7e689f92</literal></expr>, <expr><literal type="number">0x51d01613</literal></expr>, <expr><literal type="number">0x2f65361e</literal></expr>, <expr><literal type="number">0x07e3e2d8</literal></expr>, <expr><literal type="number">0x7956c2d5</literal></expr>,

<expr><literal type="number">0x5892f1da</literal></expr>, <expr><literal type="number">0x2627d1d7</literal></expr>, <expr><literal type="number">0x0ea10511</literal></expr>, <expr><literal type="number">0x7014251c</literal></expr>, <expr><literal type="number">0x5facac9d</literal></expr>, <expr><literal type="number">0x21198c90</literal></expr>,

<expr><literal type="number">0x099f5856</literal></expr>, <expr><literal type="number">0x772a785b</literal></expr>, <expr><literal type="number">0x4c921c31</literal></expr>, <expr><literal type="number">0x32273c3c</literal></expr>, <expr><literal type="number">0x1aa1e8fa</literal></expr>, <expr><literal type="number">0x6414c8f7</literal></expr>,

<expr><literal type="number">0x4bac4176</literal></expr>, <expr><literal type="number">0x3519617b</literal></expr>, <expr><literal type="number">0x1d9fb5bd</literal></expr>, <expr><literal type="number">0x632a95b0</literal></expr>, <expr><literal type="number">0x42eea6bf</literal></expr>, <expr><literal type="number">0x3c5b86b2</literal></expr>,

<expr><literal type="number">0x14dd5274</literal></expr>, <expr><literal type="number">0x6a687279</literal></expr>, <expr><literal type="number">0x45d0fbf8</literal></expr>, <expr><literal type="number">0x3b65dbf5</literal></expr>, <expr><literal type="number">0x13e30f33</literal></expr>, <expr><literal type="number">0x6d562f3e</literal></expr>,

<expr><literal type="number">0x506b692d</literal></expr>, <expr><literal type="number">0x2ede4920</literal></expr>, <expr><literal type="number">0x06589de6</literal></expr>, <expr><literal type="number">0x78edbdeb</literal></expr>, <expr><literal type="number">0x5755346a</literal></expr>, <expr><literal type="number">0x29e01467</literal></expr>,

<expr><literal type="number">0x0166c0a1</literal></expr>, <expr><literal type="number">0x7fd3e0ac</literal></expr>, <expr><literal type="number">0x5e17d3a3</literal></expr>, <expr><literal type="number">0x20a2f3ae</literal></expr>, <expr><literal type="number">0x08242768</literal></expr>, <expr><literal type="number">0x76910765</literal></expr>,

<expr><literal type="number">0x59298ee4</literal></expr>, <expr><literal type="number">0x279caee9</literal></expr>, <expr><literal type="number">0x0f1a7a2f</literal></expr>, <expr><literal type="number">0x71af5a22</literal></expr>, <expr><literal type="number">0x7560f609</literal></expr>, <expr><literal type="number">0x0bd5d604</literal></expr>,

<expr><literal type="number">0x235302c2</literal></expr>, <expr><literal type="number">0x5de622cf</literal></expr>, <expr><literal type="number">0x725eab4e</literal></expr>, <expr><literal type="number">0x0ceb8b43</literal></expr>, <expr><literal type="number">0x246d5f85</literal></expr>, <expr><literal type="number">0x5ad87f88</literal></expr>,

<expr><literal type="number">0x7b1c4c87</literal></expr>, <expr><literal type="number">0x05a96c8a</literal></expr>, <expr><literal type="number">0x2d2fb84c</literal></expr>, <expr><literal type="number">0x539a9841</literal></expr>, <expr><literal type="number">0x7c2211c0</literal></expr>, <expr><literal type="number">0x029731cd</literal></expr>,

<expr><literal type="number">0x2a11e50b</literal></expr>, <expr><literal type="number">0x54a4c506</literal></expr>, <expr><literal type="number">0x69998315</literal></expr>, <expr><literal type="number">0x172ca318</literal></expr>, <expr><literal type="number">0x3faa77de</literal></expr>, <expr><literal type="number">0x411f57d3</literal></expr>,

<expr><literal type="number">0x6ea7de52</literal></expr>, <expr><literal type="number">0x1012fe5f</literal></expr>, <expr><literal type="number">0x38942a99</literal></expr>, <expr><literal type="number">0x46210a94</literal></expr>, <expr><literal type="number">0x67e5399b</literal></expr>, <expr><literal type="number">0x19501996</literal></expr>,

<expr><literal type="number">0x31d6cd50</literal></expr>, <expr><literal type="number">0x4f63ed5d</literal></expr>, <expr><literal type="number">0x60db64dc</literal></expr>, <expr><literal type="number">0x1e6e44d1</literal></expr>, <expr><literal type="number">0x36e89017</literal></expr>, <expr><literal type="number">0x485db01a</literal></expr>,

<expr><literal type="number">0x3f77c841</literal></expr>, <expr><literal type="number">0x41c2e84c</literal></expr>, <expr><literal type="number">0x69443c8a</literal></expr>, <expr><literal type="number">0x17f11c87</literal></expr>, <expr><literal type="number">0x38499506</literal></expr>, <expr><literal type="number">0x46fcb50b</literal></expr>,

<expr><literal type="number">0x6e7a61cd</literal></expr>, <expr><literal type="number">0x10cf41c0</literal></expr>, <expr><literal type="number">0x310b72cf</literal></expr>, <expr><literal type="number">0x4fbe52c2</literal></expr>, <expr><literal type="number">0x67388604</literal></expr>, <expr><literal type="number">0x198da609</literal></expr>,

<expr><literal type="number">0x36352f88</literal></expr>, <expr><literal type="number">0x48800f85</literal></expr>, <expr><literal type="number">0x6006db43</literal></expr>, <expr><literal type="number">0x1eb3fb4e</literal></expr>, <expr><literal type="number">0x238ebd5d</literal></expr>, <expr><literal type="number">0x5d3b9d50</literal></expr>,

<expr><literal type="number">0x75bd4996</literal></expr>, <expr><literal type="number">0x0b08699b</literal></expr>, <expr><literal type="number">0x24b0e01a</literal></expr>, <expr><literal type="number">0x5a05c017</literal></expr>, <expr><literal type="number">0x728314d1</literal></expr>, <expr><literal type="number">0x0c3634dc</literal></expr>,

<expr><literal type="number">0x2df207d3</literal></expr>, <expr><literal type="number">0x534727de</literal></expr>, <expr><literal type="number">0x7bc1f318</literal></expr>, <expr><literal type="number">0x0574d315</literal></expr>, <expr><literal type="number">0x2acc5a94</literal></expr>, <expr><literal type="number">0x54797a99</literal></expr>,

<expr><literal type="number">0x7cffae5f</literal></expr>, <expr><literal type="number">0x024a8e52</literal></expr>, <expr><literal type="number">0x06852279</literal></expr>, <expr><literal type="number">0x78300274</literal></expr>, <expr><literal type="number">0x50b6d6b2</literal></expr>, <expr><literal type="number">0x2e03f6bf</literal></expr>,

<expr><literal type="number">0x01bb7f3e</literal></expr>, <expr><literal type="number">0x7f0e5f33</literal></expr>, <expr><literal type="number">0x57888bf5</literal></expr>, <expr><literal type="number">0x293dabf8</literal></expr>, <expr><literal type="number">0x08f998f7</literal></expr>, <expr><literal type="number">0x764cb8fa</literal></expr>,

<expr><literal type="number">0x5eca6c3c</literal></expr>, <expr><literal type="number">0x207f4c31</literal></expr>, <expr><literal type="number">0x0fc7c5b0</literal></expr>, <expr><literal type="number">0x7172e5bd</literal></expr>, <expr><literal type="number">0x59f4317b</literal></expr>, <expr><literal type="number">0x27411176</literal></expr>,

<expr><literal type="number">0x1a7c5765</literal></expr>, <expr><literal type="number">0x64c97768</literal></expr>, <expr><literal type="number">0x4c4fa3ae</literal></expr>, <expr><literal type="number">0x32fa83a3</literal></expr>, <expr><literal type="number">0x1d420a22</literal></expr>, <expr><literal type="number">0x63f72a2f</literal></expr>,

<expr><literal type="number">0x4b71fee9</literal></expr>, <expr><literal type="number">0x35c4dee4</literal></expr>, <expr><literal type="number">0x1400edeb</literal></expr>, <expr><literal type="number">0x6ab5cde6</literal></expr>, <expr><literal type="number">0x42331920</literal></expr>, <expr><literal type="number">0x3c86392d</literal></expr>,

<expr><literal type="number">0x133eb0ac</literal></expr>, <expr><literal type="number">0x6d8b90a1</literal></expr>, <expr><literal type="number">0x450d4467</literal></expr>, <expr><literal type="number">0x3bb8646a</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>index_entry</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>unpacked_index_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>index_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpacked_index_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>delta_index</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>memsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>src_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_entry</name></name> <modifier>*</modifier></type><name><name>hash</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type> <name>create_delta_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>hsize</name></decl>, <decl><type ref="prev"/><name>hmask</name></decl>, <decl><type ref="prev"/><name>entries</name></decl>, <decl><type ref="prev"/><name>prev_val</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hash_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpacked_index_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_entry</name></name> <modifier>*</modifier></type><name>packed_entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>packed_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>memsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>bufsize</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>bufsize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>RABIN_WINDOW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&gt;=</operator> <literal type="number">0xffffffffUL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <literal type="number">0xfffffffeU</literal> <operator>/</operator> <name>RABIN_WINDOW</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hsize</name> <operator>=</operator> <name>entries</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <name>hsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>hsize</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hmask</name> <operator>=</operator> <name>hsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>memsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>hsize</name> <operator>+</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mem</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <name>hash</name> <operator>+</operator> <name>hsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash_count</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>hsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hash_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_val</name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>data</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>entries</name> <operator>*</operator> <name>RABIN_WINDOW</name> <operator>-</operator> <name>RABIN_WINDOW</name></expr>;</init>

<condition><expr><name>data</name> <operator>&gt;=</operator> <name>buffer</name></expr>;</condition>

<incr><expr><name>data</name> <operator>-=</operator> <name>RABIN_WINDOW</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>RABIN_WINDOW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>^</operator> <name><name>T</name><index>[<expr><name>val</name> <operator>&gt;&gt;</operator> <name>RABIN_SHIFT</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>prev_val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>entry</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>RABIN_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>entries</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prev_val</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <name>hmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>RABIN_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>entry</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hash_count</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hash_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>HASH_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entries</name> <operator>-=</operator> <name><name>hash_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>HASH_LIMIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>hash_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>HASH_LIMIT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>acc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>unpacked_index_entry</name></name> <modifier>*</modifier></type><name>keep</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>-=</operator> <name>HASH_LIMIT</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>acc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>keep</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>entry</name></expr>)</condition>;</do>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hash_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></sizeof>

<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>packed_hash</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>hsize</name><operator>+</operator><literal type="number">1</literal><operator>)</operator>

<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>packed_entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mem</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <name>memsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>src_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>src_size</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>hash_mask</name></name> <operator>=</operator> <name>hmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>packed_hash</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <name>packed_hash</name> <operator>+</operator> <operator>(</operator><name>hsize</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>packed_entry</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>packed_hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>packed_entry</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>entry</name></expr>;</condition> <incr><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>packed_entry</name><operator>++</operator> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>packed_hash</name><index>[<expr><name>hsize</name></expr>]</index></name> <operator>=</operator> <name>packed_entry</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>packed_entry</name> <operator>-</operator> <operator>(</operator>struct <name>index_entry</name> <operator>*</operator><operator>)</operator><name>mem</name> <operator>==</operator> <name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_delta_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>sizeof_delta_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>index</name><operator>-&gt;</operator><name>memsize</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OP_SIZE</name></cpp:macro> <cpp:value>(5 + 5 + 1 + RABIN_WINDOW + 7)</cpp:value></cpp:define>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>create_delta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>delta_index</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>trg_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>trg_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>delta_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>max_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>outpos</name></decl>, <decl><type ref="prev"/><name>moff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>outsize</name></decl>, <decl><type ref="prev"/><name>msize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inscnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ref_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>delta_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trg_buf</name> <operator>||</operator> <operator>!</operator><name>trg_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>outsize</name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&amp;&amp;</operator> <name>outsize</name> <operator>&gt;=</operator> <name>max_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>outsize</name> <operator>=</operator> <name>max_size</name> <operator>+</operator> <name>MAX_OP_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>outsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>src_size</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>l</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>l</name> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>trg_size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>l</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>l</name> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_data</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>src_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_top</name> <operator>=</operator> <name>ref_data</name> <operator>+</operator> <name><name>index</name><operator>-&gt;</operator><name>src_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>trg_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>trg_buf</name> <operator>+</operator> <name>trg_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>outpos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RABIN_WINDOW</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>&lt;</operator> <name>top</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>data</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>^</operator> <name><name>T</name><index>[<expr><name>val</name> <operator>&gt;&gt;</operator> <name>RABIN_SHIFT</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>inscnt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>moff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>data</name> <operator>&lt;</operator> <name>top</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>index_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>^=</operator> <name><name>U</name><index>[<expr><name><name>data</name><index>[<expr><operator>-</operator><name>RABIN_WINDOW</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>^</operator> <name><name>T</name><index>[<expr><name>val</name> <operator>&gt;&gt;</operator> <name>RABIN_SHIFT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <name><name>index</name><operator>-&gt;</operator><name>hash_mask</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>entry</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>entry</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ref_size</name> <init>= <expr><name>ref_top</name> <operator>-</operator> <name>ref</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ref_size</name> <operator>&gt;</operator> <name>top</name> <operator>-</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ref_size</name> <operator>=</operator> <name>top</name> <operator>-</operator> <name>src</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ref_size</name> <operator>&lt;=</operator> <name>msize</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>ref_size</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>==</operator> <operator>*</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ref</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&lt;</operator> <name>ref</name> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msize</name> <operator>=</operator> <name>ref</name> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>moff</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-</operator> <name>ref_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inscnt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>outpos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inscnt</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inscnt</name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name> <operator>-</operator> <name>inscnt</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>inscnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inscnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>msize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inscnt</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>moff</name> <operator>&amp;&amp;</operator> <name><name>ref_data</name><index>[<expr><name>moff</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>data</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msize</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>moff</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>outpos</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>inscnt</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outpos</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>inscnt</name><operator>--</operator></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></while>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name> <operator>-</operator> <name>inscnt</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>inscnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inscnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>msize</name> <operator>&lt;</operator> <literal type="number">0x10000</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>msize</name> <operator>-</operator> <literal type="number">0x10000</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>msize</name> <operator>-=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>out</name> <operator>+</operator> <name>outpos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>moff</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>moff</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moff</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>moff</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>i</name> <operator>|=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moff</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>moff</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>i</name> <operator>|=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moff</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>moff</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr><operator>,</operator> <expr><name>i</name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&amp;</operator> <literal type="number">0x00ff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>msize</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>|=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>msize</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>i</name> <operator>|=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>msize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>moff</name> <operator>+=</operator> <name>msize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msize</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>moff</name> <operator>&gt;</operator> <literal type="number">0xffffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msize</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>RABIN_WINDOW</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator>

<operator>^</operator> <name><name>T</name><index>[<expr><name>val</name> <operator>&gt;&gt;</operator> <name>RABIN_SHIFT</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>outpos</name> <operator>&gt;=</operator> <name>outsize</name> <operator>-</operator> <name>MAX_OP_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>out</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>outsize</name> <operator>=</operator> <name>outsize</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&amp;&amp;</operator> <name>outsize</name> <operator>&gt;=</operator> <name>max_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>outsize</name> <operator>=</operator> <name>max_size</name> <operator>+</operator> <name>MAX_OP_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&amp;&amp;</operator> <name>outpos</name> <operator>&gt;</operator> <name>max_size</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>inscnt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>outpos</name> <operator>-</operator> <name>inscnt</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>inscnt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&amp;&amp;</operator> <name>outpos</name> <operator>&gt;</operator> <name>max_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>delta_size</name> <operator>=</operator> <name>outpos</name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

</unit>
