<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\blame.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prio-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICKAXE_BLAME_MOVE</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICKAXE_BLAME_COPY</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICKAXE_BLAME_COPY_HARDER</name></cpp:macro> <cpp:value>04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICKAXE_BLAME_COPY_HARDEST</name></cpp:macro> <cpp:value>010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLAME_DEFAULT_MOVE_SCORE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLAME_DEFAULT_COPY_SCORE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<struct_decl>struct <name>fingerprint</name>;</struct_decl>

<struct>struct <name>blame_origin</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>refcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>suspects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fingerprint</name></name> <modifier>*</modifier></type><name>fingerprints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>blob_oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>guilty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>blame_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s_lno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ignored</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unblamable</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>blame_scoreboard</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>final</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prio_queue</name></name></type> <name>commits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>final_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>final_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>ignore_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lineno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_read_blob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_get_patch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_commits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>move_score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>copy_score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents_from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reverse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xdl_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_whole_file_rename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>debug</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>on_sanity_fail</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>found_guilty_entry</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>found_guilty_entry_data</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>blame_origin_incref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>o</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>blame_origin_decref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>blame_coalesce</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>blame_sort_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>blame_entry_score</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>assign_blame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>blame_nth_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lno</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>init_scoreboard</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setup_scoreboard</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>blame_entry_prepend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>get_blame_suspects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
