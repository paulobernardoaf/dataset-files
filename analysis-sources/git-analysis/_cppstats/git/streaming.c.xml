<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\streaming.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streaming.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replace-object.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<enum>enum <name>input_source</name> <block>{

<decl><name>stream_error</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>incore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>loose</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>pack_non_delta</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open_istream_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_info</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>object_type</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close_istream_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>read_istream_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>stream_vtbl</name> <block>{

<decl_stmt><decl><type><name>close_istream_fn</name></type> <name>close</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>read_istream_fn</name></type> <name>read</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open_method_decl</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int open_istream_ ##name (struct git_istream *st, struct repository *r, struct object_info *oi, const struct object_id *oid, enum object_type *type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close_method_decl</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int close_istream_ ##name (struct git_istream *st)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_method_decl</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ssize_t read_istream_ ##name (struct git_istream *st, char *buf, size_t sz)</cpp:value></cpp:define>

<expr_stmt><expr><specifier>static</specifier> <call><name>open_method_decl</name><argument_list>(<argument><expr><name>incore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>open_method_decl</name><argument_list>(<argument><expr><name>loose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>open_method_decl</name><argument_list>(<argument><expr><name>pack_non_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>attach_stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>open_istream_fn</name></type> <name><name>open_istream_tbl</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>open_istream_incore</name></expr>,

<expr><name>open_istream_loose</name></expr>,

<expr><name>open_istream_pack_non_delta</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_BUFFER</name></cpp:macro> <cpp:value>(1024*16)</cpp:value></cpp:define>

<struct>struct <name>filtered_istream</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>upstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ibuf</name><index>[<expr><name>FILTER_BUFFER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>obuf</name><index>[<expr><name>FILTER_BUFFER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_end</name></decl>, <decl><type ref="prev"/><name>i_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>o_end</name></decl>, <decl><type ref="prev"/><name>o_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_finished</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>git_istream</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>stream_vtbl</name></name> <modifier>*</modifier></type><name>vtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>git_zstream</name></type> <name>z</name></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>z_unused</name></decl>, <decl><name>z_used</name></decl>, <decl><name>z_done</name></decl>, <decl><name>z_error</name></decl> }</block> <decl><name>z_state</name></decl>;</enum>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>read_ptr</name></decl>;</decl_stmt>

}</block> <decl><name>incore</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mapped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mapsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hdr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hdr_avail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hdr_used</name></decl>;</decl_stmt>

}</block> <decl><name>loose</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>pos</name></decl>;</decl_stmt>

}</block> <decl><name>in_pack</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>filtered_istream</name></name></type> <name>filtered</name></decl>;</decl_stmt>

}</block> <decl><name>u</name></decl>;</union>

}</block>;</struct>

<function><type><name>int</name></type> <name>close_istream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>st</name><operator>-&gt;</operator><name>vtbl</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>read_istream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>st</name><operator>-&gt;</operator><name>vtbl</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>input_source</name></name></type> <name>istream_source</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>object_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_info</name></name> <modifier>*</modifier></type><name>oi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oi</name><operator>-&gt;</operator><name>typep</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oi</name><operator>-&gt;</operator><name>sizep</name></name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>stream_error</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>oi</name><operator>-&gt;</operator><name>whence</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>OI_LOOSE</name></expr>:</case>

<return>return <expr><name>loose</name></expr>;</return>

<case>case <expr><name>OI_PACKED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>packed</name><operator>.</operator><name>is_delta</name></name> <operator>&amp;&amp;</operator> <name>big_file_threshold</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pack_non_delta</name></expr>;</return></block_content></block></if></if_stmt>

<default>default:</default>

<return>return <expr><name>incore</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>open_istream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>object_type</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_info</name></name></type> <name>oi</name> <init>= <expr><name>OBJECT_INFO_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>real</name> <init>= <expr><call><name>lookup_replace_object</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>input_source</name></name></type> <name>src</name> <init>= <expr><call><name>istream_source</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>open_istream_tbl</name><index>[<expr><name>src</name></expr>]</index></name><operator>(</operator><name>st</name><operator>,</operator> <name>r</name><operator>,</operator> <operator>&amp;</operator><name>oi</name><operator>,</operator> <name>real</name><operator>,</operator> <name>type</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>open_istream_incore</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>nst</name> <init>= <expr><call><name>attach_stream_filter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_istream</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name>nst</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_deflated_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>==</operator> <name>z_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>close_method_decl</name><argument_list>(<argument>filtered</argument>)</argument_list></macro>

<block>{

<expr><call><name>free_stream_filter</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>filtered</name><operator>.</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><call><name>close_istream</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>filtered</name><operator>.</operator><name>upstream</name></name></expr></argument>)</argument_list></call></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>read_method_decl</name><argument_list>(<argument>filtered</argument>)</argument_list></macro>

<block>{

struct <expr><name>filtered_istream</name> <operator>*</operator><name>fs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>filtered</name></name><operator>)</operator></expr>;

<expr><name>size_t</name> <name>filled</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<while>while <condition>(<expr><name>sz</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>o_ptr</name></name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>o_end</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_move</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>o_end</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>o_ptr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <name>to_move</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to_move</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>filled</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>obuf</name></name> <operator>+</operator> <name><name>fs</name><operator>-&gt;</operator><name>o_ptr</name></name></expr></argument>, <argument><expr><name>to_move</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>o_ptr</name></name> <operator>+=</operator> <name>to_move</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name>to_move</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filled</name> <operator>+=</operator> <name>to_move</name></expr>;</expr_stmt>

<continue>continue;</continue>

<expr_stmt/></block_content></block></if></if_stmt></block_content></block></while>}</block>

<name><name>fs</name><operator>-&gt;</operator><name>o_end</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>o_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>i_ptr</name></name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_feed</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name> <operator>-</operator> <name><name>fs</name><operator>-&gt;</operator><name>i_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_receive</name> <init>= <expr><name>FILTER_BUFFER</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stream_filter</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,

<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <name><name>fs</name><operator>-&gt;</operator><name>i_ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_feed</name></expr></argument>,

<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_receive</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>i_ptr</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name> <operator>-</operator> <name>to_feed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>o_end</name></name> <operator>=</operator> <name>FILTER_BUFFER</name> <operator>-</operator> <name>to_receive</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>input_finished</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_receive</name> <init>= <expr><name>FILTER_BUFFER</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stream_filter</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_receive</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>o_end</name></name> <operator>=</operator> <name>FILTER_BUFFER</name> <operator>-</operator> <name>to_receive</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>o_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>i_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fs</name><operator>-&gt;</operator><name>input_finished</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name> <operator>=</operator> <call><name>read_istream</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name>FILTER_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>input_finished</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

}

return <expr_stmt><expr><name>filled</name></expr>;</expr_stmt>

}

static <decl_stmt><decl><type><name><name>struct</name> <name>stream_vtbl</name></name></type> <name>filtered_vtbl</name> <init>= <expr><block>{

<expr><name>close_istream_filtered</name></expr>,

<expr><name>read_istream_filtered</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>attach_stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>ifs</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ifs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>filtered_istream</name></name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ifs</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>filtered</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ifs</name><operator>-&gt;</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>filtered_vtbl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>upstream</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>i_end</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>i_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>o_end</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>o_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>input_finished</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>ifs</name></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>read_method_decl</name><argument_list>(<argument>loose</argument>)</argument_list></macro>

<block>{

<expr><name>size_t</name> <name>total_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>z_done</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>z_error</name></expr>:</case>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<break>break;</break>

<expr_stmt/></block_content></block></switch>}</block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_used</name></name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_avail</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_copy</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_avail</name></name> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_used</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <name>to_copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to_copy</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr</name></name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_used</name></name></expr></argument>, <argument><expr><name>to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_used</name></name> <operator>+=</operator> <name>to_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_read</name> <operator>+=</operator> <name>to_copy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>total_read</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>total_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>total_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>git_inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_read</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_out</name></name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>=</operator> <name>z_done</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>!=</operator> <name>Z_BUF_ERROR</name> <operator>||</operator> <name>total_read</name> <operator>&lt;</operator> <name>sz</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>=</operator> <name>z_error</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>total_read</name></expr>;</return>

}

static <macro><name>close_method_decl</name><argument_list>(<argument>loose</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>close_deflated_stream</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapped</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stream_vtbl</name></name></type> <name>loose_vtbl</name> <init>= <expr><block>{

<expr><name>close_istream_loose</name></expr>,

<expr><name>read_istream_loose</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>open_method_decl</name><argument_list>(<argument>loose</argument>)</argument_list></macro>

<block>{

<expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapped</name></name> <operator>=</operator> <call><name>map_loose_object</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapsize</name></name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapped</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>unpack_loose_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>,

<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapped</name></name></expr></argument>,

<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapsize</name></name></expr></argument>,

<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>parse_loose_header</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapped</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>mapsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_used</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>loose</name><operator>.</operator><name>hdr_avail</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>=</operator> <name>z_used</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>loose_vtbl</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>read_method_decl</name><argument_list>(<argument>pack_non_delta</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>z_unused</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_inflate_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>=</operator> <name>z_used</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>z_done</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>z_error</name></expr>:</case>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>z_used</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<while>while <condition>(<expr><name>total_read</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pack_window</name></name> <modifier>*</modifier></type><name>window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mapped</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mapped</name> <operator>=</operator> <call><name>use_pack</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in_pack</name><operator>.</operator><name>pack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window</name></expr></argument>,

<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in_pack</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>total_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>total_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>mapped</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>git_inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in_pack</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_in</name></name> <operator>-</operator> <name>mapped</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_read</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>z</name><operator>.</operator><name>next_out</name></name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unuse_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>=</operator> <name>z_done</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>Z_BUF_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>=</operator> <name>z_error</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>total_read</name></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>close_method_decl</name><argument_list>(<argument>pack_non_delta</argument>)</argument_list></macro>

<block>{

<expr><call><name>close_deflated_stream</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stream_vtbl</name></name></type> <name>pack_non_delta_vtbl</name> <init>= <expr><block>{

<expr><name>close_istream_pack_non_delta</name></expr>,

<expr><name>read_istream_pack_non_delta</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>open_method_decl</name><argument_list>(<argument>pack_non_delta</argument>)</argument_list></macro>

<block>{

struct <expr><name>pack_window</name> <operator>*</operator><name>window</name></expr>;

enum <expr><name>object_type</name> <name>in_pack_type</name></expr>;

<expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in_pack</name><operator>.</operator><name>pack</name></name> <operator>=</operator> <name><name>oi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>packed</name><operator>.</operator><name>pack</name></name></expr>;

<expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in_pack</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>oi</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>packed</name><operator>.</operator><name>offset</name></name></expr>;

<expr><name>window</name> <operator>=</operator> <name>NULL</name></expr>;

<expr><name>in_pack_type</name> <operator>=</operator> <call><name>unpack_object_header</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in_pack</name><operator>.</operator><name>pack</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>window</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in_pack</name><operator>.</operator><name>pos</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>unuse_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>window</name></expr></argument>)</argument_list></call></expr>;

<switch>switch <condition>(<expr><name>in_pack_type</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

<case>case <expr><name>OBJ_COMMIT</name></expr>:</case>

<case>case <expr><name>OBJ_TREE</name></expr>:</case>

<case>case <expr><name>OBJ_BLOB</name></expr>:</case>

<case>case <expr><name>OBJ_TAG</name></expr>:</case>

<break>break;</break>

<expr_stmt/></block_content></block></switch>}</block>

<name><name>st</name><operator>-&gt;</operator><name>z_state</name></name> <operator>=</operator> <name>z_unused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>pack_non_delta_vtbl</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <macro><name>close_method_decl</name><argument_list>(<argument>incore</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <macro><name>read_method_decl</name><argument_list>(<argument>incore</argument>)</argument_list></macro>

<block>{

<expr><name>size_t</name> <name>read_size</name> <operator>=</operator> <name>sz</name></expr>;

<expr><name>size_t</name> <name>remainder</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>read_ptr</name></name></expr>;

<if_stmt><if>if <condition>(<expr><name>remainder</name> <operator>&lt;=</operator> <name>read_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>read_size</name> <operator>=</operator> <name>remainder</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>read_ptr</name></name> <operator>+=</operator> <name>read_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>read_size</name></expr>;</return>

}

static <decl_stmt><decl><type><name><name>struct</name> <name>stream_vtbl</name></name></type> <name>incore_vtbl</name> <init>= <expr><block>{

<expr><name>close_istream_incore</name></expr>,

<expr><name>read_istream_incore</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>open_method_decl</name><argument_list>(<argument>incore</argument>)</argument_list></macro>

<block>{

<expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>read_object_file_extended</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;

<expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>read_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name><name>st</name><operator>-&gt;</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>incore_vtbl</name></expr>;

<return>return <expr><ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>incore</name><operator>.</operator><name>buf</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

}</block></expr></expr_stmt>

<function><type><name>int</name></type> <name>stream_blob_to_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>can_seek</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>git_istream</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>kept</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>open_istream</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_stream_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>close_and_exit</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>wrote</name></decl>, <decl><type ref="prev"/><name>holeto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>readlen</name> <init>= <expr><call><name>read_istream</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>readlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>close_and_exit</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>readlen</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>can_seek</name> <operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>readlen</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>holeto</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>holeto</name> <operator>&lt;</operator> <name>readlen</name></expr>;</condition> <incr><expr><name>holeto</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>holeto</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>readlen</name> <operator>==</operator> <name>holeto</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kept</name> <operator>+=</operator> <name>holeto</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kept</name> <operator>&amp;&amp;</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>kept</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>close_and_exit</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>kept</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wrote</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>close_and_exit</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>kept</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>kept</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>

<call><name>xwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>close_and_exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>close_and_exit</name>:</label>

<expr_stmt><expr><call><name>close_istream</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
