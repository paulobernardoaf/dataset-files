<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\hashmap.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>strhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>strihash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>memhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>memihash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>memihash_cont</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hash_seed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>oidhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>hashmap_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hashmap_cmp_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hashmap_cmp_fn_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry_or_key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>hashmap</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashmap_cmp_fn</name></type> <name>cmpfn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>cmpfn_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>private_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tablesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>grow_at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shrink_at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>do_count_items</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>hashmap_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><name>hashmap_cmp_fn</name></type> <name>equals_function</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>equals_function_data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>initial_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>hashmap_free_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_free</name><parameter_list>(<parameter><type><name>map</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hashmap_free_(map, -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_free_entries</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hashmap_free_(map, offsetof(type, member));</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hashmap_entry_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>hashmap_get_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>do_count_items</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>map</name><operator>-&gt;</operator><name>private_size</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"hashmap_get_size: size not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>hashmap_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>hashmap_get_from_hash</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>hashmap_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>keydata</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>hashmap_get_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>hashmap_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>hashmap_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_put_entry</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>keyvar</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null_offset(hashmap_put(map, &amp;(keyvar)-&gt;member), OFFSETOF_VAR(keyvar, member))</cpp:value></cpp:define>

<function_decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>hashmap_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_remove_entry</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>keyvar</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>keydata</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null_offset( hashmap_remove(map, &amp;(keyvar)-&gt;member, keydata), OFFSETOF_VAR(keyvar, member))</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>hashmap_bucket</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>hashmap_iter</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tablepos</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>hashmap_iter_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hashmap_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>hashmap_iter_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>hashmap_iter_first</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hashmap_iter_init</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>hashmap_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_iter_first_entry</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>iter</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null(hashmap_iter_first(map, iter), type, member)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_iter_next_entry_offset</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null_offset(hashmap_iter_next(iter), offset)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_iter_first_entry_offset</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>iter</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null_offset(hashmap_iter_first(map, iter), offset)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_for_each_entry</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>iter</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (var = hashmap_iter_first_entry_offset(map, iter, OFFSETOF_VAR(var, member)); var; var = hashmap_iter_next_entry_offset(iter, OFFSETOF_VAR(var, member)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_get_entry</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>keyvar</name></type></parameter>, <parameter><type><name>member</name></type></parameter>, <parameter><type><name>keydata</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null_offset( hashmap_get(map, &amp;(keyvar)-&gt;member, keydata), OFFSETOF_VAR(keyvar, member))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_get_entry_from_hash</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>hash</name></type></parameter>, <parameter><type><name>keydata</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null(hashmap_get_from_hash(map, hash, keydata), type, member)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_get_next_entry</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of_or_null_offset(hashmap_get_next(map, &amp;(var)-&gt;member), OFFSETOF_VAR(var, member))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmap_for_each_entry_from</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (; var; var = hashmap_get_next_entry(map, var, member))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hashmap_disable_item_counting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>do_count_items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hashmap_enable_item_counting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>do_count_items</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_iter_init</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>hashmap_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>do_count_items</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>private_size</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>memintern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strintern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>memintern</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
