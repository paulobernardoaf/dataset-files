<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\list-objects.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace.h"</cpp:file></cpp:include>

<struct>struct <name>traversal_context</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>show_object_fn</name></type> <name>show_object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>show_commit_fn</name></type> <name>show_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>show_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_blob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traversal_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>blob</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>&amp;</operator><name><name>blob</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pathlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>blob_objects</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad blob object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>SEEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>has_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>is_promisor_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>list_objects_filter__filter_object</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><name>LOFS_BLOB</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,

<argument><expr><name><name>path</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pathlen</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>LOFR_MARK_SEEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>LOFR_DO_SHOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>show_object</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>show_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_gitlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traversal_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traversal_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_tree_contents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traversal_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>interesting</name></name></type> <name>match</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pathspec</name><operator>.</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><name>all_entries_interesting</name></expr> </then><else>: <expr><name>entry_not_interesting</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>tree_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>!=</operator> <name>all_entries_interesting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>tree_entry_interesting</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>all_entries_not_interesting</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>entry_not_interesting</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>lookup_tree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"entry '%s' in tree %s has tree mode, "</literal>

<literal type="string">"but is not a tree"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>NOT_USER_GIVEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_tree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process_gitlink</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>,

<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>lookup_blob</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"entry '%s' in tree %s has blob mode, "</literal>

<literal type="string">"but is not a blob"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>NOT_USER_GIVEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traversal_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>baselen</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>failed_parse</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad tree object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>SEEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>failed_parse</name> <operator>=</operator> <call><name>parse_tree_gently</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>failed_parse</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>ignore_missing_links</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>exclude_promisor_objects</name></name> <operator>&amp;&amp;</operator>

<call><name>is_promisor_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>-&gt;</operator><name>do_not_die_on_missing_tree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"bad tree object %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>list_objects_filter__filter_object</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><name>LOFS_BEGIN_TREE</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,

<argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>baselen</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>LOFR_MARK_SEEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>LOFR_DO_SHOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>show_object</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>show_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>LOFR_SKIP_TREE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trace_printf</name><argument_list>(<argument><expr><literal type="string">"Skipping contents of tree %s...\n"</literal></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>failed_parse</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process_tree_contents</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>list_objects_filter__filter_object</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><name>LOFS_END_TREE</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,

<argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>baselen</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>LOFR_MARK_SEEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;</operator> <name>LOFR_DO_SHOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>show_object</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>show_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>baselen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_tree_buffer</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_edge_parents_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,

<parameter><decl><type><name>show_edge_fn</name></type> <name>show_edge</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>parents</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>parents</name></expr>;</condition> <incr><expr><name>parents</name> <operator>=</operator> <name><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mark_tree_uninteresting</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>edge_hint</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_edge</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_edge_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,

<parameter><decl><type><name>show_edge_fn</name></type> <name>show_edge</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>parents</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>parents</name></expr>;</condition> <incr><expr><name>parents</name> <operator>=</operator> <name><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>edge_hint</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_edge</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mark_edges_uninteresting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,

<parameter><decl><type><name>show_edge_fn</name></type> <name>show_edge</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sparse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sparse</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>set</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oidset_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UNINTERESTING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_edge_parents</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>show_edge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mark_trees_uninteresting_sparse</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>revs</name><operator>-&gt;</operator><name>commits</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mark_tree_uninteresting</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>edge_hint_aggressive</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_edge</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mark_edge_parents_uninteresting</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>, <argument><expr><name>show_edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>-&gt;</operator><name>edge_hint_aggressive</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>revs</name><operator>-&gt;</operator><name>cmdline</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>revs</name><operator>-&gt;</operator><name>cmdline</name><operator>.</operator><name>rev</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mark_tree_uninteresting</name><argument_list>(<argument><expr><name><name>revs</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SHOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_edge</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pending_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>traverse_trees_and_blobs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traversal_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_array_entry</name></name> <modifier>*</modifier></type><name>pending</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>objects</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>pending</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>pending</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>pending</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>UNINTERESTING</name> <operator>|</operator> <name>SEEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SEEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>show_object</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>show_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>process_tree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>tree</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>process_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>blob</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unknown pending object %s (%s)"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>object_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_traverse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traversal_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>csp</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>csp</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>commit</name> <operator>=</operator> <call><name>get_revision</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>tree_objects</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>get_commit_tree</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>NOT_USER_GIVEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pending_tree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>parsed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to load root tree for commit %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>show_commit</name></name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>show_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>tree_blobs_in_commit_order</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>traverse_trees_and_blobs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>traverse_trees_and_blobs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>csp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>traverse_commit_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,

<parameter><decl><type><name>show_commit_fn</name></type> <name>show_commit</name></decl></parameter>,

<parameter><decl><type><name>show_object_fn</name></type> <name>show_object</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>show_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>traversal_context</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>revs</name></name> <operator>=</operator> <name>revs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>show_commit</name></name> <operator>=</operator> <name>show_commit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>show_object</name></name> <operator>=</operator> <name>show_object</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>show_data</name></name> <operator>=</operator> <name>show_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_traverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>traverse_commit_list_filtered</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>,

<parameter><decl><type><name>show_commit_fn</name></type> <name>show_commit</name></decl></parameter>,

<parameter><decl><type><name>show_object_fn</name></type> <name>show_object</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>show_data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omitted</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>traversal_context</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>revs</name></name> <operator>=</operator> <name>revs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>show_object</name></name> <operator>=</operator> <name>show_object</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>show_commit</name></name> <operator>=</operator> <name>show_commit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>show_data</name></name> <operator>=</operator> <name>show_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <call><name>list_objects_filter__init</name><argument_list>(<argument><expr><name>omitted</name></expr></argument>, <argument><expr><name>filter_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_traverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_objects_filter__free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
